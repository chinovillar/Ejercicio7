
Ejercicio7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006798  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080068a8  080068a8  000078a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb8  08006cb8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb8  08006cb8  00007cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc0  08006cc0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cc4  08006cc4  00007cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006cc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200001d4  08006e9c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006e9c  000083e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c071  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9b  00000000  00000000  0001426e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00016010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dc  00000000  00000000  00016cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001869c  00000000  00000000  0001768c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2a0  00000000  00000000  0002fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c019  00000000  00000000  0003dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9fe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  000ca024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ce6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006890 	.word	0x08006890

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006890 	.word	0x08006890

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fc22 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f822 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f904 	bl	8000ca0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a98:	f000 f864 	bl	8000b64 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a9c:	f000 f8d6 	bl	8000c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <main+0x40>)
 8000aa4:	f001 fc74 	bl	8002390 <HAL_TIM_PWM_Start>
HAL_UART_Receive_IT(&huart1, (uint8_t*)&buffer_rx[indice], 1);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <main+0x44>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <main+0x48>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <main+0x4c>)
 8000ab8:	f002 fa6b 	bl	8002f92 <HAL_UART_Receive_IT>
TIM2->CCR2=0;
 8000abc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <main+0x3c>
 8000ac8:	200001f0 	.word	0x200001f0
 8000acc:	2000028a 	.word	0x2000028a
 8000ad0:	20000280 	.word	0x20000280
 8000ad4:	20000238 	.word	0x20000238

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	@ 0x40
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	2228      	movs	r2, #40	@ 0x28
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fe01 	bl	80046ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b16:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 ff7d 	bl	8001a20 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b2c:	f000 f9d6 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	230f      	movs	r3, #15
 8000b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f9ea 	bl	8001f24 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b56:	f000 f9c1 	bl	8000edc <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3740      	adds	r7, #64	@ 0x40
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	615a      	str	r2, [r3, #20]
 8000b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000b9e:	2248      	movs	r2, #72	@ 0x48
 8000ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000baa:	2263      	movs	r2, #99	@ 0x63
 8000bac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bba:	4823      	ldr	r0, [pc, #140]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000bbc:	f001 fb40 	bl	8002240 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000bc6:	f000 f989 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000bd8:	f001 fd3e 	bl	8002658 <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000be2:	f000 f97b 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be6:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000be8:	f001 fb79 	bl	80022de <HAL_TIM_PWM_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000bf2:	f000 f973 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	4619      	mov	r1, r3
 8000c04:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000c06:	f002 f893 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c10:	f000 f964 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	@ 0x60
 8000c16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2204      	movs	r2, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000c2c:	f001 fc52 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c36:	f000 f951 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c3a:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <MX_TIM2_Init+0xe4>)
 8000c3c:	f000 f9a2 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000c40:	bf00      	nop
 8000c42:	3738      	adds	r7, #56	@ 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001f0 	.word	0x200001f0

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f002 f8b2 	bl	8002dec <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f000 f925 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000238 	.word	0x20000238
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <MX_GPIO_Init+0x40>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

if(buffer_rx[indice]== '+' || buffer_rx[indice]== '-' )
 8000cec:	4b74      	ldr	r3, [pc, #464]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b74      	ldr	r3, [pc, #464]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000cf4:	5c9b      	ldrb	r3, [r3, r2]
 8000cf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8000cf8:	d006      	beq.n	8000d08 <HAL_UART_RxCpltCallback+0x24>
 8000cfa:	4b71      	ldr	r3, [pc, #452]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b70      	ldr	r3, [pc, #448]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000d02:	5c9b      	ldrb	r3, [r3, r2]
 8000d04:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d06:	d164      	bne.n	8000dd2 <HAL_UART_RxCpltCallback+0xee>
{
	comando= buffer_rx[indice];
 8000d08:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000d10:	5c9a      	ldrb	r2, [r3, r2]
 8000d12:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000d14:	701a      	strb	r2, [r3, #0]

	if(comando=='+'){
 8000d16:	4b6c      	ldr	r3, [pc, #432]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8000d1c:	d10c      	bne.n	8000d38 <HAL_UART_RxCpltCallback+0x54>
		dato_rx++;
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a69      	ldr	r2, [pc, #420]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d26:	6013      	str	r3, [r2, #0]
		if(dato_rx>100){
 8000d28:	4b68      	ldr	r3, [pc, #416]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b64      	cmp	r3, #100	@ 0x64
 8000d2e:	dd13      	ble.n	8000d58 <HAL_UART_RxCpltCallback+0x74>
			dato_rx=100;
 8000d30:	4b66      	ldr	r3, [pc, #408]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d32:	2264      	movs	r2, #100	@ 0x64
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e00f      	b.n	8000d58 <HAL_UART_RxCpltCallback+0x74>
		}
	}
	else if(comando=='-'){
 8000d38:	4b63      	ldr	r3, [pc, #396]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d3e:	d10b      	bne.n	8000d58 <HAL_UART_RxCpltCallback+0x74>
		dato_rx--;
 8000d40:	4b62      	ldr	r3, [pc, #392]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a61      	ldr	r2, [pc, #388]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d48:	6013      	str	r3, [r2, #0]
		if(dato_rx<0){
 8000d4a:	4b60      	ldr	r3, [pc, #384]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da02      	bge.n	8000d58 <HAL_UART_RxCpltCallback+0x74>
			dato_rx=0;
 8000d52:	4b5e      	ldr	r3, [pc, #376]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		}
	}
if(dato_rx>=0 && dato_rx<=100)
 8000d58:	4b5c      	ldr	r3, [pc, #368]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db1f      	blt.n	8000da0 <HAL_UART_RxCpltCallback+0xbc>
 8000d60:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b64      	cmp	r3, #100	@ 0x64
 8000d66:	dc1b      	bgt.n	8000da0 <HAL_UART_RxCpltCallback+0xbc>
	{	char mensaje[50];
		TIM2->CCR2 = (uint32_t)dato_rx;
 8000d68:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38
		sprintf(mensaje,"\rEl ciclo de trabajo esta al %d%%.\n\r",dato_rx);
 8000d72:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4955      	ldr	r1, [pc, #340]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x1ec>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fc53 	bl	8004628 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9e2 	bl	8000150 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f107 0108 	add.w	r1, r7, #8
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	484e      	ldr	r0, [pc, #312]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000d9a:	f002 f877 	bl	8002e8c <HAL_UART_Transmit>
	{	char mensaje[50];
 8000d9e:	e014      	b.n	8000dca <HAL_UART_RxCpltCallback+0xe6>

	}
	else
	{
		char error[]="\rValor fuera de rango, por favor introducí un valor entre 0 y 100.\n\r";
 8000da0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x1f4>)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4611      	mov	r1, r2
 8000da8:	2246      	movs	r2, #70	@ 0x46
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fd2d 	bl	800480a <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)error, strlen(error), 100);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff f9cb 	bl	8000150 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f107 0108 	add.w	r1, r7, #8
 8000dc2:	2364      	movs	r3, #100	@ 0x64
 8000dc4:	4843      	ldr	r0, [pc, #268]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000dc6:	f002 f861 	bl	8002e8c <HAL_UART_Transmit>
	}
	indice=0;
 8000dca:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e067      	b.n	8000ea2 <HAL_UART_RxCpltCallback+0x1be>
}
else if(buffer_rx[indice]=='\r'){
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000dda:	5c9b      	ldrb	r3, [r3, r2]
 8000ddc:	2b0d      	cmp	r3, #13
 8000dde:	d148      	bne.n	8000e72 <HAL_UART_RxCpltCallback+0x18e>
	buffer_rx[indice]='\0';
 8000de0:	4b37      	ldr	r3, [pc, #220]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	5499      	strb	r1, [r3, r2]
	dato_rx= atoi(buffer_rx);
 8000dec:	4835      	ldr	r0, [pc, #212]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000dee:	f002 fe75 	bl	8003adc <atoi>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a35      	ldr	r2, [pc, #212]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000df6:	6013      	str	r3, [r2, #0]
	if(dato_rx>=0 && dato_rx<=100)
 8000df8:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db1f      	blt.n	8000e40 <HAL_UART_RxCpltCallback+0x15c>
 8000e00:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b64      	cmp	r3, #100	@ 0x64
 8000e06:	dc1b      	bgt.n	8000e40 <HAL_UART_RxCpltCallback+0x15c>
	{	char mensaje[50];
		TIM2->CCR2 = (uint32_t)dato_rx;
 8000e08:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38
		sprintf(mensaje,"\rEl ciclo de trabajo esta al %d%%.\n\r",dato_rx);
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <HAL_UART_RxCpltCallback+0x1e8>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	492d      	ldr	r1, [pc, #180]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x1ec>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fc03 	bl	8004628 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f992 	bl	8000150 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	4826      	ldr	r0, [pc, #152]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000e3a:	f002 f827 	bl	8002e8c <HAL_UART_Transmit>
	{	char mensaje[50];
 8000e3e:	e014      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x186>

	}
	else
	{	char error[]="\rValor fuera de rango, por favor introducí un valor entre 0 y 100.\n\r";
 8000e40:	4a25      	ldr	r2, [pc, #148]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x1f4>)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4611      	mov	r1, r2
 8000e48:	2246      	movs	r2, #70	@ 0x46
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fcdd 	bl	800480a <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)error, strlen(error), 100);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f97b 	bl	8000150 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f107 0108 	add.w	r1, r7, #8
 8000e62:	2364      	movs	r3, #100	@ 0x64
 8000e64:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000e66:	f002 f811 	bl	8002e8c <HAL_UART_Transmit>
	}
	indice=0;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e017      	b.n	8000ea2 <HAL_UART_RxCpltCallback+0x1be>
}
else{
	if(indice< 9){
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d810      	bhi.n	8000e9c <HAL_UART_RxCpltCallback+0x1b8>
		HAL_UART_Transmit(&huart1, (uint8_t*)&buffer_rx[indice], sizeof(buffer_rx[indice]), 100);
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000e82:	18d1      	adds	r1, r2, r3
 8000e84:	2364      	movs	r3, #100	@ 0x64
 8000e86:	2201      	movs	r2, #1
 8000e88:	4812      	ldr	r0, [pc, #72]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000e8a:	f001 ffff 	bl	8002e8c <HAL_UART_Transmit>
		indice++;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <HAL_UART_RxCpltCallback+0x1be>
	}
	else{
		indice=0;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
	}
}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&buffer_rx[indice], 1);
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x1f0>)
 8000eb2:	f002 f86e 	bl	8002f92 <HAL_UART_Receive_IT>

}
 8000eb6:	bf00      	nop
 8000eb8:	3750      	adds	r7, #80	@ 0x50
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000028a 	.word	0x2000028a
 8000ec4:	20000280 	.word	0x20000280
 8000ec8:	2000028b 	.word	0x2000028b
 8000ecc:	2000028c 	.word	0x2000028c
 8000ed0:	080068a8 	.word	0x080068a8
 8000ed4:	20000238 	.word	0x20000238
 8000ed8:	080068d0 	.word	0x080068d0

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_TIM_Base_MspInit+0x34>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_TIM_Base_MspInit+0x34>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_TIM_Base_MspInit+0x34>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa2:	d117      	bne.n	8000fd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_MspPostInit+0x58>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_TIM_MspPostInit+0x58>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_TIM_MspPostInit+0x58>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <HAL_TIM_MspPostInit+0x5c>)
 8000fd0:	f000 fba2 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <HAL_UART_MspInit+0x9c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d139      	bne.n	8001078 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_UART_MspInit+0xa0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	480f      	ldr	r0, [pc, #60]	@ (8001088 <HAL_UART_MspInit+0xa4>)
 800104a:	f000 fb65 	bl	8001718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <HAL_UART_MspInit+0xa4>)
 8001064:	f000 fb58 	bl	8001718 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2025      	movs	r0, #37	@ 0x25
 800106e:	f000 fa6a 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001072:	2025      	movs	r0, #37	@ 0x25
 8001074:	f000 fa83 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	40010800 	.word	0x40010800

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f940 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <USART1_IRQHandler+0x10>)
 80010ea:	f001 ff77 	bl	8002fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000238 	.word	0x20000238

080010f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return 1;
 80010fc:	2301      	movs	r3, #1
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <_kill>:

int _kill(int pid, int sig)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001110:	f003 fb40 	bl	8004794 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	2216      	movs	r2, #22
 8001118:	601a      	str	r2, [r3, #0]
  return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_exit>:

void _exit (int status)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800112e:	f04f 31ff 	mov.w	r1, #4294967295
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffe7 	bl	8001106 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <_exit+0x12>

0800113c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e00a      	b.n	8001164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114e:	f3af 8000 	nop.w
 8001152:	4601      	mov	r1, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf0      	blt.n	800114e <_read+0x12>
  }

  return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e009      	b.n	800119c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf1      	blt.n	8001188 <_write+0x12>
  }
  return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_close>:

int _close(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011d4:	605a      	str	r2, [r3, #4]
  return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b085      	sub	sp, #20
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
	...

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f003 faa8 	bl	8004794 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20005000 	.word	0x20005000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000290 	.word	0x20000290
 8001278:	200003e8 	.word	0x200003e8

0800127c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fff8 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	@ (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fa75 	bl	80047a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fbe7 	bl	8000a88 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012c4:	08006cc8 	.word	0x08006cc8
  ldr r2, =_sbss
 80012c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80012cc:	200003e4 	.word	0x200003e4

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f923 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fdfa 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f93b 	bl	800159a <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f903 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	@ (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000008 	.word	0x20000008
 8001380:	20000294 	.word	0x20000294

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000294 	.word	0x20000294

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4906      	ldr	r1, [pc, #24]	@ (8001430 <__NVIC_EnableIRQ+0x34>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff90 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	@ (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff2d 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff42 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff35 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e020      	b.n	800161e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d005      	beq.n	800164c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	e051      	b.n	80016f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020e 	bic.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_DMA_Abort_IT+0xd4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d029      	beq.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <HAL_DMA_Abort_IT+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x9e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_DMA_Abort_IT+0xdc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01a      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x98>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_DMA_Abort_IT+0xe0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d012      	beq.n	80016ba <HAL_DMA_Abort_IT+0x92>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_DMA_Abort_IT+0xe4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00a      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x8c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <HAL_DMA_Abort_IT+0xe8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d102      	bne.n	80016ae <HAL_DMA_Abort_IT+0x86>
 80016a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016ac:	e00e      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016b2:	e00b      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	e008      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	e005      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c4:	e002      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016c6:	2310      	movs	r3, #16
 80016c8:	e000      	b.n	80016cc <HAL_DMA_Abort_IT+0xa4>
 80016ca:	2301      	movs	r3, #1
 80016cc:	4a11      	ldr	r2, [pc, #68]	@ (8001714 <HAL_DMA_Abort_IT+0xec>)
 80016ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
    } 
  }
  return status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020008 	.word	0x40020008
 8001700:	4002001c 	.word	0x4002001c
 8001704:	40020030 	.word	0x40020030
 8001708:	40020044 	.word	0x40020044
 800170c:	40020058 	.word	0x40020058
 8001710:	4002006c 	.word	0x4002006c
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b08b      	sub	sp, #44	@ 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e169      	b.n	8001a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800172c:	2201      	movs	r2, #1
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8158 	bne.w	80019fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a9a      	ldr	r2, [pc, #616]	@ (80019b8 <HAL_GPIO_Init+0x2a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d05e      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001754:	4a98      	ldr	r2, [pc, #608]	@ (80019b8 <HAL_GPIO_Init+0x2a0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d875      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800175a:	4a98      	ldr	r2, [pc, #608]	@ (80019bc <HAL_GPIO_Init+0x2a4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d058      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001760:	4a96      	ldr	r2, [pc, #600]	@ (80019bc <HAL_GPIO_Init+0x2a4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d86f      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001766:	4a96      	ldr	r2, [pc, #600]	@ (80019c0 <HAL_GPIO_Init+0x2a8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d052      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 800176c:	4a94      	ldr	r2, [pc, #592]	@ (80019c0 <HAL_GPIO_Init+0x2a8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d869      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001772:	4a94      	ldr	r2, [pc, #592]	@ (80019c4 <HAL_GPIO_Init+0x2ac>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04c      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001778:	4a92      	ldr	r2, [pc, #584]	@ (80019c4 <HAL_GPIO_Init+0x2ac>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d863      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800177e:	4a92      	ldr	r2, [pc, #584]	@ (80019c8 <HAL_GPIO_Init+0x2b0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d046      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001784:	4a90      	ldr	r2, [pc, #576]	@ (80019c8 <HAL_GPIO_Init+0x2b0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d85d      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800178a:	2b12      	cmp	r3, #18
 800178c:	d82a      	bhi.n	80017e4 <HAL_GPIO_Init+0xcc>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d859      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <HAL_GPIO_Init+0x80>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	08001813 	.word	0x08001813
 800179c:	080017ed 	.word	0x080017ed
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001841 	.word	0x08001841
 80017a8:	08001847 	.word	0x08001847
 80017ac:	08001847 	.word	0x08001847
 80017b0:	08001847 	.word	0x08001847
 80017b4:	08001847 	.word	0x08001847
 80017b8:	08001847 	.word	0x08001847
 80017bc:	08001847 	.word	0x08001847
 80017c0:	08001847 	.word	0x08001847
 80017c4:	08001847 	.word	0x08001847
 80017c8:	08001847 	.word	0x08001847
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001847 	.word	0x08001847
 80017d4:	08001847 	.word	0x08001847
 80017d8:	08001847 	.word	0x08001847
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	08001809 	.word	0x08001809
 80017e4:	4a79      	ldr	r2, [pc, #484]	@ (80019cc <HAL_GPIO_Init+0x2b4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ea:	e02c      	b.n	8001846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e029      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e024      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	3308      	adds	r3, #8
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e01f      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	330c      	adds	r3, #12
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e01a      	b.n	8001848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181a:	2304      	movs	r3, #4
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e013      	b.n	8001848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	611a      	str	r2, [r3, #16]
          break;
 8001832:	e009      	b.n	8001848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	615a      	str	r2, [r3, #20]
          break;
 800183e:	e003      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x130>
          break;
 8001846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	@ 0xff
 800184c:	d801      	bhi.n	8001852 <HAL_GPIO_Init+0x13a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e001      	b.n	8001856 <HAL_GPIO_Init+0x13e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	@ 0xff
 800185c:	d802      	bhi.n	8001864 <HAL_GPIO_Init+0x14c>
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x152>
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	3b08      	subs	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	210f      	movs	r1, #15
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80b1 	beq.w	80019fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001898:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_GPIO_Init+0x2b8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b0:	4a48      	ldr	r2, [pc, #288]	@ (80019d4 <HAL_GPIO_Init+0x2bc>)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a40      	ldr	r2, [pc, #256]	@ (80019d8 <HAL_GPIO_Init+0x2c0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1ec>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3f      	ldr	r2, [pc, #252]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1e8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3e      	ldr	r2, [pc, #248]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3d      	ldr	r2, [pc, #244]	@ (80019e4 <HAL_GPIO_Init+0x2cc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1e0>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e006      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e004      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_GPIO_Init+0x1ee>
 8001904:	2300      	movs	r3, #0
 8001906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	4093      	lsls	r3, r2
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001916:	492f      	ldr	r1, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x2bc>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	492c      	ldr	r1, [pc, #176]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	4928      	ldr	r1, [pc, #160]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001948:	4013      	ands	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001958:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4922      	ldr	r1, [pc, #136]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	491e      	ldr	r1, [pc, #120]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4918      	ldr	r1, [pc, #96]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4914      	ldr	r1, [pc, #80]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d021      	beq.n	80019ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	490e      	ldr	r1, [pc, #56]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e021      	b.n	80019fa <HAL_GPIO_Init+0x2e2>
 80019b6:	bf00      	nop
 80019b8:	10320000 	.word	0x10320000
 80019bc:	10310000 	.word	0x10310000
 80019c0:	10220000 	.word	0x10220000
 80019c4:	10210000 	.word	0x10210000
 80019c8:	10120000 	.word	0x10120000
 80019cc:	10110000 	.word	0x10110000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	40011000 	.word	0x40011000
 80019e4:	40011400 	.word	0x40011400
 80019e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4909      	ldr	r1, [pc, #36]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae8e 	bne.w	800172c <HAL_GPIO_Init+0x14>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	372c      	adds	r7, #44	@ 0x2c
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e272      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	4b92      	ldr	r3, [pc, #584]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a58:	4b8c      	ldr	r3, [pc, #560]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b89      	ldr	r3, [pc, #548]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x12c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d168      	bne.n	8001b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e24c      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x76>
 8001a88:	4b80      	ldr	r3, [pc, #512]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b78      	ldr	r3, [pc, #480]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a77      	ldr	r2, [pc, #476]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xbc>
 8001ac2:	4b72      	ldr	r3, [pc, #456]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a71      	ldr	r2, [pc, #452]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001adc:	4b6b      	ldr	r3, [pc, #428]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b68      	ldr	r3, [pc, #416]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc42 	bl	8001384 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fc3e 	bl	8001384 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e200      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5d      	ldr	r3, [pc, #372]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe4>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fc2e 	bl	8001384 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fc2a 	bl	8001384 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1ec      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x10c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
 8001b72:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c0      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4939      	ldr	r1, [pc, #228]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fbe3 	bl	8001384 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fbdf 	bl	8001384 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4927      	ldr	r1, [pc, #156]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbc2 	bl	8001384 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fbbe 	bl	8001384 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e180      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fba2 	bl	8001384 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fb9e 	bl	8001384 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e160      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 face 	bl	8002204 <RCC_Delay>
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff fb88 	bl	8001384 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fb84 	bl	8001384 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e146      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42420000 	.word	0x42420000
 8001c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b92      	ldr	r3, [pc, #584]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a6 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a87      	ldr	r2, [pc, #540]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b85      	ldr	r3, [pc, #532]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b82      	ldr	r3, [pc, #520]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb45 	bl	8001384 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fb41 	bl	8001384 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	@ 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e103      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b75      	ldr	r3, [pc, #468]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x312>
 8001d24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a66      	ldr	r2, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x356>
 8001d5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a60      	ldr	r2, [pc, #384]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b58      	ldr	r3, [pc, #352]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a57      	ldr	r2, [pc, #348]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff faf5 	bl	8001384 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff faf1 	bl	8001384 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0b1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x37e>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fadf 	bl	8001384 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fadb 	bl	8001384 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e09b      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8087 	beq.w	8001f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d061      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d146      	bne.n	8001eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff faaf 	bl	8001384 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff faab 	bl	8001384 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e06d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4921      	ldr	r1, [pc, #132]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	430b      	orrs	r3, r1
 8001e76:	491b      	ldr	r1, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa7f 	bl	8001384 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fa7b 	bl	8001384 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46a>
 8001ea8:	e035      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fa68 	bl	8001384 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff fa64 	bl	8001384 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e026      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x498>
 8001ed6:	e01e      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e019      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_RCC_OscConfig+0x500>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d0      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b67      	ldr	r3, [pc, #412]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4965      	ldr	r1, [pc, #404]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d040      	beq.n	8002044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e073      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b39      	ldr	r3, [pc, #228]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4936      	ldr	r1, [pc, #216]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002014:	f7ff f9b6 	bl	8001384 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7ff f9b2 	bl	8001384 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e053      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d210      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4922      	ldr	r1, [pc, #136]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	@ (80020ec <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1cc>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_ClockConfig+0x1d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f914 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08006918 	.word	0x08006918
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCC_GetSysClockFreq+0x94>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x30>
 8002122:	2b08      	cmp	r3, #8
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x36>
 8002126:	e027      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800212a:	613b      	str	r3, [r7, #16]
      break;
 800212c:	e027      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0c9b      	lsrs	r3, r3, #18
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_GetSysClockFreq+0x94>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0c5b      	lsrs	r3, r3, #17
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e004      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <HAL_RCC_GetSysClockFreq+0xa4>)
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	693b      	ldr	r3, [r7, #16]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	08006930 	.word	0x08006930
 8002198:	08006940 	.word	0x08006940
 800219c:	003d0900 	.word	0x003d0900

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b02      	ldr	r3, [pc, #8]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff2 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08006928 	.word	0x08006928

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08006928 	.word	0x08006928

08002204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <RCC_Delay+0x34>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <RCC_Delay+0x38>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a5b      	lsrs	r3, r3, #9
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002220:	bf00      	nop
  }
  while (Delay --);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <RCC_Delay+0x1c>
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000000 	.word	0x20000000
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e041      	b.n	80022d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fe70 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 fab2 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e041      	b.n	8002374 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f839 	bl	800237c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f000 fa63 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
	...

08002390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_TIM_PWM_Start+0x24>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e022      	b.n	80023fa <HAL_TIM_PWM_Start+0x6a>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d109      	bne.n	80023ce <HAL_TIM_PWM_Start+0x3e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e015      	b.n	80023fa <HAL_TIM_PWM_Start+0x6a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d109      	bne.n	80023e8 <HAL_TIM_PWM_Start+0x58>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e008      	b.n	80023fa <HAL_TIM_PWM_Start+0x6a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e05e      	b.n	80024c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d104      	bne.n	8002412 <HAL_TIM_PWM_Start+0x82>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002410:	e013      	b.n	800243a <HAL_TIM_PWM_Start+0xaa>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d104      	bne.n	8002422 <HAL_TIM_PWM_Start+0x92>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002420:	e00b      	b.n	800243a <HAL_TIM_PWM_Start+0xaa>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d104      	bne.n	8002432 <HAL_TIM_PWM_Start+0xa2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002430:	e003      	b.n	800243a <HAL_TIM_PWM_Start+0xaa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fc50 	bl	8002ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_TIM_PWM_Start+0x138>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d107      	bne.n	8002462 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_TIM_PWM_Start+0x138>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_TIM_PWM_Start+0xfa>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002474:	d009      	beq.n	800248a <HAL_TIM_PWM_Start+0xfa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a14      	ldr	r2, [pc, #80]	@ (80024cc <HAL_TIM_PWM_Start+0x13c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_TIM_PWM_Start+0xfa>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <HAL_TIM_PWM_Start+0x140>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d010      	beq.n	80024be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	e007      	b.n	80024be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800

080024d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0ae      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	f200 809f 	bhi.w	8002640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002502:	a201      	add	r2, pc, #4	@ (adr r2, 8002508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	0800253d 	.word	0x0800253d
 800250c:	08002641 	.word	0x08002641
 8002510:	08002641 	.word	0x08002641
 8002514:	08002641 	.word	0x08002641
 8002518:	0800257d 	.word	0x0800257d
 800251c:	08002641 	.word	0x08002641
 8002520:	08002641 	.word	0x08002641
 8002524:	08002641 	.word	0x08002641
 8002528:	080025bf 	.word	0x080025bf
 800252c:	08002641 	.word	0x08002641
 8002530:	08002641 	.word	0x08002641
 8002534:	08002641 	.word	0x08002641
 8002538:	080025ff 	.word	0x080025ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f9b2 	bl	80028ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0204 	bic.w	r2, r2, #4
 8002566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6999      	ldr	r1, [r3, #24]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	619a      	str	r2, [r3, #24]
      break;
 800257a:	e064      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f9f8 	bl	8002978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6999      	ldr	r1, [r3, #24]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	021a      	lsls	r2, r3, #8
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	619a      	str	r2, [r3, #24]
      break;
 80025bc:	e043      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fa41 	bl	8002a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0208 	orr.w	r2, r2, #8
 80025d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0204 	bic.w	r2, r2, #4
 80025e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	61da      	str	r2, [r3, #28]
      break;
 80025fc:	e023      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa8b 	bl	8002b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	61da      	str	r2, [r3, #28]
      break;
 800263e:	e002      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
      break;
 8002644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIM_ConfigClockSource+0x1c>
 8002670:	2302      	movs	r3, #2
 8002672:	e0b4      	b.n	80027de <HAL_TIM_ConfigClockSource+0x186>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800269a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ac:	d03e      	beq.n	800272c <HAL_TIM_ConfigClockSource+0xd4>
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b2:	f200 8087 	bhi.w	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ba:	f000 8086 	beq.w	80027ca <HAL_TIM_ConfigClockSource+0x172>
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c2:	d87f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b70      	cmp	r3, #112	@ 0x70
 80026c6:	d01a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xa6>
 80026c8:	2b70      	cmp	r3, #112	@ 0x70
 80026ca:	d87b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b60      	cmp	r3, #96	@ 0x60
 80026ce:	d050      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x11a>
 80026d0:	2b60      	cmp	r3, #96	@ 0x60
 80026d2:	d877      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d4:	2b50      	cmp	r3, #80	@ 0x50
 80026d6:	d03c      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xfa>
 80026d8:	2b50      	cmp	r3, #80	@ 0x50
 80026da:	d873      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d058      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x13a>
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d86f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b30      	cmp	r3, #48	@ 0x30
 80026e6:	d064      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026e8:	2b30      	cmp	r3, #48	@ 0x30
 80026ea:	d86b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d060      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d867      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d05a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026fc:	e062      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800270e:	f000 facc 	bl	8002caa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	609a      	str	r2, [r3, #8]
      break;
 800272a:	e04f      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800273c:	f000 fab5 	bl	8002caa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800274e:	609a      	str	r2, [r3, #8]
      break;
 8002750:	e03c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	461a      	mov	r2, r3
 8002760:	f000 fa2c 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2150      	movs	r1, #80	@ 0x50
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa83 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002770:	e02c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800277e:	461a      	mov	r2, r3
 8002780:	f000 fa4a 	bl	8002c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2160      	movs	r1, #96	@ 0x60
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fa73 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002790:	e01c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fa0c 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2140      	movs	r1, #64	@ 0x40
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fa63 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e00c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 fa5a 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 80027c2:	e003      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a29      	ldr	r2, [pc, #164]	@ (80028a0 <TIM_Base_SetConfig+0xb8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a26      	ldr	r2, [pc, #152]	@ (80028a4 <TIM_Base_SetConfig+0xbc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a25      	ldr	r2, [pc, #148]	@ (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <TIM_Base_SetConfig+0xb8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <TIM_Base_SetConfig+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <TIM_Base_SetConfig+0xb8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	615a      	str	r2, [r3, #20]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800

080028ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 0201 	bic.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 0302 	bic.w	r3, r3, #2
 80028f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <TIM_OC1_SetConfig+0xc8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10c      	bne.n	8002922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0308 	bic.w	r3, r3, #8
 800290e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <TIM_OC1_SetConfig+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40012c00 	.word	0x40012c00

08002978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f023 0210 	bic.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0320 	bic.w	r3, r3, #32
 80029c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <TIM_OC2_SetConfig+0xd0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10d      	bne.n	80029f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <TIM_OC2_SetConfig+0xd0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d113      	bne.n	8002a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00

08002a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <TIM_OC3_SetConfig+0xd0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <TIM_OC3_SetConfig+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00

08002b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <TIM_OC4_SetConfig+0x98>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d109      	bne.n	8002b94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 030a 	bic.w	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0210 	bic.w	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e046      	b.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d94:	d009      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a10      	ldr	r2, [pc, #64]	@ (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f8e6 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fdc5 	bl	80039c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d16d      	bne.n	8002f88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x2c>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e066      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	@ 0x21
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fe fa5b 	bl	8001384 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f00:	e02a      	b.n	8002f58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fb14 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e036      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3302      	adds	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e007      	b.n	8002f4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cf      	bne.n	8002f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fae4 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e006      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d112      	bne.n	8002fd2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_UART_Receive_IT+0x26>
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e00b      	b.n	8002fd4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fb24 	bl	8003616 <UART_Start_Receive_IT>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	e000      	b.n	8002fd4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0ba      	sub	sp, #232	@ 0xe8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800301a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_UART_IRQHandler+0x66>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fc01 	bl	8003842 <UART_Receive_IT>
      return;
 8003040:	e25b      	b.n	80034fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80de 	beq.w	8003208 <HAL_UART_IRQHandler+0x22c>
 800304c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80d1 	beq.w	8003208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_UART_IRQHandler+0xae>
 8003072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0xd2>
 8003096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_UART_IRQHandler+0xf6>
 80030ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d011      	beq.n	8003102 <HAL_UART_IRQHandler+0x126>
 80030de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 81f2 	beq.w	80034f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_UART_IRQHandler+0x14e>
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fb8c 	bl	8003842 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_UART_IRQHandler+0x17a>
 800314e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d04f      	beq.n	80031f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa96 	bl	8003688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d041      	beq.n	80031ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3314      	adds	r3, #20
 8003170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800319a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1d9      	bne.n	800316a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d013      	beq.n	80031e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	4a7e      	ldr	r2, [pc, #504]	@ (80033bc <HAL_UART_IRQHandler+0x3e0>)
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fa2c 	bl	8001628 <HAL_DMA_Abort_IT>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031e0:	4610      	mov	r0, r2
 80031e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	e00e      	b.n	8003204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f993 	bl	8003512 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	e00a      	b.n	8003204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f98f 	bl	8003512 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	e006      	b.n	8003204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f98b 	bl	8003512 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003202:	e175      	b.n	80034f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	bf00      	nop
    return;
 8003206:	e173      	b.n	80034f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 814f 	bne.w	80034b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8148 	beq.w	80034b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8141 	beq.w	80034b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80b6 	beq.w	80033c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8145 	beq.w	80034f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800326e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003272:	429a      	cmp	r2, r3
 8003274:	f080 813e 	bcs.w	80034f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800327e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b20      	cmp	r3, #32
 8003288:	f000 8088 	beq.w	800339c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1d9      	bne.n	800328c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003300:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003304:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800330e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e1      	bne.n	80032d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800332a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003338:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800333a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800333e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e3      	bne.n	8003314 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800336a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800336c:	f023 0310 	bic.w	r3, r3, #16
 8003370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800337e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003380:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800338c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe f90b 	bl	80015b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8b6 	bl	8003524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033b8:	e09c      	b.n	80034f4 <HAL_UART_IRQHandler+0x518>
 80033ba:	bf00      	nop
 80033bc:	0800374d 	.word	0x0800374d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 808e 	beq.w	80034f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8089 	beq.w	80034f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800340a:	647a      	str	r2, [r7, #68]	@ 0x44
 800340c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e3      	bne.n	80033e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	623b      	str	r3, [r7, #32]
   return(result);
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003442:	633a      	str	r2, [r7, #48]	@ 0x30
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	60fb      	str	r3, [r7, #12]
   return(result);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	617b      	str	r3, [r7, #20]
   return(result);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f83b 	bl	8003524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ae:	e023      	b.n	80034f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_UART_IRQHandler+0x4f4>
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f953 	bl	8003774 <UART_Transmit_IT>
    return;
 80034ce:	e014      	b.n	80034fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <HAL_UART_IRQHandler+0x51e>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f992 	bl	8003812 <UART_EndTransmit_IT>
    return;
 80034ee:	e004      	b.n	80034fa <HAL_UART_IRQHandler+0x51e>
    return;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <HAL_UART_IRQHandler+0x51e>
      return;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_UART_IRQHandler+0x51e>
      return;
 80034f8:	bf00      	nop
  }
}
 80034fa:	37e8      	adds	r7, #232	@ 0xe8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b090      	sub	sp, #64	@ 0x40
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354a:	e050      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d04c      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x30>
 800355a:	f7fd ff13 	bl	8001384 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003566:	429a      	cmp	r2, r3
 8003568:	d241      	bcs.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800358a:	637a      	str	r2, [r7, #52]	@ 0x34
 800358c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	613b      	str	r3, [r7, #16]
   return(result);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035be:	623a      	str	r2, [r7, #32]
 80035c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e5      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d09f      	beq.n	800354c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3740      	adds	r7, #64	@ 0x40
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2222      	movs	r2, #34	@ 0x22
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800365a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0220 	orr.w	r2, r2, #32
 800367a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b095      	sub	sp, #84	@ 0x54
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3314      	adds	r3, #20
 80036ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3314      	adds	r3, #20
 80036e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d119      	bne.n	8003734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 0310 	bic.w	r3, r3, #16
 8003716:	647b      	str	r3, [r7, #68]	@ 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003720:	61ba      	str	r2, [r7, #24]
 8003722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	613b      	str	r3, [r7, #16]
   return(result);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003742:	bf00      	nop
 8003744:	3754      	adds	r7, #84	@ 0x54
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff fed3 	bl	8003512 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b21      	cmp	r3, #33	@ 0x21
 8003786:	d13e      	bne.n	8003806 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003790:	d114      	bne.n	80037bc <UART_Transmit_IT+0x48>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d110      	bne.n	80037bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]
 80037ba:	e008      	b.n	80037ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	1c59      	adds	r1, r3, #1
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6211      	str	r1, [r2, #32]
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4619      	mov	r1, r3
 80037dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003800:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003828:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fe64 	bl	8003500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b08c      	sub	sp, #48	@ 0x30
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b22      	cmp	r3, #34	@ 0x22
 8003854:	f040 80ae 	bne.w	80039b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003860:	d117      	bne.n	8003892 <UART_Receive_IT+0x50>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d113      	bne.n	8003892 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003880:	b29a      	uxth	r2, r3
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	1c9a      	adds	r2, r3, #2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003890:	e026      	b.n	80038e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a4:	d007      	beq.n	80038b6 <UART_Receive_IT+0x74>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <UART_Receive_IT+0x82>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e008      	b.n	80038d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4619      	mov	r1, r3
 80038ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d15d      	bne.n	80039b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0220 	bic.w	r2, r2, #32
 8003902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	2b01      	cmp	r3, #1
 8003938:	d135      	bne.n	80039a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	613b      	str	r3, [r7, #16]
   return(result);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 0310 	bic.w	r3, r3, #16
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	623a      	str	r2, [r7, #32]
 8003962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	69f9      	ldr	r1, [r7, #28]
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	61bb      	str	r3, [r7, #24]
   return(result);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b10      	cmp	r3, #16
 8003980:	d10a      	bne.n	8003998 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fdc0 	bl	8003524 <HAL_UARTEx_RxEventCallback>
 80039a4:	e002      	b.n	80039ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f99c 	bl	8000ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e002      	b.n	80039b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3730      	adds	r7, #48	@ 0x30
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039fa:	f023 030c 	bic.w	r3, r3, #12
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad4 <UART_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7fe fbd8 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	e002      	b.n	8003a36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe fbc0 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003a34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <UART_SetConfig+0x118>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	0119      	lsls	r1, r3, #4
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009a      	lsls	r2, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad8 <UART_SetConfig+0x118>)
 8003a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2064      	movs	r0, #100	@ 0x64
 8003a76:	fb00 f303 	mul.w	r3, r0, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	3332      	adds	r3, #50	@ 0x32
 8003a80:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <UART_SetConfig+0x118>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a8c:	4419      	add	r1, r3
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009a      	lsls	r2, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <UART_SetConfig+0x118>)
 8003aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2064      	movs	r0, #100	@ 0x64
 8003aae:	fb00 f303 	mul.w	r3, r0, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	3332      	adds	r3, #50	@ 0x32
 8003ab8:	4a07      	ldr	r2, [pc, #28]	@ (8003ad8 <UART_SetConfig+0x118>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	440a      	add	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	51eb851f 	.word	0x51eb851f

08003adc <atoi>:
 8003adc:	220a      	movs	r2, #10
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f000 b87a 	b.w	8003bd8 <strtol>

08003ae4 <_strtol_l.constprop.0>:
 8003ae4:	2b24      	cmp	r3, #36	@ 0x24
 8003ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aea:	4686      	mov	lr, r0
 8003aec:	4690      	mov	r8, r2
 8003aee:	d801      	bhi.n	8003af4 <_strtol_l.constprop.0+0x10>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d106      	bne.n	8003b02 <_strtol_l.constprop.0+0x1e>
 8003af4:	f000 fe4e 	bl	8004794 <__errno>
 8003af8:	2316      	movs	r3, #22
 8003afa:	6003      	str	r3, [r0, #0]
 8003afc:	2000      	movs	r0, #0
 8003afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b02:	460d      	mov	r5, r1
 8003b04:	4833      	ldr	r0, [pc, #204]	@ (8003bd4 <_strtol_l.constprop.0+0xf0>)
 8003b06:	462a      	mov	r2, r5
 8003b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b0c:	5d06      	ldrb	r6, [r0, r4]
 8003b0e:	f016 0608 	ands.w	r6, r6, #8
 8003b12:	d1f8      	bne.n	8003b06 <_strtol_l.constprop.0+0x22>
 8003b14:	2c2d      	cmp	r4, #45	@ 0x2d
 8003b16:	d12d      	bne.n	8003b74 <_strtol_l.constprop.0+0x90>
 8003b18:	2601      	movs	r6, #1
 8003b1a:	782c      	ldrb	r4, [r5, #0]
 8003b1c:	1c95      	adds	r5, r2, #2
 8003b1e:	f033 0210 	bics.w	r2, r3, #16
 8003b22:	d109      	bne.n	8003b38 <_strtol_l.constprop.0+0x54>
 8003b24:	2c30      	cmp	r4, #48	@ 0x30
 8003b26:	d12a      	bne.n	8003b7e <_strtol_l.constprop.0+0x9a>
 8003b28:	782a      	ldrb	r2, [r5, #0]
 8003b2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003b2e:	2a58      	cmp	r2, #88	@ 0x58
 8003b30:	d125      	bne.n	8003b7e <_strtol_l.constprop.0+0x9a>
 8003b32:	2310      	movs	r3, #16
 8003b34:	786c      	ldrb	r4, [r5, #1]
 8003b36:	3502      	adds	r5, #2
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003b3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003b42:	fbbc f9f3 	udiv	r9, ip, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	fb03 ca19 	mls	sl, r3, r9, ip
 8003b4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003b50:	2f09      	cmp	r7, #9
 8003b52:	d81b      	bhi.n	8003b8c <_strtol_l.constprop.0+0xa8>
 8003b54:	463c      	mov	r4, r7
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	dd27      	ble.n	8003baa <_strtol_l.constprop.0+0xc6>
 8003b5a:	1c57      	adds	r7, r2, #1
 8003b5c:	d007      	beq.n	8003b6e <_strtol_l.constprop.0+0x8a>
 8003b5e:	4581      	cmp	r9, r0
 8003b60:	d320      	bcc.n	8003ba4 <_strtol_l.constprop.0+0xc0>
 8003b62:	d101      	bne.n	8003b68 <_strtol_l.constprop.0+0x84>
 8003b64:	45a2      	cmp	sl, r4
 8003b66:	db1d      	blt.n	8003ba4 <_strtol_l.constprop.0+0xc0>
 8003b68:	2201      	movs	r2, #1
 8003b6a:	fb00 4003 	mla	r0, r0, r3, r4
 8003b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b72:	e7eb      	b.n	8003b4c <_strtol_l.constprop.0+0x68>
 8003b74:	2c2b      	cmp	r4, #43	@ 0x2b
 8003b76:	bf04      	itt	eq
 8003b78:	782c      	ldrbeq	r4, [r5, #0]
 8003b7a:	1c95      	addeq	r5, r2, #2
 8003b7c:	e7cf      	b.n	8003b1e <_strtol_l.constprop.0+0x3a>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1da      	bne.n	8003b38 <_strtol_l.constprop.0+0x54>
 8003b82:	2c30      	cmp	r4, #48	@ 0x30
 8003b84:	bf0c      	ite	eq
 8003b86:	2308      	moveq	r3, #8
 8003b88:	230a      	movne	r3, #10
 8003b8a:	e7d5      	b.n	8003b38 <_strtol_l.constprop.0+0x54>
 8003b8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003b90:	2f19      	cmp	r7, #25
 8003b92:	d801      	bhi.n	8003b98 <_strtol_l.constprop.0+0xb4>
 8003b94:	3c37      	subs	r4, #55	@ 0x37
 8003b96:	e7de      	b.n	8003b56 <_strtol_l.constprop.0+0x72>
 8003b98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003b9c:	2f19      	cmp	r7, #25
 8003b9e:	d804      	bhi.n	8003baa <_strtol_l.constprop.0+0xc6>
 8003ba0:	3c57      	subs	r4, #87	@ 0x57
 8003ba2:	e7d8      	b.n	8003b56 <_strtol_l.constprop.0+0x72>
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	e7e1      	b.n	8003b6e <_strtol_l.constprop.0+0x8a>
 8003baa:	1c53      	adds	r3, r2, #1
 8003bac:	d108      	bne.n	8003bc0 <_strtol_l.constprop.0+0xdc>
 8003bae:	2322      	movs	r3, #34	@ 0x22
 8003bb0:	4660      	mov	r0, ip
 8003bb2:	f8ce 3000 	str.w	r3, [lr]
 8003bb6:	f1b8 0f00 	cmp.w	r8, #0
 8003bba:	d0a0      	beq.n	8003afe <_strtol_l.constprop.0+0x1a>
 8003bbc:	1e69      	subs	r1, r5, #1
 8003bbe:	e006      	b.n	8003bce <_strtol_l.constprop.0+0xea>
 8003bc0:	b106      	cbz	r6, 8003bc4 <_strtol_l.constprop.0+0xe0>
 8003bc2:	4240      	negs	r0, r0
 8003bc4:	f1b8 0f00 	cmp.w	r8, #0
 8003bc8:	d099      	beq.n	8003afe <_strtol_l.constprop.0+0x1a>
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d1f6      	bne.n	8003bbc <_strtol_l.constprop.0+0xd8>
 8003bce:	f8c8 1000 	str.w	r1, [r8]
 8003bd2:	e794      	b.n	8003afe <_strtol_l.constprop.0+0x1a>
 8003bd4:	08006943 	.word	0x08006943

08003bd8 <strtol>:
 8003bd8:	4613      	mov	r3, r2
 8003bda:	460a      	mov	r2, r1
 8003bdc:	4601      	mov	r1, r0
 8003bde:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <strtol+0x10>)
 8003be0:	6800      	ldr	r0, [r0, #0]
 8003be2:	f7ff bf7f 	b.w	8003ae4 <_strtol_l.constprop.0>
 8003be6:	bf00      	nop
 8003be8:	20000018 	.word	0x20000018

08003bec <__cvt>:
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	bfbb      	ittet	lt
 8003bf6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003bfa:	461d      	movlt	r5, r3
 8003bfc:	2300      	movge	r3, #0
 8003bfe:	232d      	movlt	r3, #45	@ 0x2d
 8003c00:	b088      	sub	sp, #32
 8003c02:	4614      	mov	r4, r2
 8003c04:	bfb8      	it	lt
 8003c06:	4614      	movlt	r4, r2
 8003c08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c0a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003c0c:	7013      	strb	r3, [r2, #0]
 8003c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c10:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003c14:	f023 0820 	bic.w	r8, r3, #32
 8003c18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c1c:	d005      	beq.n	8003c2a <__cvt+0x3e>
 8003c1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c22:	d100      	bne.n	8003c26 <__cvt+0x3a>
 8003c24:	3601      	adds	r6, #1
 8003c26:	2302      	movs	r3, #2
 8003c28:	e000      	b.n	8003c2c <__cvt+0x40>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	aa07      	add	r2, sp, #28
 8003c2e:	9204      	str	r2, [sp, #16]
 8003c30:	aa06      	add	r2, sp, #24
 8003c32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c36:	e9cd 3600 	strd	r3, r6, [sp]
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f000 fe7b 	bl	8004938 <_dtoa_r>
 8003c42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c46:	4607      	mov	r7, r0
 8003c48:	d119      	bne.n	8003c7e <__cvt+0x92>
 8003c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003c4c:	07db      	lsls	r3, r3, #31
 8003c4e:	d50e      	bpl.n	8003c6e <__cvt+0x82>
 8003c50:	eb00 0906 	add.w	r9, r0, r6
 8003c54:	2200      	movs	r2, #0
 8003c56:	2300      	movs	r3, #0
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7fc fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8003c60:	b108      	cbz	r0, 8003c66 <__cvt+0x7a>
 8003c62:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c66:	2230      	movs	r2, #48	@ 0x30
 8003c68:	9b07      	ldr	r3, [sp, #28]
 8003c6a:	454b      	cmp	r3, r9
 8003c6c:	d31e      	bcc.n	8003cac <__cvt+0xc0>
 8003c6e:	4638      	mov	r0, r7
 8003c70:	9b07      	ldr	r3, [sp, #28]
 8003c72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c74:	1bdb      	subs	r3, r3, r7
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	b008      	add	sp, #32
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c82:	eb00 0906 	add.w	r9, r0, r6
 8003c86:	d1e5      	bne.n	8003c54 <__cvt+0x68>
 8003c88:	7803      	ldrb	r3, [r0, #0]
 8003c8a:	2b30      	cmp	r3, #48	@ 0x30
 8003c8c:	d10a      	bne.n	8003ca4 <__cvt+0xb8>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2300      	movs	r3, #0
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f7fc fe87 	bl	80009a8 <__aeabi_dcmpeq>
 8003c9a:	b918      	cbnz	r0, 8003ca4 <__cvt+0xb8>
 8003c9c:	f1c6 0601 	rsb	r6, r6, #1
 8003ca0:	f8ca 6000 	str.w	r6, [sl]
 8003ca4:	f8da 3000 	ldr.w	r3, [sl]
 8003ca8:	4499      	add	r9, r3
 8003caa:	e7d3      	b.n	8003c54 <__cvt+0x68>
 8003cac:	1c59      	adds	r1, r3, #1
 8003cae:	9107      	str	r1, [sp, #28]
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e7d9      	b.n	8003c68 <__cvt+0x7c>

08003cb4 <__exponent>:
 8003cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	bfb6      	itet	lt
 8003cba:	232d      	movlt	r3, #45	@ 0x2d
 8003cbc:	232b      	movge	r3, #43	@ 0x2b
 8003cbe:	4249      	neglt	r1, r1
 8003cc0:	2909      	cmp	r1, #9
 8003cc2:	7002      	strb	r2, [r0, #0]
 8003cc4:	7043      	strb	r3, [r0, #1]
 8003cc6:	dd29      	ble.n	8003d1c <__exponent+0x68>
 8003cc8:	f10d 0307 	add.w	r3, sp, #7
 8003ccc:	461d      	mov	r5, r3
 8003cce:	270a      	movs	r7, #10
 8003cd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	fb07 1416 	mls	r4, r7, r6, r1
 8003cda:	3430      	adds	r4, #48	@ 0x30
 8003cdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	2c63      	cmp	r4, #99	@ 0x63
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cea:	dcf1      	bgt.n	8003cd0 <__exponent+0x1c>
 8003cec:	3130      	adds	r1, #48	@ 0x30
 8003cee:	1e94      	subs	r4, r2, #2
 8003cf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	1c41      	adds	r1, r0, #1
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	d30a      	bcc.n	8003d12 <__exponent+0x5e>
 8003cfc:	f10d 0309 	add.w	r3, sp, #9
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	42ac      	cmp	r4, r5
 8003d04:	bf88      	it	hi
 8003d06:	2300      	movhi	r3, #0
 8003d08:	3302      	adds	r3, #2
 8003d0a:	4403      	add	r3, r0
 8003d0c:	1a18      	subs	r0, r3, r0
 8003d0e:	b003      	add	sp, #12
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d1a:	e7ed      	b.n	8003cf8 <__exponent+0x44>
 8003d1c:	2330      	movs	r3, #48	@ 0x30
 8003d1e:	3130      	adds	r1, #48	@ 0x30
 8003d20:	7083      	strb	r3, [r0, #2]
 8003d22:	70c1      	strb	r1, [r0, #3]
 8003d24:	1d03      	adds	r3, r0, #4
 8003d26:	e7f1      	b.n	8003d0c <__exponent+0x58>

08003d28 <_printf_float>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	b091      	sub	sp, #68	@ 0x44
 8003d2e:	460c      	mov	r4, r1
 8003d30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003d34:	4616      	mov	r6, r2
 8003d36:	461f      	mov	r7, r3
 8003d38:	4605      	mov	r5, r0
 8003d3a:	f000 fce1 	bl	8004700 <_localeconv_r>
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	9308      	str	r3, [sp, #32]
 8003d44:	f7fc fa04 	bl	8000150 <strlen>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d50:	9009      	str	r0, [sp, #36]	@ 0x24
 8003d52:	3307      	adds	r3, #7
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	f103 0208 	add.w	r2, r3, #8
 8003d5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d60:	f8d4 b000 	ldr.w	fp, [r4]
 8003d64:	f8c8 2000 	str.w	r2, [r8]
 8003d68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d82:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff4 <_printf_float+0x2cc>)
 8003d84:	f7fc fe42 	bl	8000a0c <__aeabi_dcmpun>
 8003d88:	bb70      	cbnz	r0, 8003de8 <_printf_float+0xc0>
 8003d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d92:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <_printf_float+0x2cc>)
 8003d94:	f7fc fe1c 	bl	80009d0 <__aeabi_dcmple>
 8003d98:	bb30      	cbnz	r0, 8003de8 <_printf_float+0xc0>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4640      	mov	r0, r8
 8003da0:	4649      	mov	r1, r9
 8003da2:	f7fc fe0b 	bl	80009bc <__aeabi_dcmplt>
 8003da6:	b110      	cbz	r0, 8003dae <_printf_float+0x86>
 8003da8:	232d      	movs	r3, #45	@ 0x2d
 8003daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dae:	4a92      	ldr	r2, [pc, #584]	@ (8003ff8 <_printf_float+0x2d0>)
 8003db0:	4b92      	ldr	r3, [pc, #584]	@ (8003ffc <_printf_float+0x2d4>)
 8003db2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003db6:	bf94      	ite	ls
 8003db8:	4690      	movls	r8, r2
 8003dba:	4698      	movhi	r8, r3
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f04f 0900 	mov.w	r9, #0
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	f02b 0304 	bic.w	r3, fp, #4
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	4633      	mov	r3, r6
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	9700      	str	r7, [sp, #0]
 8003dd2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003dd4:	f000 f9d4 	bl	8004180 <_printf_common>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	f040 8090 	bne.w	8003efe <_printf_float+0x1d6>
 8003dde:	f04f 30ff 	mov.w	r0, #4294967295
 8003de2:	b011      	add	sp, #68	@ 0x44
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	4640      	mov	r0, r8
 8003dee:	4649      	mov	r1, r9
 8003df0:	f7fc fe0c 	bl	8000a0c <__aeabi_dcmpun>
 8003df4:	b148      	cbz	r0, 8003e0a <_printf_float+0xe2>
 8003df6:	464b      	mov	r3, r9
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bfb8      	it	lt
 8003dfc:	232d      	movlt	r3, #45	@ 0x2d
 8003dfe:	4a80      	ldr	r2, [pc, #512]	@ (8004000 <_printf_float+0x2d8>)
 8003e00:	bfb8      	it	lt
 8003e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e06:	4b7f      	ldr	r3, [pc, #508]	@ (8004004 <_printf_float+0x2dc>)
 8003e08:	e7d3      	b.n	8003db2 <_printf_float+0x8a>
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	d13f      	bne.n	8003e94 <_printf_float+0x16c>
 8003e14:	2306      	movs	r3, #6
 8003e16:	6063      	str	r3, [r4, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003e1e:	6023      	str	r3, [r4, #0]
 8003e20:	9206      	str	r2, [sp, #24]
 8003e22:	aa0e      	add	r2, sp, #56	@ 0x38
 8003e24:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003e28:	aa0d      	add	r2, sp, #52	@ 0x34
 8003e2a:	9203      	str	r2, [sp, #12]
 8003e2c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003e30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	4642      	mov	r2, r8
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e40:	f7ff fed4 	bl	8003bec <__cvt>
 8003e44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e46:	4680      	mov	r8, r0
 8003e48:	2947      	cmp	r1, #71	@ 0x47
 8003e4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e4c:	d128      	bne.n	8003ea0 <_printf_float+0x178>
 8003e4e:	1cc8      	adds	r0, r1, #3
 8003e50:	db02      	blt.n	8003e58 <_printf_float+0x130>
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	4299      	cmp	r1, r3
 8003e56:	dd40      	ble.n	8003eda <_printf_float+0x1b2>
 8003e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8003e60:	4652      	mov	r2, sl
 8003e62:	3901      	subs	r1, #1
 8003e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e68:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e6a:	f7ff ff23 	bl	8003cb4 <__exponent>
 8003e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e70:	4681      	mov	r9, r0
 8003e72:	1813      	adds	r3, r2, r0
 8003e74:	2a01      	cmp	r2, #1
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	dc02      	bgt.n	8003e80 <_printf_float+0x158>
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	07d2      	lsls	r2, r2, #31
 8003e7e:	d501      	bpl.n	8003e84 <_printf_float+0x15c>
 8003e80:	3301      	adds	r3, #1
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d09e      	beq.n	8003dca <_printf_float+0xa2>
 8003e8c:	232d      	movs	r3, #45	@ 0x2d
 8003e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e92:	e79a      	b.n	8003dca <_printf_float+0xa2>
 8003e94:	2947      	cmp	r1, #71	@ 0x47
 8003e96:	d1bf      	bne.n	8003e18 <_printf_float+0xf0>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1bd      	bne.n	8003e18 <_printf_float+0xf0>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e7ba      	b.n	8003e16 <_printf_float+0xee>
 8003ea0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ea4:	d9dc      	bls.n	8003e60 <_printf_float+0x138>
 8003ea6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003eaa:	d118      	bne.n	8003ede <_printf_float+0x1b6>
 8003eac:	2900      	cmp	r1, #0
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	dd0b      	ble.n	8003eca <_printf_float+0x1a2>
 8003eb2:	6121      	str	r1, [r4, #16]
 8003eb4:	b913      	cbnz	r3, 8003ebc <_printf_float+0x194>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	07d0      	lsls	r0, r2, #31
 8003eba:	d502      	bpl.n	8003ec2 <_printf_float+0x19a>
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	440b      	add	r3, r1
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	f04f 0900 	mov.w	r9, #0
 8003ec6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ec8:	e7dc      	b.n	8003e84 <_printf_float+0x15c>
 8003eca:	b913      	cbnz	r3, 8003ed2 <_printf_float+0x1aa>
 8003ecc:	6822      	ldr	r2, [r4, #0]
 8003ece:	07d2      	lsls	r2, r2, #31
 8003ed0:	d501      	bpl.n	8003ed6 <_printf_float+0x1ae>
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	e7f4      	b.n	8003ec0 <_printf_float+0x198>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e7f2      	b.n	8003ec0 <_printf_float+0x198>
 8003eda:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	db05      	blt.n	8003ef0 <_printf_float+0x1c8>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	6121      	str	r1, [r4, #16]
 8003ee8:	07d8      	lsls	r0, r3, #31
 8003eea:	d5ea      	bpl.n	8003ec2 <_printf_float+0x19a>
 8003eec:	1c4b      	adds	r3, r1, #1
 8003eee:	e7e7      	b.n	8003ec0 <_printf_float+0x198>
 8003ef0:	2900      	cmp	r1, #0
 8003ef2:	bfcc      	ite	gt
 8003ef4:	2201      	movgt	r2, #1
 8003ef6:	f1c1 0202 	rsble	r2, r1, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	e7e0      	b.n	8003ec0 <_printf_float+0x198>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	055a      	lsls	r2, r3, #21
 8003f02:	d407      	bmi.n	8003f14 <_printf_float+0x1ec>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	4642      	mov	r2, r8
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	47b8      	blx	r7
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d12b      	bne.n	8003f6a <_printf_float+0x242>
 8003f12:	e764      	b.n	8003dde <_printf_float+0xb6>
 8003f14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f18:	f240 80dc 	bls.w	80040d4 <_printf_float+0x3ac>
 8003f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	f7fc fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d033      	beq.n	8003f94 <_printf_float+0x26c>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4628      	mov	r0, r5
 8003f32:	4a35      	ldr	r2, [pc, #212]	@ (8004008 <_printf_float+0x2e0>)
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	f43f af51 	beq.w	8003dde <_printf_float+0xb6>
 8003f3c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003f40:	4543      	cmp	r3, r8
 8003f42:	db02      	blt.n	8003f4a <_printf_float+0x222>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07d8      	lsls	r0, r3, #31
 8003f48:	d50f      	bpl.n	8003f6a <_printf_float+0x242>
 8003f4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	f43f af42 	beq.w	8003dde <_printf_float+0xb6>
 8003f5a:	f04f 0900 	mov.w	r9, #0
 8003f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f62:	f104 0a1a 	add.w	sl, r4, #26
 8003f66:	45c8      	cmp	r8, r9
 8003f68:	dc09      	bgt.n	8003f7e <_printf_float+0x256>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	079b      	lsls	r3, r3, #30
 8003f6e:	f100 8102 	bmi.w	8004176 <_printf_float+0x44e>
 8003f72:	68e0      	ldr	r0, [r4, #12]
 8003f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f76:	4298      	cmp	r0, r3
 8003f78:	bfb8      	it	lt
 8003f7a:	4618      	movlt	r0, r3
 8003f7c:	e731      	b.n	8003de2 <_printf_float+0xba>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f af28 	beq.w	8003dde <_printf_float+0xb6>
 8003f8e:	f109 0901 	add.w	r9, r9, #1
 8003f92:	e7e8      	b.n	8003f66 <_printf_float+0x23e>
 8003f94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dc38      	bgt.n	800400c <_printf_float+0x2e4>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <_printf_float+0x2e0>)
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f af1a 	beq.w	8003dde <_printf_float+0xb6>
 8003faa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003fae:	ea59 0303 	orrs.w	r3, r9, r3
 8003fb2:	d102      	bne.n	8003fba <_printf_float+0x292>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	07d9      	lsls	r1, r3, #31
 8003fb8:	d5d7      	bpl.n	8003f6a <_printf_float+0x242>
 8003fba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	47b8      	blx	r7
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f43f af0a 	beq.w	8003dde <_printf_float+0xb6>
 8003fca:	f04f 0a00 	mov.w	sl, #0
 8003fce:	f104 0b1a 	add.w	fp, r4, #26
 8003fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	4553      	cmp	r3, sl
 8003fd8:	dc01      	bgt.n	8003fde <_printf_float+0x2b6>
 8003fda:	464b      	mov	r3, r9
 8003fdc:	e793      	b.n	8003f06 <_printf_float+0x1de>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	465a      	mov	r2, fp
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f aef8 	beq.w	8003dde <_printf_float+0xb6>
 8003fee:	f10a 0a01 	add.w	sl, sl, #1
 8003ff2:	e7ee      	b.n	8003fd2 <_printf_float+0x2aa>
 8003ff4:	7fefffff 	.word	0x7fefffff
 8003ff8:	08006a43 	.word	0x08006a43
 8003ffc:	08006a47 	.word	0x08006a47
 8004000:	08006a4b 	.word	0x08006a4b
 8004004:	08006a4f 	.word	0x08006a4f
 8004008:	08006a53 	.word	0x08006a53
 800400c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800400e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004012:	4553      	cmp	r3, sl
 8004014:	bfa8      	it	ge
 8004016:	4653      	movge	r3, sl
 8004018:	2b00      	cmp	r3, #0
 800401a:	4699      	mov	r9, r3
 800401c:	dc36      	bgt.n	800408c <_printf_float+0x364>
 800401e:	f04f 0b00 	mov.w	fp, #0
 8004022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004026:	f104 021a 	add.w	r2, r4, #26
 800402a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800402c:	930a      	str	r3, [sp, #40]	@ 0x28
 800402e:	eba3 0309 	sub.w	r3, r3, r9
 8004032:	455b      	cmp	r3, fp
 8004034:	dc31      	bgt.n	800409a <_printf_float+0x372>
 8004036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004038:	459a      	cmp	sl, r3
 800403a:	dc3a      	bgt.n	80040b2 <_printf_float+0x38a>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	07da      	lsls	r2, r3, #31
 8004040:	d437      	bmi.n	80040b2 <_printf_float+0x38a>
 8004042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004044:	ebaa 0903 	sub.w	r9, sl, r3
 8004048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800404a:	ebaa 0303 	sub.w	r3, sl, r3
 800404e:	4599      	cmp	r9, r3
 8004050:	bfa8      	it	ge
 8004052:	4699      	movge	r9, r3
 8004054:	f1b9 0f00 	cmp.w	r9, #0
 8004058:	dc33      	bgt.n	80040c2 <_printf_float+0x39a>
 800405a:	f04f 0800 	mov.w	r8, #0
 800405e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004062:	f104 0b1a 	add.w	fp, r4, #26
 8004066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004068:	ebaa 0303 	sub.w	r3, sl, r3
 800406c:	eba3 0309 	sub.w	r3, r3, r9
 8004070:	4543      	cmp	r3, r8
 8004072:	f77f af7a 	ble.w	8003f6a <_printf_float+0x242>
 8004076:	2301      	movs	r3, #1
 8004078:	465a      	mov	r2, fp
 800407a:	4631      	mov	r1, r6
 800407c:	4628      	mov	r0, r5
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	f43f aeac 	beq.w	8003dde <_printf_float+0xb6>
 8004086:	f108 0801 	add.w	r8, r8, #1
 800408a:	e7ec      	b.n	8004066 <_printf_float+0x33e>
 800408c:	4642      	mov	r2, r8
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	d1c2      	bne.n	800401e <_printf_float+0x2f6>
 8004098:	e6a1      	b.n	8003dde <_printf_float+0xb6>
 800409a:	2301      	movs	r3, #1
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f ae9a 	beq.w	8003dde <_printf_float+0xb6>
 80040aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040ac:	f10b 0b01 	add.w	fp, fp, #1
 80040b0:	e7bb      	b.n	800402a <_printf_float+0x302>
 80040b2:	4631      	mov	r1, r6
 80040b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	d1c0      	bne.n	8004042 <_printf_float+0x31a>
 80040c0:	e68d      	b.n	8003dde <_printf_float+0xb6>
 80040c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040c4:	464b      	mov	r3, r9
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	4442      	add	r2, r8
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	d1c3      	bne.n	800405a <_printf_float+0x332>
 80040d2:	e684      	b.n	8003dde <_printf_float+0xb6>
 80040d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040d8:	f1ba 0f01 	cmp.w	sl, #1
 80040dc:	dc01      	bgt.n	80040e2 <_printf_float+0x3ba>
 80040de:	07db      	lsls	r3, r3, #31
 80040e0:	d536      	bpl.n	8004150 <_printf_float+0x428>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4642      	mov	r2, r8
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae76 	beq.w	8003dde <_printf_float+0xb6>
 80040f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b8      	blx	r7
 80040fc:	3001      	adds	r0, #1
 80040fe:	f43f ae6e 	beq.w	8003dde <_printf_float+0xb6>
 8004102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004106:	2200      	movs	r2, #0
 8004108:	2300      	movs	r3, #0
 800410a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800410e:	f7fc fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8004112:	b9c0      	cbnz	r0, 8004146 <_printf_float+0x41e>
 8004114:	4653      	mov	r3, sl
 8004116:	f108 0201 	add.w	r2, r8, #1
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	d10c      	bne.n	800413e <_printf_float+0x416>
 8004124:	e65b      	b.n	8003dde <_printf_float+0xb6>
 8004126:	2301      	movs	r3, #1
 8004128:	465a      	mov	r2, fp
 800412a:	4631      	mov	r1, r6
 800412c:	4628      	mov	r0, r5
 800412e:	47b8      	blx	r7
 8004130:	3001      	adds	r0, #1
 8004132:	f43f ae54 	beq.w	8003dde <_printf_float+0xb6>
 8004136:	f108 0801 	add.w	r8, r8, #1
 800413a:	45d0      	cmp	r8, sl
 800413c:	dbf3      	blt.n	8004126 <_printf_float+0x3fe>
 800413e:	464b      	mov	r3, r9
 8004140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004144:	e6e0      	b.n	8003f08 <_printf_float+0x1e0>
 8004146:	f04f 0800 	mov.w	r8, #0
 800414a:	f104 0b1a 	add.w	fp, r4, #26
 800414e:	e7f4      	b.n	800413a <_printf_float+0x412>
 8004150:	2301      	movs	r3, #1
 8004152:	4642      	mov	r2, r8
 8004154:	e7e1      	b.n	800411a <_printf_float+0x3f2>
 8004156:	2301      	movs	r3, #1
 8004158:	464a      	mov	r2, r9
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f ae3c 	beq.w	8003dde <_printf_float+0xb6>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800416e:	1a5b      	subs	r3, r3, r1
 8004170:	4543      	cmp	r3, r8
 8004172:	dcf0      	bgt.n	8004156 <_printf_float+0x42e>
 8004174:	e6fd      	b.n	8003f72 <_printf_float+0x24a>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	f104 0919 	add.w	r9, r4, #25
 800417e:	e7f4      	b.n	800416a <_printf_float+0x442>

08004180 <_printf_common>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	4616      	mov	r6, r2
 8004186:	4698      	mov	r8, r3
 8004188:	688a      	ldr	r2, [r1, #8]
 800418a:	690b      	ldr	r3, [r1, #16]
 800418c:	4607      	mov	r7, r0
 800418e:	4293      	cmp	r3, r2
 8004190:	bfb8      	it	lt
 8004192:	4613      	movlt	r3, r2
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800419a:	460c      	mov	r4, r1
 800419c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041a0:	b10a      	cbz	r2, 80041a6 <_printf_common+0x26>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6033      	str	r3, [r6, #0]
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	0699      	lsls	r1, r3, #26
 80041aa:	bf42      	ittt	mi
 80041ac:	6833      	ldrmi	r3, [r6, #0]
 80041ae:	3302      	addmi	r3, #2
 80041b0:	6033      	strmi	r3, [r6, #0]
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	f015 0506 	ands.w	r5, r5, #6
 80041b8:	d106      	bne.n	80041c8 <_printf_common+0x48>
 80041ba:	f104 0a19 	add.w	sl, r4, #25
 80041be:	68e3      	ldr	r3, [r4, #12]
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	42ab      	cmp	r3, r5
 80041c6:	dc2b      	bgt.n	8004220 <_printf_common+0xa0>
 80041c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	3b00      	subs	r3, #0
 80041d0:	bf18      	it	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	0692      	lsls	r2, r2, #26
 80041d6:	d430      	bmi.n	800423a <_printf_common+0xba>
 80041d8:	4641      	mov	r1, r8
 80041da:	4638      	mov	r0, r7
 80041dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041e0:	47c8      	blx	r9
 80041e2:	3001      	adds	r0, #1
 80041e4:	d023      	beq.n	800422e <_printf_common+0xae>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6922      	ldr	r2, [r4, #16]
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	bf14      	ite	ne
 80041f2:	2500      	movne	r5, #0
 80041f4:	6833      	ldreq	r3, [r6, #0]
 80041f6:	f04f 0600 	mov.w	r6, #0
 80041fa:	bf08      	it	eq
 80041fc:	68e5      	ldreq	r5, [r4, #12]
 80041fe:	f104 041a 	add.w	r4, r4, #26
 8004202:	bf08      	it	eq
 8004204:	1aed      	subeq	r5, r5, r3
 8004206:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800420a:	bf08      	it	eq
 800420c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004210:	4293      	cmp	r3, r2
 8004212:	bfc4      	itt	gt
 8004214:	1a9b      	subgt	r3, r3, r2
 8004216:	18ed      	addgt	r5, r5, r3
 8004218:	42b5      	cmp	r5, r6
 800421a:	d11a      	bne.n	8004252 <_printf_common+0xd2>
 800421c:	2000      	movs	r0, #0
 800421e:	e008      	b.n	8004232 <_printf_common+0xb2>
 8004220:	2301      	movs	r3, #1
 8004222:	4652      	mov	r2, sl
 8004224:	4641      	mov	r1, r8
 8004226:	4638      	mov	r0, r7
 8004228:	47c8      	blx	r9
 800422a:	3001      	adds	r0, #1
 800422c:	d103      	bne.n	8004236 <_printf_common+0xb6>
 800422e:	f04f 30ff 	mov.w	r0, #4294967295
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	3501      	adds	r5, #1
 8004238:	e7c1      	b.n	80041be <_printf_common+0x3e>
 800423a:	2030      	movs	r0, #48	@ 0x30
 800423c:	18e1      	adds	r1, r4, r3
 800423e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004248:	4422      	add	r2, r4
 800424a:	3302      	adds	r3, #2
 800424c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004250:	e7c2      	b.n	80041d8 <_printf_common+0x58>
 8004252:	2301      	movs	r3, #1
 8004254:	4622      	mov	r2, r4
 8004256:	4641      	mov	r1, r8
 8004258:	4638      	mov	r0, r7
 800425a:	47c8      	blx	r9
 800425c:	3001      	adds	r0, #1
 800425e:	d0e6      	beq.n	800422e <_printf_common+0xae>
 8004260:	3601      	adds	r6, #1
 8004262:	e7d9      	b.n	8004218 <_printf_common+0x98>

08004264 <_printf_i>:
 8004264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	7e0f      	ldrb	r7, [r1, #24]
 800426a:	4691      	mov	r9, r2
 800426c:	2f78      	cmp	r7, #120	@ 0x78
 800426e:	4680      	mov	r8, r0
 8004270:	460c      	mov	r4, r1
 8004272:	469a      	mov	sl, r3
 8004274:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800427a:	d807      	bhi.n	800428c <_printf_i+0x28>
 800427c:	2f62      	cmp	r7, #98	@ 0x62
 800427e:	d80a      	bhi.n	8004296 <_printf_i+0x32>
 8004280:	2f00      	cmp	r7, #0
 8004282:	f000 80d3 	beq.w	800442c <_printf_i+0x1c8>
 8004286:	2f58      	cmp	r7, #88	@ 0x58
 8004288:	f000 80ba 	beq.w	8004400 <_printf_i+0x19c>
 800428c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004294:	e03a      	b.n	800430c <_printf_i+0xa8>
 8004296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800429a:	2b15      	cmp	r3, #21
 800429c:	d8f6      	bhi.n	800428c <_printf_i+0x28>
 800429e:	a101      	add	r1, pc, #4	@ (adr r1, 80042a4 <_printf_i+0x40>)
 80042a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a4:	080042fd 	.word	0x080042fd
 80042a8:	08004311 	.word	0x08004311
 80042ac:	0800428d 	.word	0x0800428d
 80042b0:	0800428d 	.word	0x0800428d
 80042b4:	0800428d 	.word	0x0800428d
 80042b8:	0800428d 	.word	0x0800428d
 80042bc:	08004311 	.word	0x08004311
 80042c0:	0800428d 	.word	0x0800428d
 80042c4:	0800428d 	.word	0x0800428d
 80042c8:	0800428d 	.word	0x0800428d
 80042cc:	0800428d 	.word	0x0800428d
 80042d0:	08004413 	.word	0x08004413
 80042d4:	0800433b 	.word	0x0800433b
 80042d8:	080043cd 	.word	0x080043cd
 80042dc:	0800428d 	.word	0x0800428d
 80042e0:	0800428d 	.word	0x0800428d
 80042e4:	08004435 	.word	0x08004435
 80042e8:	0800428d 	.word	0x0800428d
 80042ec:	0800433b 	.word	0x0800433b
 80042f0:	0800428d 	.word	0x0800428d
 80042f4:	0800428d 	.word	0x0800428d
 80042f8:	080043d5 	.word	0x080043d5
 80042fc:	6833      	ldr	r3, [r6, #0]
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6032      	str	r2, [r6, #0]
 8004304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800430c:	2301      	movs	r3, #1
 800430e:	e09e      	b.n	800444e <_printf_i+0x1ea>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	1d19      	adds	r1, r3, #4
 8004316:	6031      	str	r1, [r6, #0]
 8004318:	0606      	lsls	r6, r0, #24
 800431a:	d501      	bpl.n	8004320 <_printf_i+0xbc>
 800431c:	681d      	ldr	r5, [r3, #0]
 800431e:	e003      	b.n	8004328 <_printf_i+0xc4>
 8004320:	0645      	lsls	r5, r0, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0xb8>
 8004324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004328:	2d00      	cmp	r5, #0
 800432a:	da03      	bge.n	8004334 <_printf_i+0xd0>
 800432c:	232d      	movs	r3, #45	@ 0x2d
 800432e:	426d      	negs	r5, r5
 8004330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004334:	230a      	movs	r3, #10
 8004336:	4859      	ldr	r0, [pc, #356]	@ (800449c <_printf_i+0x238>)
 8004338:	e011      	b.n	800435e <_printf_i+0xfa>
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	0608      	lsls	r0, r1, #24
 8004340:	f853 5b04 	ldr.w	r5, [r3], #4
 8004344:	d402      	bmi.n	800434c <_printf_i+0xe8>
 8004346:	0649      	lsls	r1, r1, #25
 8004348:	bf48      	it	mi
 800434a:	b2ad      	uxthmi	r5, r5
 800434c:	2f6f      	cmp	r7, #111	@ 0x6f
 800434e:	6033      	str	r3, [r6, #0]
 8004350:	bf14      	ite	ne
 8004352:	230a      	movne	r3, #10
 8004354:	2308      	moveq	r3, #8
 8004356:	4851      	ldr	r0, [pc, #324]	@ (800449c <_printf_i+0x238>)
 8004358:	2100      	movs	r1, #0
 800435a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800435e:	6866      	ldr	r6, [r4, #4]
 8004360:	2e00      	cmp	r6, #0
 8004362:	bfa8      	it	ge
 8004364:	6821      	ldrge	r1, [r4, #0]
 8004366:	60a6      	str	r6, [r4, #8]
 8004368:	bfa4      	itt	ge
 800436a:	f021 0104 	bicge.w	r1, r1, #4
 800436e:	6021      	strge	r1, [r4, #0]
 8004370:	b90d      	cbnz	r5, 8004376 <_printf_i+0x112>
 8004372:	2e00      	cmp	r6, #0
 8004374:	d04b      	beq.n	800440e <_printf_i+0x1aa>
 8004376:	4616      	mov	r6, r2
 8004378:	fbb5 f1f3 	udiv	r1, r5, r3
 800437c:	fb03 5711 	mls	r7, r3, r1, r5
 8004380:	5dc7      	ldrb	r7, [r0, r7]
 8004382:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004386:	462f      	mov	r7, r5
 8004388:	42bb      	cmp	r3, r7
 800438a:	460d      	mov	r5, r1
 800438c:	d9f4      	bls.n	8004378 <_printf_i+0x114>
 800438e:	2b08      	cmp	r3, #8
 8004390:	d10b      	bne.n	80043aa <_printf_i+0x146>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	07df      	lsls	r7, r3, #31
 8004396:	d508      	bpl.n	80043aa <_printf_i+0x146>
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	6861      	ldr	r1, [r4, #4]
 800439c:	4299      	cmp	r1, r3
 800439e:	bfde      	ittt	le
 80043a0:	2330      	movle	r3, #48	@ 0x30
 80043a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043aa:	1b92      	subs	r2, r2, r6
 80043ac:	6122      	str	r2, [r4, #16]
 80043ae:	464b      	mov	r3, r9
 80043b0:	4621      	mov	r1, r4
 80043b2:	4640      	mov	r0, r8
 80043b4:	f8cd a000 	str.w	sl, [sp]
 80043b8:	aa03      	add	r2, sp, #12
 80043ba:	f7ff fee1 	bl	8004180 <_printf_common>
 80043be:	3001      	adds	r0, #1
 80043c0:	d14a      	bne.n	8004458 <_printf_i+0x1f4>
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	b004      	add	sp, #16
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2778      	movs	r7, #120	@ 0x78
 80043d6:	4832      	ldr	r0, [pc, #200]	@ (80044a0 <_printf_i+0x23c>)
 80043d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	6831      	ldr	r1, [r6, #0]
 80043e0:	061f      	lsls	r7, r3, #24
 80043e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80043e6:	d402      	bmi.n	80043ee <_printf_i+0x18a>
 80043e8:	065f      	lsls	r7, r3, #25
 80043ea:	bf48      	it	mi
 80043ec:	b2ad      	uxthmi	r5, r5
 80043ee:	6031      	str	r1, [r6, #0]
 80043f0:	07d9      	lsls	r1, r3, #31
 80043f2:	bf44      	itt	mi
 80043f4:	f043 0320 	orrmi.w	r3, r3, #32
 80043f8:	6023      	strmi	r3, [r4, #0]
 80043fa:	b11d      	cbz	r5, 8004404 <_printf_i+0x1a0>
 80043fc:	2310      	movs	r3, #16
 80043fe:	e7ab      	b.n	8004358 <_printf_i+0xf4>
 8004400:	4826      	ldr	r0, [pc, #152]	@ (800449c <_printf_i+0x238>)
 8004402:	e7e9      	b.n	80043d8 <_printf_i+0x174>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	f023 0320 	bic.w	r3, r3, #32
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	e7f6      	b.n	80043fc <_printf_i+0x198>
 800440e:	4616      	mov	r6, r2
 8004410:	e7bd      	b.n	800438e <_printf_i+0x12a>
 8004412:	6833      	ldr	r3, [r6, #0]
 8004414:	6825      	ldr	r5, [r4, #0]
 8004416:	1d18      	adds	r0, r3, #4
 8004418:	6961      	ldr	r1, [r4, #20]
 800441a:	6030      	str	r0, [r6, #0]
 800441c:	062e      	lsls	r6, r5, #24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	d501      	bpl.n	8004426 <_printf_i+0x1c2>
 8004422:	6019      	str	r1, [r3, #0]
 8004424:	e002      	b.n	800442c <_printf_i+0x1c8>
 8004426:	0668      	lsls	r0, r5, #25
 8004428:	d5fb      	bpl.n	8004422 <_printf_i+0x1be>
 800442a:	8019      	strh	r1, [r3, #0]
 800442c:	2300      	movs	r3, #0
 800442e:	4616      	mov	r6, r2
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	e7bc      	b.n	80043ae <_printf_i+0x14a>
 8004434:	6833      	ldr	r3, [r6, #0]
 8004436:	2100      	movs	r1, #0
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	6032      	str	r2, [r6, #0]
 800443c:	681e      	ldr	r6, [r3, #0]
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	4630      	mov	r0, r6
 8004442:	f000 f9d4 	bl	80047ee <memchr>
 8004446:	b108      	cbz	r0, 800444c <_printf_i+0x1e8>
 8004448:	1b80      	subs	r0, r0, r6
 800444a:	6060      	str	r0, [r4, #4]
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	6123      	str	r3, [r4, #16]
 8004450:	2300      	movs	r3, #0
 8004452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004456:	e7aa      	b.n	80043ae <_printf_i+0x14a>
 8004458:	4632      	mov	r2, r6
 800445a:	4649      	mov	r1, r9
 800445c:	4640      	mov	r0, r8
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	47d0      	blx	sl
 8004462:	3001      	adds	r0, #1
 8004464:	d0ad      	beq.n	80043c2 <_printf_i+0x15e>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	079b      	lsls	r3, r3, #30
 800446a:	d413      	bmi.n	8004494 <_printf_i+0x230>
 800446c:	68e0      	ldr	r0, [r4, #12]
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	4298      	cmp	r0, r3
 8004472:	bfb8      	it	lt
 8004474:	4618      	movlt	r0, r3
 8004476:	e7a6      	b.n	80043c6 <_printf_i+0x162>
 8004478:	2301      	movs	r3, #1
 800447a:	4632      	mov	r2, r6
 800447c:	4649      	mov	r1, r9
 800447e:	4640      	mov	r0, r8
 8004480:	47d0      	blx	sl
 8004482:	3001      	adds	r0, #1
 8004484:	d09d      	beq.n	80043c2 <_printf_i+0x15e>
 8004486:	3501      	adds	r5, #1
 8004488:	68e3      	ldr	r3, [r4, #12]
 800448a:	9903      	ldr	r1, [sp, #12]
 800448c:	1a5b      	subs	r3, r3, r1
 800448e:	42ab      	cmp	r3, r5
 8004490:	dcf2      	bgt.n	8004478 <_printf_i+0x214>
 8004492:	e7eb      	b.n	800446c <_printf_i+0x208>
 8004494:	2500      	movs	r5, #0
 8004496:	f104 0619 	add.w	r6, r4, #25
 800449a:	e7f5      	b.n	8004488 <_printf_i+0x224>
 800449c:	08006a55 	.word	0x08006a55
 80044a0:	08006a66 	.word	0x08006a66

080044a4 <std>:
 80044a4:	2300      	movs	r3, #0
 80044a6:	b510      	push	{r4, lr}
 80044a8:	4604      	mov	r4, r0
 80044aa:	e9c0 3300 	strd	r3, r3, [r0]
 80044ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044b2:	6083      	str	r3, [r0, #8]
 80044b4:	8181      	strh	r1, [r0, #12]
 80044b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80044b8:	81c2      	strh	r2, [r0, #14]
 80044ba:	6183      	str	r3, [r0, #24]
 80044bc:	4619      	mov	r1, r3
 80044be:	2208      	movs	r2, #8
 80044c0:	305c      	adds	r0, #92	@ 0x5c
 80044c2:	f000 f914 	bl	80046ee <memset>
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <std+0x58>)
 80044c8:	6224      	str	r4, [r4, #32]
 80044ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <std+0x5c>)
 80044ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <std+0x60>)
 80044d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <std+0x64>)
 80044d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80044d8:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <std+0x68>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	d006      	beq.n	80044ec <std+0x48>
 80044de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044e2:	4294      	cmp	r4, r2
 80044e4:	d002      	beq.n	80044ec <std+0x48>
 80044e6:	33d0      	adds	r3, #208	@ 0xd0
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d105      	bne.n	80044f8 <std+0x54>
 80044ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	f000 b978 	b.w	80047e8 <__retarget_lock_init_recursive>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	08004669 	.word	0x08004669
 8004500:	0800468b 	.word	0x0800468b
 8004504:	080046c3 	.word	0x080046c3
 8004508:	080046e7 	.word	0x080046e7
 800450c:	20000298 	.word	0x20000298

08004510 <stdio_exit_handler>:
 8004510:	4a02      	ldr	r2, [pc, #8]	@ (800451c <stdio_exit_handler+0xc>)
 8004512:	4903      	ldr	r1, [pc, #12]	@ (8004520 <stdio_exit_handler+0x10>)
 8004514:	4803      	ldr	r0, [pc, #12]	@ (8004524 <stdio_exit_handler+0x14>)
 8004516:	f000 b869 	b.w	80045ec <_fwalk_sglue>
 800451a:	bf00      	nop
 800451c:	2000000c 	.word	0x2000000c
 8004520:	08006175 	.word	0x08006175
 8004524:	2000001c 	.word	0x2000001c

08004528 <cleanup_stdio>:
 8004528:	6841      	ldr	r1, [r0, #4]
 800452a:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <cleanup_stdio+0x34>)
 800452c:	b510      	push	{r4, lr}
 800452e:	4299      	cmp	r1, r3
 8004530:	4604      	mov	r4, r0
 8004532:	d001      	beq.n	8004538 <cleanup_stdio+0x10>
 8004534:	f001 fe1e 	bl	8006174 <_fflush_r>
 8004538:	68a1      	ldr	r1, [r4, #8]
 800453a:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <cleanup_stdio+0x38>)
 800453c:	4299      	cmp	r1, r3
 800453e:	d002      	beq.n	8004546 <cleanup_stdio+0x1e>
 8004540:	4620      	mov	r0, r4
 8004542:	f001 fe17 	bl	8006174 <_fflush_r>
 8004546:	68e1      	ldr	r1, [r4, #12]
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <cleanup_stdio+0x3c>)
 800454a:	4299      	cmp	r1, r3
 800454c:	d004      	beq.n	8004558 <cleanup_stdio+0x30>
 800454e:	4620      	mov	r0, r4
 8004550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004554:	f001 be0e 	b.w	8006174 <_fflush_r>
 8004558:	bd10      	pop	{r4, pc}
 800455a:	bf00      	nop
 800455c:	20000298 	.word	0x20000298
 8004560:	20000300 	.word	0x20000300
 8004564:	20000368 	.word	0x20000368

08004568 <global_stdio_init.part.0>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <global_stdio_init.part.0+0x30>)
 800456c:	4c0b      	ldr	r4, [pc, #44]	@ (800459c <global_stdio_init.part.0+0x34>)
 800456e:	4a0c      	ldr	r2, [pc, #48]	@ (80045a0 <global_stdio_init.part.0+0x38>)
 8004570:	4620      	mov	r0, r4
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2104      	movs	r1, #4
 8004576:	2200      	movs	r2, #0
 8004578:	f7ff ff94 	bl	80044a4 <std>
 800457c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004580:	2201      	movs	r2, #1
 8004582:	2109      	movs	r1, #9
 8004584:	f7ff ff8e 	bl	80044a4 <std>
 8004588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800458c:	2202      	movs	r2, #2
 800458e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004592:	2112      	movs	r1, #18
 8004594:	f7ff bf86 	b.w	80044a4 <std>
 8004598:	200003d0 	.word	0x200003d0
 800459c:	20000298 	.word	0x20000298
 80045a0:	08004511 	.word	0x08004511

080045a4 <__sfp_lock_acquire>:
 80045a4:	4801      	ldr	r0, [pc, #4]	@ (80045ac <__sfp_lock_acquire+0x8>)
 80045a6:	f000 b920 	b.w	80047ea <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	200003d9 	.word	0x200003d9

080045b0 <__sfp_lock_release>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__sfp_lock_release+0x8>)
 80045b2:	f000 b91b 	b.w	80047ec <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	200003d9 	.word	0x200003d9

080045bc <__sinit>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	f7ff fff0 	bl	80045a4 <__sfp_lock_acquire>
 80045c4:	6a23      	ldr	r3, [r4, #32]
 80045c6:	b11b      	cbz	r3, 80045d0 <__sinit+0x14>
 80045c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045cc:	f7ff bff0 	b.w	80045b0 <__sfp_lock_release>
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <__sinit+0x28>)
 80045d2:	6223      	str	r3, [r4, #32]
 80045d4:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <__sinit+0x2c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f5      	bne.n	80045c8 <__sinit+0xc>
 80045dc:	f7ff ffc4 	bl	8004568 <global_stdio_init.part.0>
 80045e0:	e7f2      	b.n	80045c8 <__sinit+0xc>
 80045e2:	bf00      	nop
 80045e4:	08004529 	.word	0x08004529
 80045e8:	200003d0 	.word	0x200003d0

080045ec <_fwalk_sglue>:
 80045ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f0:	4607      	mov	r7, r0
 80045f2:	4688      	mov	r8, r1
 80045f4:	4614      	mov	r4, r2
 80045f6:	2600      	movs	r6, #0
 80045f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004600:	d505      	bpl.n	800460e <_fwalk_sglue+0x22>
 8004602:	6824      	ldr	r4, [r4, #0]
 8004604:	2c00      	cmp	r4, #0
 8004606:	d1f7      	bne.n	80045f8 <_fwalk_sglue+0xc>
 8004608:	4630      	mov	r0, r6
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	89ab      	ldrh	r3, [r5, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d907      	bls.n	8004624 <_fwalk_sglue+0x38>
 8004614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004618:	3301      	adds	r3, #1
 800461a:	d003      	beq.n	8004624 <_fwalk_sglue+0x38>
 800461c:	4629      	mov	r1, r5
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	4306      	orrs	r6, r0
 8004624:	3568      	adds	r5, #104	@ 0x68
 8004626:	e7e9      	b.n	80045fc <_fwalk_sglue+0x10>

08004628 <siprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800462e:	b500      	push	{lr}
 8004630:	b09c      	sub	sp, #112	@ 0x70
 8004632:	ab1d      	add	r3, sp, #116	@ 0x74
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	9107      	str	r1, [sp, #28]
 800463a:	9104      	str	r1, [sp, #16]
 800463c:	4808      	ldr	r0, [pc, #32]	@ (8004660 <siprintf+0x38>)
 800463e:	4909      	ldr	r1, [pc, #36]	@ (8004664 <siprintf+0x3c>)
 8004640:	f853 2b04 	ldr.w	r2, [r3], #4
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	a902      	add	r1, sp, #8
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	f001 fc16 	bl	8005e7c <_svfiprintf_r>
 8004650:	2200      	movs	r2, #0
 8004652:	9b02      	ldr	r3, [sp, #8]
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	b01c      	add	sp, #112	@ 0x70
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	20000018 	.word	0x20000018
 8004664:	ffff0208 	.word	0xffff0208

08004668 <__sread>:
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 f86c 	bl	800474c <_read_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	bfab      	itete	ge
 8004678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800467a:	89a3      	ldrhlt	r3, [r4, #12]
 800467c:	181b      	addge	r3, r3, r0
 800467e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004682:	bfac      	ite	ge
 8004684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004686:	81a3      	strhlt	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__swrite>:
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	461f      	mov	r7, r3
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	4605      	mov	r5, r0
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	d505      	bpl.n	80046a8 <__swrite+0x1e>
 800469c:	2302      	movs	r3, #2
 800469e:	2200      	movs	r2, #0
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	f000 f840 	bl	8004728 <_lseek_r>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	4632      	mov	r2, r6
 80046ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	4628      	mov	r0, r5
 80046b4:	463b      	mov	r3, r7
 80046b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	f000 b857 	b.w	8004770 <_write_r>

080046c2 <__sseek>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	460c      	mov	r4, r1
 80046c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ca:	f000 f82d 	bl	8004728 <_lseek_r>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	bf15      	itete	ne
 80046d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046de:	81a3      	strheq	r3, [r4, #12]
 80046e0:	bf18      	it	ne
 80046e2:	81a3      	strhne	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__sclose>:
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 b80d 	b.w	8004708 <_close_r>

080046ee <memset>:
 80046ee:	4603      	mov	r3, r0
 80046f0:	4402      	add	r2, r0
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d100      	bne.n	80046f8 <memset+0xa>
 80046f6:	4770      	bx	lr
 80046f8:	f803 1b01 	strb.w	r1, [r3], #1
 80046fc:	e7f9      	b.n	80046f2 <memset+0x4>
	...

08004700 <_localeconv_r>:
 8004700:	4800      	ldr	r0, [pc, #0]	@ (8004704 <_localeconv_r+0x4>)
 8004702:	4770      	bx	lr
 8004704:	20000158 	.word	0x20000158

08004708 <_close_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	2300      	movs	r3, #0
 800470c:	4d05      	ldr	r5, [pc, #20]	@ (8004724 <_close_r+0x1c>)
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	f7fc fd4b 	bl	80011ae <_close>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_close_r+0x1a>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_close_r+0x1a>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200003d4 	.word	0x200003d4

08004728 <_lseek_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	2200      	movs	r2, #0
 8004732:	4d05      	ldr	r5, [pc, #20]	@ (8004748 <_lseek_r+0x20>)
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fc fd5d 	bl	80011f6 <_lseek>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_lseek_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_lseek_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200003d4 	.word	0x200003d4

0800474c <_read_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	2200      	movs	r2, #0
 8004756:	4d05      	ldr	r5, [pc, #20]	@ (800476c <_read_r+0x20>)
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc fcee 	bl	800113c <_read>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_read_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_read_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200003d4 	.word	0x200003d4

08004770 <_write_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	2200      	movs	r2, #0
 800477a:	4d05      	ldr	r5, [pc, #20]	@ (8004790 <_write_r+0x20>)
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fc fcf9 	bl	8001176 <_write>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_write_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_write_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200003d4 	.word	0x200003d4

08004794 <__errno>:
 8004794:	4b01      	ldr	r3, [pc, #4]	@ (800479c <__errno+0x8>)
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20000018 	.word	0x20000018

080047a0 <__libc_init_array>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	2600      	movs	r6, #0
 80047a4:	4d0c      	ldr	r5, [pc, #48]	@ (80047d8 <__libc_init_array+0x38>)
 80047a6:	4c0d      	ldr	r4, [pc, #52]	@ (80047dc <__libc_init_array+0x3c>)
 80047a8:	1b64      	subs	r4, r4, r5
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	42a6      	cmp	r6, r4
 80047ae:	d109      	bne.n	80047c4 <__libc_init_array+0x24>
 80047b0:	f002 f86e 	bl	8006890 <_init>
 80047b4:	2600      	movs	r6, #0
 80047b6:	4d0a      	ldr	r5, [pc, #40]	@ (80047e0 <__libc_init_array+0x40>)
 80047b8:	4c0a      	ldr	r4, [pc, #40]	@ (80047e4 <__libc_init_array+0x44>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	42a6      	cmp	r6, r4
 80047c0:	d105      	bne.n	80047ce <__libc_init_array+0x2e>
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c8:	4798      	blx	r3
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7ee      	b.n	80047ac <__libc_init_array+0xc>
 80047ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d2:	4798      	blx	r3
 80047d4:	3601      	adds	r6, #1
 80047d6:	e7f2      	b.n	80047be <__libc_init_array+0x1e>
 80047d8:	08006cc0 	.word	0x08006cc0
 80047dc:	08006cc0 	.word	0x08006cc0
 80047e0:	08006cc0 	.word	0x08006cc0
 80047e4:	08006cc4 	.word	0x08006cc4

080047e8 <__retarget_lock_init_recursive>:
 80047e8:	4770      	bx	lr

080047ea <__retarget_lock_acquire_recursive>:
 80047ea:	4770      	bx	lr

080047ec <__retarget_lock_release_recursive>:
 80047ec:	4770      	bx	lr

080047ee <memchr>:
 80047ee:	4603      	mov	r3, r0
 80047f0:	b510      	push	{r4, lr}
 80047f2:	b2c9      	uxtb	r1, r1
 80047f4:	4402      	add	r2, r0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	d101      	bne.n	8004800 <memchr+0x12>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e003      	b.n	8004808 <memchr+0x1a>
 8004800:	7804      	ldrb	r4, [r0, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	428c      	cmp	r4, r1
 8004806:	d1f6      	bne.n	80047f6 <memchr+0x8>
 8004808:	bd10      	pop	{r4, pc}

0800480a <memcpy>:
 800480a:	440a      	add	r2, r1
 800480c:	4291      	cmp	r1, r2
 800480e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004812:	d100      	bne.n	8004816 <memcpy+0xc>
 8004814:	4770      	bx	lr
 8004816:	b510      	push	{r4, lr}
 8004818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481c:	4291      	cmp	r1, r2
 800481e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004822:	d1f9      	bne.n	8004818 <memcpy+0xe>
 8004824:	bd10      	pop	{r4, pc}

08004826 <quorem>:
 8004826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	6903      	ldr	r3, [r0, #16]
 800482c:	690c      	ldr	r4, [r1, #16]
 800482e:	4607      	mov	r7, r0
 8004830:	42a3      	cmp	r3, r4
 8004832:	db7e      	blt.n	8004932 <quorem+0x10c>
 8004834:	3c01      	subs	r4, #1
 8004836:	00a3      	lsls	r3, r4, #2
 8004838:	f100 0514 	add.w	r5, r0, #20
 800483c:	f101 0814 	add.w	r8, r1, #20
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800484c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004850:	3301      	adds	r3, #1
 8004852:	429a      	cmp	r2, r3
 8004854:	fbb2 f6f3 	udiv	r6, r2, r3
 8004858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800485c:	d32e      	bcc.n	80048bc <quorem+0x96>
 800485e:	f04f 0a00 	mov.w	sl, #0
 8004862:	46c4      	mov	ip, r8
 8004864:	46ae      	mov	lr, r5
 8004866:	46d3      	mov	fp, sl
 8004868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800486c:	b298      	uxth	r0, r3
 800486e:	fb06 a000 	mla	r0, r6, r0, sl
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	0c02      	lsrs	r2, r0, #16
 8004876:	fb06 2303 	mla	r3, r6, r3, r2
 800487a:	f8de 2000 	ldr.w	r2, [lr]
 800487e:	b280      	uxth	r0, r0
 8004880:	b292      	uxth	r2, r2
 8004882:	1a12      	subs	r2, r2, r0
 8004884:	445a      	add	r2, fp
 8004886:	f8de 0000 	ldr.w	r0, [lr]
 800488a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800488e:	b29b      	uxth	r3, r3
 8004890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004898:	b292      	uxth	r2, r2
 800489a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800489e:	45e1      	cmp	r9, ip
 80048a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048a4:	f84e 2b04 	str.w	r2, [lr], #4
 80048a8:	d2de      	bcs.n	8004868 <quorem+0x42>
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	58eb      	ldr	r3, [r5, r3]
 80048ae:	b92b      	cbnz	r3, 80048bc <quorem+0x96>
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	3b04      	subs	r3, #4
 80048b4:	429d      	cmp	r5, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	d32f      	bcc.n	800491a <quorem+0xf4>
 80048ba:	613c      	str	r4, [r7, #16]
 80048bc:	4638      	mov	r0, r7
 80048be:	f001 f979 	bl	8005bb4 <__mcmp>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	db25      	blt.n	8004912 <quorem+0xec>
 80048c6:	4629      	mov	r1, r5
 80048c8:	2000      	movs	r0, #0
 80048ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80048ce:	f8d1 c000 	ldr.w	ip, [r1]
 80048d2:	fa1f fe82 	uxth.w	lr, r2
 80048d6:	fa1f f38c 	uxth.w	r3, ip
 80048da:	eba3 030e 	sub.w	r3, r3, lr
 80048de:	4403      	add	r3, r0
 80048e0:	0c12      	lsrs	r2, r2, #16
 80048e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048f0:	45c1      	cmp	r9, r8
 80048f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048f6:	f841 3b04 	str.w	r3, [r1], #4
 80048fa:	d2e6      	bcs.n	80048ca <quorem+0xa4>
 80048fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004904:	b922      	cbnz	r2, 8004910 <quorem+0xea>
 8004906:	3b04      	subs	r3, #4
 8004908:	429d      	cmp	r5, r3
 800490a:	461a      	mov	r2, r3
 800490c:	d30b      	bcc.n	8004926 <quorem+0x100>
 800490e:	613c      	str	r4, [r7, #16]
 8004910:	3601      	adds	r6, #1
 8004912:	4630      	mov	r0, r6
 8004914:	b003      	add	sp, #12
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	3b04      	subs	r3, #4
 800491e:	2a00      	cmp	r2, #0
 8004920:	d1cb      	bne.n	80048ba <quorem+0x94>
 8004922:	3c01      	subs	r4, #1
 8004924:	e7c6      	b.n	80048b4 <quorem+0x8e>
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	3b04      	subs	r3, #4
 800492a:	2a00      	cmp	r2, #0
 800492c:	d1ef      	bne.n	800490e <quorem+0xe8>
 800492e:	3c01      	subs	r4, #1
 8004930:	e7ea      	b.n	8004908 <quorem+0xe2>
 8004932:	2000      	movs	r0, #0
 8004934:	e7ee      	b.n	8004914 <quorem+0xee>
	...

08004938 <_dtoa_r>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	69c7      	ldr	r7, [r0, #28]
 8004942:	b097      	sub	sp, #92	@ 0x5c
 8004944:	4683      	mov	fp, r0
 8004946:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800494a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800494c:	b97f      	cbnz	r7, 800496e <_dtoa_r+0x36>
 800494e:	2010      	movs	r0, #16
 8004950:	f000 fe02 	bl	8005558 <malloc>
 8004954:	4602      	mov	r2, r0
 8004956:	f8cb 001c 	str.w	r0, [fp, #28]
 800495a:	b920      	cbnz	r0, 8004966 <_dtoa_r+0x2e>
 800495c:	21ef      	movs	r1, #239	@ 0xef
 800495e:	4ba8      	ldr	r3, [pc, #672]	@ (8004c00 <_dtoa_r+0x2c8>)
 8004960:	48a8      	ldr	r0, [pc, #672]	@ (8004c04 <_dtoa_r+0x2cc>)
 8004962:	f001 fc59 	bl	8006218 <__assert_func>
 8004966:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800496a:	6007      	str	r7, [r0, #0]
 800496c:	60c7      	str	r7, [r0, #12]
 800496e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	b159      	cbz	r1, 800498e <_dtoa_r+0x56>
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	2301      	movs	r3, #1
 800497a:	4093      	lsls	r3, r2
 800497c:	604a      	str	r2, [r1, #4]
 800497e:	608b      	str	r3, [r1, #8]
 8004980:	4658      	mov	r0, fp
 8004982:	f000 fedf 	bl	8005744 <_Bfree>
 8004986:	2200      	movs	r2, #0
 8004988:	f8db 301c 	ldr.w	r3, [fp, #28]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	1e2b      	subs	r3, r5, #0
 8004990:	bfaf      	iteee	ge
 8004992:	2300      	movge	r3, #0
 8004994:	2201      	movlt	r2, #1
 8004996:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800499a:	9303      	strlt	r3, [sp, #12]
 800499c:	bfa8      	it	ge
 800499e:	6033      	strge	r3, [r6, #0]
 80049a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80049a4:	4b98      	ldr	r3, [pc, #608]	@ (8004c08 <_dtoa_r+0x2d0>)
 80049a6:	bfb8      	it	lt
 80049a8:	6032      	strlt	r2, [r6, #0]
 80049aa:	ea33 0308 	bics.w	r3, r3, r8
 80049ae:	d112      	bne.n	80049d6 <_dtoa_r+0x9e>
 80049b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80049bc:	4323      	orrs	r3, r4
 80049be:	f000 8550 	beq.w	8005462 <_dtoa_r+0xb2a>
 80049c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004c0c <_dtoa_r+0x2d4>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8552 	beq.w	8005472 <_dtoa_r+0xb3a>
 80049ce:	f10a 0303 	add.w	r3, sl, #3
 80049d2:	f000 bd4c 	b.w	800546e <_dtoa_r+0xb36>
 80049d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80049de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	f7fb ffdf 	bl	80009a8 <__aeabi_dcmpeq>
 80049ea:	4607      	mov	r7, r0
 80049ec:	b158      	cbz	r0, 8004a06 <_dtoa_r+0xce>
 80049ee:	2301      	movs	r3, #1
 80049f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049f6:	b113      	cbz	r3, 80049fe <_dtoa_r+0xc6>
 80049f8:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <_dtoa_r+0x2d8>)
 80049fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004c14 <_dtoa_r+0x2dc>
 8004a02:	f000 bd36 	b.w	8005472 <_dtoa_r+0xb3a>
 8004a06:	ab14      	add	r3, sp, #80	@ 0x50
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	ab15      	add	r3, sp, #84	@ 0x54
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	4658      	mov	r0, fp
 8004a10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004a14:	f001 f97e 	bl	8005d14 <__d2b>
 8004a18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	2e00      	cmp	r6, #0
 8004a20:	d077      	beq.n	8004b12 <_dtoa_r+0x1da>
 8004a22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a38:	9712      	str	r7, [sp, #72]	@ 0x48
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4b76      	ldr	r3, [pc, #472]	@ (8004c18 <_dtoa_r+0x2e0>)
 8004a40:	f7fb fb92 	bl	8000168 <__aeabi_dsub>
 8004a44:	a368      	add	r3, pc, #416	@ (adr r3, 8004be8 <_dtoa_r+0x2b0>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fd45 	bl	80004d8 <__aeabi_dmul>
 8004a4e:	a368      	add	r3, pc, #416	@ (adr r3, 8004bf0 <_dtoa_r+0x2b8>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fb fb8a 	bl	800016c <__adddf3>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	f7fb fcd1 	bl	8000404 <__aeabi_i2d>
 8004a62:	a365      	add	r3, pc, #404	@ (adr r3, 8004bf8 <_dtoa_r+0x2c0>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fd36 	bl	80004d8 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4620      	mov	r0, r4
 8004a72:	4629      	mov	r1, r5
 8004a74:	f7fb fb7a 	bl	800016c <__adddf3>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	f7fb ffdc 	bl	8000a38 <__aeabi_d2iz>
 8004a80:	2200      	movs	r2, #0
 8004a82:	4607      	mov	r7, r0
 8004a84:	2300      	movs	r3, #0
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb ff97 	bl	80009bc <__aeabi_dcmplt>
 8004a8e:	b140      	cbz	r0, 8004aa2 <_dtoa_r+0x16a>
 8004a90:	4638      	mov	r0, r7
 8004a92:	f7fb fcb7 	bl	8000404 <__aeabi_i2d>
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	f7fb ff85 	bl	80009a8 <__aeabi_dcmpeq>
 8004a9e:	b900      	cbnz	r0, 8004aa2 <_dtoa_r+0x16a>
 8004aa0:	3f01      	subs	r7, #1
 8004aa2:	2f16      	cmp	r7, #22
 8004aa4:	d853      	bhi.n	8004b4e <_dtoa_r+0x216>
 8004aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8004c1c <_dtoa_r+0x2e4>)
 8004aac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb ff82 	bl	80009bc <__aeabi_dcmplt>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d04a      	beq.n	8004b52 <_dtoa_r+0x21a>
 8004abc:	2300      	movs	r3, #0
 8004abe:	3f01      	subs	r7, #1
 8004ac0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ac2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac4:	1b9b      	subs	r3, r3, r6
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	bf46      	itte	mi
 8004aca:	f1c3 0801 	rsbmi	r8, r3, #1
 8004ace:	2300      	movmi	r3, #0
 8004ad0:	f04f 0800 	movpl.w	r8, #0
 8004ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ad6:	bf48      	it	mi
 8004ad8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	db3b      	blt.n	8004b56 <_dtoa_r+0x21e>
 8004ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae0:	970e      	str	r7, [sp, #56]	@ 0x38
 8004ae2:	443b      	add	r3, r7
 8004ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aec:	2b09      	cmp	r3, #9
 8004aee:	d866      	bhi.n	8004bbe <_dtoa_r+0x286>
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	bfc4      	itt	gt
 8004af4:	3b04      	subgt	r3, #4
 8004af6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004af8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004afa:	bfc8      	it	gt
 8004afc:	2400      	movgt	r4, #0
 8004afe:	f1a3 0302 	sub.w	r3, r3, #2
 8004b02:	bfd8      	it	le
 8004b04:	2401      	movle	r4, #1
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d864      	bhi.n	8004bd4 <_dtoa_r+0x29c>
 8004b0a:	e8df f003 	tbb	[pc, r3]
 8004b0e:	382b      	.short	0x382b
 8004b10:	5636      	.short	0x5636
 8004b12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004b16:	441e      	add	r6, r3
 8004b18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	bfc1      	itttt	gt
 8004b20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b24:	fa08 f803 	lslgt.w	r8, r8, r3
 8004b28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b30:	bfd6      	itet	le
 8004b32:	f1c3 0320 	rsble	r3, r3, #32
 8004b36:	ea48 0003 	orrgt.w	r0, r8, r3
 8004b3a:	fa04 f003 	lslle.w	r0, r4, r3
 8004b3e:	f7fb fc51 	bl	80003e4 <__aeabi_ui2d>
 8004b42:	2201      	movs	r2, #1
 8004b44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b48:	3e01      	subs	r6, #1
 8004b4a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b4c:	e775      	b.n	8004a3a <_dtoa_r+0x102>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e7b6      	b.n	8004ac0 <_dtoa_r+0x188>
 8004b52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b54:	e7b5      	b.n	8004ac2 <_dtoa_r+0x18a>
 8004b56:	427b      	negs	r3, r7
 8004b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	eba8 0807 	sub.w	r8, r8, r7
 8004b60:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b62:	e7c2      	b.n	8004aea <_dtoa_r+0x1b2>
 8004b64:	2300      	movs	r3, #0
 8004b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dc35      	bgt.n	8004bda <_dtoa_r+0x2a2>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	461a      	mov	r2, r3
 8004b72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b76:	9221      	str	r2, [sp, #132]	@ 0x84
 8004b78:	e00b      	b.n	8004b92 <_dtoa_r+0x25a>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7f3      	b.n	8004b66 <_dtoa_r+0x22e>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	9308      	str	r3, [sp, #32]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	9307      	str	r3, [sp, #28]
 8004b8e:	bfb8      	it	lt
 8004b90:	2301      	movlt	r3, #1
 8004b92:	2100      	movs	r1, #0
 8004b94:	2204      	movs	r2, #4
 8004b96:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b9a:	f102 0514 	add.w	r5, r2, #20
 8004b9e:	429d      	cmp	r5, r3
 8004ba0:	d91f      	bls.n	8004be2 <_dtoa_r+0x2aa>
 8004ba2:	6041      	str	r1, [r0, #4]
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	f000 fd8d 	bl	80056c4 <_Balloc>
 8004baa:	4682      	mov	sl, r0
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d139      	bne.n	8004c24 <_dtoa_r+0x2ec>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <_dtoa_r+0x2e8>)
 8004bb8:	e6d2      	b.n	8004960 <_dtoa_r+0x28>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e7e0      	b.n	8004b80 <_dtoa_r+0x248>
 8004bbe:	2401      	movs	r4, #1
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bc4:	9320      	str	r3, [sp, #128]	@ 0x80
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	2200      	movs	r2, #0
 8004bcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004bd0:	2312      	movs	r3, #18
 8004bd2:	e7d0      	b.n	8004b76 <_dtoa_r+0x23e>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bd8:	e7f5      	b.n	8004bc6 <_dtoa_r+0x28e>
 8004bda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004be0:	e7d7      	b.n	8004b92 <_dtoa_r+0x25a>
 8004be2:	3101      	adds	r1, #1
 8004be4:	0052      	lsls	r2, r2, #1
 8004be6:	e7d8      	b.n	8004b9a <_dtoa_r+0x262>
 8004be8:	636f4361 	.word	0x636f4361
 8004bec:	3fd287a7 	.word	0x3fd287a7
 8004bf0:	8b60c8b3 	.word	0x8b60c8b3
 8004bf4:	3fc68a28 	.word	0x3fc68a28
 8004bf8:	509f79fb 	.word	0x509f79fb
 8004bfc:	3fd34413 	.word	0x3fd34413
 8004c00:	08006a84 	.word	0x08006a84
 8004c04:	08006a9b 	.word	0x08006a9b
 8004c08:	7ff00000 	.word	0x7ff00000
 8004c0c:	08006a80 	.word	0x08006a80
 8004c10:	08006a54 	.word	0x08006a54
 8004c14:	08006a53 	.word	0x08006a53
 8004c18:	3ff80000 	.word	0x3ff80000
 8004c1c:	08006b98 	.word	0x08006b98
 8004c20:	08006af3 	.word	0x08006af3
 8004c24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c28:	6018      	str	r0, [r3, #0]
 8004c2a:	9b07      	ldr	r3, [sp, #28]
 8004c2c:	2b0e      	cmp	r3, #14
 8004c2e:	f200 80a4 	bhi.w	8004d7a <_dtoa_r+0x442>
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	f000 80a1 	beq.w	8004d7a <_dtoa_r+0x442>
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	dd33      	ble.n	8004ca4 <_dtoa_r+0x36c>
 8004c3c:	4b86      	ldr	r3, [pc, #536]	@ (8004e58 <_dtoa_r+0x520>)
 8004c3e:	f007 020f 	and.w	r2, r7, #15
 8004c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c46:	05f8      	lsls	r0, r7, #23
 8004c48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c54:	d516      	bpl.n	8004c84 <_dtoa_r+0x34c>
 8004c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c5a:	4b80      	ldr	r3, [pc, #512]	@ (8004e5c <_dtoa_r+0x524>)
 8004c5c:	2603      	movs	r6, #3
 8004c5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c62:	f7fb fd63 	bl	800072c <__aeabi_ddiv>
 8004c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c6a:	f004 040f 	and.w	r4, r4, #15
 8004c6e:	4d7b      	ldr	r5, [pc, #492]	@ (8004e5c <_dtoa_r+0x524>)
 8004c70:	b954      	cbnz	r4, 8004c88 <_dtoa_r+0x350>
 8004c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7a:	f7fb fd57 	bl	800072c <__aeabi_ddiv>
 8004c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c82:	e028      	b.n	8004cd6 <_dtoa_r+0x39e>
 8004c84:	2602      	movs	r6, #2
 8004c86:	e7f2      	b.n	8004c6e <_dtoa_r+0x336>
 8004c88:	07e1      	lsls	r1, r4, #31
 8004c8a:	d508      	bpl.n	8004c9e <_dtoa_r+0x366>
 8004c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c94:	f7fb fc20 	bl	80004d8 <__aeabi_dmul>
 8004c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	1064      	asrs	r4, r4, #1
 8004ca0:	3508      	adds	r5, #8
 8004ca2:	e7e5      	b.n	8004c70 <_dtoa_r+0x338>
 8004ca4:	f000 80d2 	beq.w	8004e4c <_dtoa_r+0x514>
 8004ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cac:	427c      	negs	r4, r7
 8004cae:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <_dtoa_r+0x520>)
 8004cb0:	f004 020f 	and.w	r2, r4, #15
 8004cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fc0c 	bl	80004d8 <__aeabi_dmul>
 8004cc0:	2602      	movs	r6, #2
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cc8:	4d64      	ldr	r5, [pc, #400]	@ (8004e5c <_dtoa_r+0x524>)
 8004cca:	1124      	asrs	r4, r4, #4
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	f040 80b2 	bne.w	8004e36 <_dtoa_r+0x4fe>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1d3      	bne.n	8004c7e <_dtoa_r+0x346>
 8004cd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80b7 	beq.w	8004e50 <_dtoa_r+0x518>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8004e60 <_dtoa_r+0x528>)
 8004cea:	f7fb fe67 	bl	80009bc <__aeabi_dcmplt>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f000 80ae 	beq.w	8004e50 <_dtoa_r+0x518>
 8004cf4:	9b07      	ldr	r3, [sp, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80aa 	beq.w	8004e50 <_dtoa_r+0x518>
 8004cfc:	9b08      	ldr	r3, [sp, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dd37      	ble.n	8004d72 <_dtoa_r+0x43a>
 8004d02:	1e7b      	subs	r3, r7, #1
 8004d04:	4620      	mov	r0, r4
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <_dtoa_r+0x52c>)
 8004d0e:	f7fb fbe3 	bl	80004d8 <__aeabi_dmul>
 8004d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d16:	9c08      	ldr	r4, [sp, #32]
 8004d18:	3601      	adds	r6, #1
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7fb fb72 	bl	8000404 <__aeabi_i2d>
 8004d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d24:	f7fb fbd8 	bl	80004d8 <__aeabi_dmul>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e68 <_dtoa_r+0x530>)
 8004d2c:	f7fb fa1e 	bl	800016c <__adddf3>
 8004d30:	4605      	mov	r5, r0
 8004d32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d36:	2c00      	cmp	r4, #0
 8004d38:	f040 809a 	bne.w	8004e70 <_dtoa_r+0x538>
 8004d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	4b4a      	ldr	r3, [pc, #296]	@ (8004e6c <_dtoa_r+0x534>)
 8004d44:	f7fb fa10 	bl	8000168 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4633      	mov	r3, r6
 8004d54:	f7fb fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f040 828e 	bne.w	800527a <_dtoa_r+0x942>
 8004d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d62:	462a      	mov	r2, r5
 8004d64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d68:	f7fb fe28 	bl	80009bc <__aeabi_dcmplt>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f040 8127 	bne.w	8004fc0 <_dtoa_r+0x688>
 8004d72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f2c0 8163 	blt.w	8005048 <_dtoa_r+0x710>
 8004d82:	2f0e      	cmp	r7, #14
 8004d84:	f300 8160 	bgt.w	8005048 <_dtoa_r+0x710>
 8004d88:	4b33      	ldr	r3, [pc, #204]	@ (8004e58 <_dtoa_r+0x520>)
 8004d8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da03      	bge.n	8004da4 <_dtoa_r+0x46c>
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f340 8100 	ble.w	8004fa4 <_dtoa_r+0x66c>
 8004da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004da8:	4656      	mov	r6, sl
 8004daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fcbb 	bl	800072c <__aeabi_ddiv>
 8004db6:	f7fb fe3f 	bl	8000a38 <__aeabi_d2iz>
 8004dba:	4680      	mov	r8, r0
 8004dbc:	f7fb fb22 	bl	8000404 <__aeabi_i2d>
 8004dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dc4:	f7fb fb88 	bl	80004d8 <__aeabi_dmul>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb f9ca 	bl	8000168 <__aeabi_dsub>
 8004dd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004dd8:	9d07      	ldr	r5, [sp, #28]
 8004dda:	f806 4b01 	strb.w	r4, [r6], #1
 8004dde:	eba6 040a 	sub.w	r4, r6, sl
 8004de2:	42a5      	cmp	r5, r4
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	f040 8116 	bne.w	8005018 <_dtoa_r+0x6e0>
 8004dec:	f7fb f9be 	bl	800016c <__adddf3>
 8004df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004df4:	4604      	mov	r4, r0
 8004df6:	460d      	mov	r5, r1
 8004df8:	f7fb fdfe 	bl	80009f8 <__aeabi_dcmpgt>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f040 80f8 	bne.w	8004ff2 <_dtoa_r+0x6ba>
 8004e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8004e0e:	b118      	cbz	r0, 8004e18 <_dtoa_r+0x4e0>
 8004e10:	f018 0f01 	tst.w	r8, #1
 8004e14:	f040 80ed 	bne.w	8004ff2 <_dtoa_r+0x6ba>
 8004e18:	4649      	mov	r1, r9
 8004e1a:	4658      	mov	r0, fp
 8004e1c:	f000 fc92 	bl	8005744 <_Bfree>
 8004e20:	2300      	movs	r3, #0
 8004e22:	7033      	strb	r3, [r6, #0]
 8004e24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004e26:	3701      	adds	r7, #1
 8004e28:	601f      	str	r7, [r3, #0]
 8004e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8320 	beq.w	8005472 <_dtoa_r+0xb3a>
 8004e32:	601e      	str	r6, [r3, #0]
 8004e34:	e31d      	b.n	8005472 <_dtoa_r+0xb3a>
 8004e36:	07e2      	lsls	r2, r4, #31
 8004e38:	d505      	bpl.n	8004e46 <_dtoa_r+0x50e>
 8004e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e3e:	f7fb fb4b 	bl	80004d8 <__aeabi_dmul>
 8004e42:	2301      	movs	r3, #1
 8004e44:	3601      	adds	r6, #1
 8004e46:	1064      	asrs	r4, r4, #1
 8004e48:	3508      	adds	r5, #8
 8004e4a:	e73f      	b.n	8004ccc <_dtoa_r+0x394>
 8004e4c:	2602      	movs	r6, #2
 8004e4e:	e742      	b.n	8004cd6 <_dtoa_r+0x39e>
 8004e50:	9c07      	ldr	r4, [sp, #28]
 8004e52:	9704      	str	r7, [sp, #16]
 8004e54:	e761      	b.n	8004d1a <_dtoa_r+0x3e2>
 8004e56:	bf00      	nop
 8004e58:	08006b98 	.word	0x08006b98
 8004e5c:	08006b70 	.word	0x08006b70
 8004e60:	3ff00000 	.word	0x3ff00000
 8004e64:	40240000 	.word	0x40240000
 8004e68:	401c0000 	.word	0x401c0000
 8004e6c:	40140000 	.word	0x40140000
 8004e70:	4b70      	ldr	r3, [pc, #448]	@ (8005034 <_dtoa_r+0x6fc>)
 8004e72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e7c:	4454      	add	r4, sl
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d045      	beq.n	8004f0e <_dtoa_r+0x5d6>
 8004e82:	2000      	movs	r0, #0
 8004e84:	496c      	ldr	r1, [pc, #432]	@ (8005038 <_dtoa_r+0x700>)
 8004e86:	f7fb fc51 	bl	800072c <__aeabi_ddiv>
 8004e8a:	4633      	mov	r3, r6
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	f7fb f96b 	bl	8000168 <__aeabi_dsub>
 8004e92:	4656      	mov	r6, sl
 8004e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9c:	f7fb fdcc 	bl	8000a38 <__aeabi_d2iz>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	f7fb faaf 	bl	8000404 <__aeabi_i2d>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eae:	f7fb f95b 	bl	8000168 <__aeabi_dsub>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	3530      	adds	r5, #48	@ 0x30
 8004eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ebc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ec0:	f806 5b01 	strb.w	r5, [r6], #1
 8004ec4:	f7fb fd7a 	bl	80009bc <__aeabi_dcmplt>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d163      	bne.n	8004f94 <_dtoa_r+0x65c>
 8004ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	495a      	ldr	r1, [pc, #360]	@ (800503c <_dtoa_r+0x704>)
 8004ed4:	f7fb f948 	bl	8000168 <__aeabi_dsub>
 8004ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004edc:	f7fb fd6e 	bl	80009bc <__aeabi_dcmplt>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	f040 8087 	bne.w	8004ff4 <_dtoa_r+0x6bc>
 8004ee6:	42a6      	cmp	r6, r4
 8004ee8:	f43f af43 	beq.w	8004d72 <_dtoa_r+0x43a>
 8004eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4b53      	ldr	r3, [pc, #332]	@ (8005040 <_dtoa_r+0x708>)
 8004ef4:	f7fb faf0 	bl	80004d8 <__aeabi_dmul>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f02:	4b4f      	ldr	r3, [pc, #316]	@ (8005040 <_dtoa_r+0x708>)
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f0c:	e7c4      	b.n	8004e98 <_dtoa_r+0x560>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	4656      	mov	r6, sl
 8004f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f22:	f7fb fd89 	bl	8000a38 <__aeabi_d2iz>
 8004f26:	4605      	mov	r5, r0
 8004f28:	f7fb fa6c 	bl	8000404 <__aeabi_i2d>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f34:	f7fb f918 	bl	8000168 <__aeabi_dsub>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	3530      	adds	r5, #48	@ 0x30
 8004f3e:	f806 5b01 	strb.w	r5, [r6], #1
 8004f42:	42a6      	cmp	r6, r4
 8004f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	d124      	bne.n	8004f98 <_dtoa_r+0x660>
 8004f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f52:	4b39      	ldr	r3, [pc, #228]	@ (8005038 <_dtoa_r+0x700>)
 8004f54:	f7fb f90a 	bl	800016c <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f60:	f7fb fd4a 	bl	80009f8 <__aeabi_dcmpgt>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d145      	bne.n	8004ff4 <_dtoa_r+0x6bc>
 8004f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	4932      	ldr	r1, [pc, #200]	@ (8005038 <_dtoa_r+0x700>)
 8004f70:	f7fb f8fa 	bl	8000168 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f7c:	f7fb fd1e 	bl	80009bc <__aeabi_dcmplt>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	f43f aef6 	beq.w	8004d72 <_dtoa_r+0x43a>
 8004f86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f88:	1e73      	subs	r3, r6, #1
 8004f8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f90:	2b30      	cmp	r3, #48	@ 0x30
 8004f92:	d0f8      	beq.n	8004f86 <_dtoa_r+0x64e>
 8004f94:	9f04      	ldr	r7, [sp, #16]
 8004f96:	e73f      	b.n	8004e18 <_dtoa_r+0x4e0>
 8004f98:	4b29      	ldr	r3, [pc, #164]	@ (8005040 <_dtoa_r+0x708>)
 8004f9a:	f7fb fa9d 	bl	80004d8 <__aeabi_dmul>
 8004f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fa2:	e7bc      	b.n	8004f1e <_dtoa_r+0x5e6>
 8004fa4:	d10c      	bne.n	8004fc0 <_dtoa_r+0x688>
 8004fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004faa:	2200      	movs	r2, #0
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <_dtoa_r+0x70c>)
 8004fae:	f7fb fa93 	bl	80004d8 <__aeabi_dmul>
 8004fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb6:	f7fb fd15 	bl	80009e4 <__aeabi_dcmpge>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f000 815b 	beq.w	8005276 <_dtoa_r+0x93e>
 8004fc0:	2400      	movs	r4, #0
 8004fc2:	4625      	mov	r5, r4
 8004fc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fc6:	4656      	mov	r6, sl
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	2700      	movs	r7, #0
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f000 fbb7 	bl	8005744 <_Bfree>
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	d0dc      	beq.n	8004f94 <_dtoa_r+0x65c>
 8004fda:	b12f      	cbz	r7, 8004fe8 <_dtoa_r+0x6b0>
 8004fdc:	42af      	cmp	r7, r5
 8004fde:	d003      	beq.n	8004fe8 <_dtoa_r+0x6b0>
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fbae 	bl	8005744 <_Bfree>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4658      	mov	r0, fp
 8004fec:	f000 fbaa 	bl	8005744 <_Bfree>
 8004ff0:	e7d0      	b.n	8004f94 <_dtoa_r+0x65c>
 8004ff2:	9704      	str	r7, [sp, #16]
 8004ff4:	4633      	mov	r3, r6
 8004ff6:	461e      	mov	r6, r3
 8004ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ffc:	2a39      	cmp	r2, #57	@ 0x39
 8004ffe:	d107      	bne.n	8005010 <_dtoa_r+0x6d8>
 8005000:	459a      	cmp	sl, r3
 8005002:	d1f8      	bne.n	8004ff6 <_dtoa_r+0x6be>
 8005004:	9a04      	ldr	r2, [sp, #16]
 8005006:	3201      	adds	r2, #1
 8005008:	9204      	str	r2, [sp, #16]
 800500a:	2230      	movs	r2, #48	@ 0x30
 800500c:	f88a 2000 	strb.w	r2, [sl]
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	3201      	adds	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e7bd      	b.n	8004f94 <_dtoa_r+0x65c>
 8005018:	2200      	movs	r2, #0
 800501a:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <_dtoa_r+0x708>)
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	f7fb fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800502c:	2800      	cmp	r0, #0
 800502e:	f43f aebc 	beq.w	8004daa <_dtoa_r+0x472>
 8005032:	e6f1      	b.n	8004e18 <_dtoa_r+0x4e0>
 8005034:	08006b98 	.word	0x08006b98
 8005038:	3fe00000 	.word	0x3fe00000
 800503c:	3ff00000 	.word	0x3ff00000
 8005040:	40240000 	.word	0x40240000
 8005044:	40140000 	.word	0x40140000
 8005048:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800504a:	2a00      	cmp	r2, #0
 800504c:	f000 80db 	beq.w	8005206 <_dtoa_r+0x8ce>
 8005050:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005052:	2a01      	cmp	r2, #1
 8005054:	f300 80bf 	bgt.w	80051d6 <_dtoa_r+0x89e>
 8005058:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800505a:	2a00      	cmp	r2, #0
 800505c:	f000 80b7 	beq.w	80051ce <_dtoa_r+0x896>
 8005060:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005064:	4646      	mov	r6, r8
 8005066:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800506a:	2101      	movs	r1, #1
 800506c:	441a      	add	r2, r3
 800506e:	4658      	mov	r0, fp
 8005070:	4498      	add	r8, r3
 8005072:	9209      	str	r2, [sp, #36]	@ 0x24
 8005074:	f000 fc1a 	bl	80058ac <__i2b>
 8005078:	4605      	mov	r5, r0
 800507a:	b15e      	cbz	r6, 8005094 <_dtoa_r+0x75c>
 800507c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	dd08      	ble.n	8005094 <_dtoa_r+0x75c>
 8005082:	42b3      	cmp	r3, r6
 8005084:	bfa8      	it	ge
 8005086:	4633      	movge	r3, r6
 8005088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800508a:	eba8 0803 	sub.w	r8, r8, r3
 800508e:	1af6      	subs	r6, r6, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	9309      	str	r3, [sp, #36]	@ 0x24
 8005094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005096:	b1f3      	cbz	r3, 80050d6 <_dtoa_r+0x79e>
 8005098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80b7 	beq.w	800520e <_dtoa_r+0x8d6>
 80050a0:	b18c      	cbz	r4, 80050c6 <_dtoa_r+0x78e>
 80050a2:	4629      	mov	r1, r5
 80050a4:	4622      	mov	r2, r4
 80050a6:	4658      	mov	r0, fp
 80050a8:	f000 fcbe 	bl	8005a28 <__pow5mult>
 80050ac:	464a      	mov	r2, r9
 80050ae:	4601      	mov	r1, r0
 80050b0:	4605      	mov	r5, r0
 80050b2:	4658      	mov	r0, fp
 80050b4:	f000 fc10 	bl	80058d8 <__multiply>
 80050b8:	4649      	mov	r1, r9
 80050ba:	9004      	str	r0, [sp, #16]
 80050bc:	4658      	mov	r0, fp
 80050be:	f000 fb41 	bl	8005744 <_Bfree>
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	4699      	mov	r9, r3
 80050c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050c8:	1b1a      	subs	r2, r3, r4
 80050ca:	d004      	beq.n	80050d6 <_dtoa_r+0x79e>
 80050cc:	4649      	mov	r1, r9
 80050ce:	4658      	mov	r0, fp
 80050d0:	f000 fcaa 	bl	8005a28 <__pow5mult>
 80050d4:	4681      	mov	r9, r0
 80050d6:	2101      	movs	r1, #1
 80050d8:	4658      	mov	r0, fp
 80050da:	f000 fbe7 	bl	80058ac <__i2b>
 80050de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050e0:	4604      	mov	r4, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 81c9 	beq.w	800547a <_dtoa_r+0xb42>
 80050e8:	461a      	mov	r2, r3
 80050ea:	4601      	mov	r1, r0
 80050ec:	4658      	mov	r0, fp
 80050ee:	f000 fc9b 	bl	8005a28 <__pow5mult>
 80050f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050f4:	4604      	mov	r4, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f300 808f 	bgt.w	800521a <_dtoa_r+0x8e2>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 8087 	bne.w	8005212 <_dtoa_r+0x8da>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 8083 	bne.w	8005216 <_dtoa_r+0x8de>
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005116:	0d1b      	lsrs	r3, r3, #20
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	b12b      	cbz	r3, 8005128 <_dtoa_r+0x7f0>
 800511c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	3301      	adds	r3, #1
 8005124:	9309      	str	r3, [sp, #36]	@ 0x24
 8005126:	2301      	movs	r3, #1
 8005128:	930a      	str	r3, [sp, #40]	@ 0x28
 800512a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 81aa 	beq.w	8005486 <_dtoa_r+0xb4e>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005138:	6918      	ldr	r0, [r3, #16]
 800513a:	f000 fb6b 	bl	8005814 <__hi0bits>
 800513e:	f1c0 0020 	rsb	r0, r0, #32
 8005142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005144:	4418      	add	r0, r3
 8005146:	f010 001f 	ands.w	r0, r0, #31
 800514a:	d071      	beq.n	8005230 <_dtoa_r+0x8f8>
 800514c:	f1c0 0320 	rsb	r3, r0, #32
 8005150:	2b04      	cmp	r3, #4
 8005152:	dd65      	ble.n	8005220 <_dtoa_r+0x8e8>
 8005154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005156:	f1c0 001c 	rsb	r0, r0, #28
 800515a:	4403      	add	r3, r0
 800515c:	4480      	add	r8, r0
 800515e:	4406      	add	r6, r0
 8005160:	9309      	str	r3, [sp, #36]	@ 0x24
 8005162:	f1b8 0f00 	cmp.w	r8, #0
 8005166:	dd05      	ble.n	8005174 <_dtoa_r+0x83c>
 8005168:	4649      	mov	r1, r9
 800516a:	4642      	mov	r2, r8
 800516c:	4658      	mov	r0, fp
 800516e:	f000 fcb5 	bl	8005adc <__lshift>
 8005172:	4681      	mov	r9, r0
 8005174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	dd05      	ble.n	8005186 <_dtoa_r+0x84e>
 800517a:	4621      	mov	r1, r4
 800517c:	461a      	mov	r2, r3
 800517e:	4658      	mov	r0, fp
 8005180:	f000 fcac 	bl	8005adc <__lshift>
 8005184:	4604      	mov	r4, r0
 8005186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d053      	beq.n	8005234 <_dtoa_r+0x8fc>
 800518c:	4621      	mov	r1, r4
 800518e:	4648      	mov	r0, r9
 8005190:	f000 fd10 	bl	8005bb4 <__mcmp>
 8005194:	2800      	cmp	r0, #0
 8005196:	da4d      	bge.n	8005234 <_dtoa_r+0x8fc>
 8005198:	1e7b      	subs	r3, r7, #1
 800519a:	4649      	mov	r1, r9
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	220a      	movs	r2, #10
 80051a0:	2300      	movs	r3, #0
 80051a2:	4658      	mov	r0, fp
 80051a4:	f000 faf0 	bl	8005788 <__multadd>
 80051a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051aa:	4681      	mov	r9, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 816c 	beq.w	800548a <_dtoa_r+0xb52>
 80051b2:	2300      	movs	r3, #0
 80051b4:	4629      	mov	r1, r5
 80051b6:	220a      	movs	r2, #10
 80051b8:	4658      	mov	r0, fp
 80051ba:	f000 fae5 	bl	8005788 <__multadd>
 80051be:	9b08      	ldr	r3, [sp, #32]
 80051c0:	4605      	mov	r5, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dc61      	bgt.n	800528a <_dtoa_r+0x952>
 80051c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	dc3b      	bgt.n	8005244 <_dtoa_r+0x90c>
 80051cc:	e05d      	b.n	800528a <_dtoa_r+0x952>
 80051ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80051d4:	e746      	b.n	8005064 <_dtoa_r+0x72c>
 80051d6:	9b07      	ldr	r3, [sp, #28]
 80051d8:	1e5c      	subs	r4, r3, #1
 80051da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051dc:	42a3      	cmp	r3, r4
 80051de:	bfbf      	itttt	lt
 80051e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80051e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80051e4:	1ae3      	sublt	r3, r4, r3
 80051e6:	18d2      	addlt	r2, r2, r3
 80051e8:	bfa8      	it	ge
 80051ea:	1b1c      	subge	r4, r3, r4
 80051ec:	9b07      	ldr	r3, [sp, #28]
 80051ee:	bfbe      	ittt	lt
 80051f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80051f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80051f4:	2400      	movlt	r4, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfb5      	itete	lt
 80051fa:	eba8 0603 	sublt.w	r6, r8, r3
 80051fe:	4646      	movge	r6, r8
 8005200:	2300      	movlt	r3, #0
 8005202:	9b07      	ldrge	r3, [sp, #28]
 8005204:	e730      	b.n	8005068 <_dtoa_r+0x730>
 8005206:	4646      	mov	r6, r8
 8005208:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800520a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800520c:	e735      	b.n	800507a <_dtoa_r+0x742>
 800520e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005210:	e75c      	b.n	80050cc <_dtoa_r+0x794>
 8005212:	2300      	movs	r3, #0
 8005214:	e788      	b.n	8005128 <_dtoa_r+0x7f0>
 8005216:	9b02      	ldr	r3, [sp, #8]
 8005218:	e786      	b.n	8005128 <_dtoa_r+0x7f0>
 800521a:	2300      	movs	r3, #0
 800521c:	930a      	str	r3, [sp, #40]	@ 0x28
 800521e:	e788      	b.n	8005132 <_dtoa_r+0x7fa>
 8005220:	d09f      	beq.n	8005162 <_dtoa_r+0x82a>
 8005222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005224:	331c      	adds	r3, #28
 8005226:	441a      	add	r2, r3
 8005228:	4498      	add	r8, r3
 800522a:	441e      	add	r6, r3
 800522c:	9209      	str	r2, [sp, #36]	@ 0x24
 800522e:	e798      	b.n	8005162 <_dtoa_r+0x82a>
 8005230:	4603      	mov	r3, r0
 8005232:	e7f6      	b.n	8005222 <_dtoa_r+0x8ea>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	9704      	str	r7, [sp, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc20      	bgt.n	800527e <_dtoa_r+0x946>
 800523c:	9308      	str	r3, [sp, #32]
 800523e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005240:	2b02      	cmp	r3, #2
 8005242:	dd1e      	ble.n	8005282 <_dtoa_r+0x94a>
 8005244:	9b08      	ldr	r3, [sp, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f47f aebc 	bne.w	8004fc4 <_dtoa_r+0x68c>
 800524c:	4621      	mov	r1, r4
 800524e:	2205      	movs	r2, #5
 8005250:	4658      	mov	r0, fp
 8005252:	f000 fa99 	bl	8005788 <__multadd>
 8005256:	4601      	mov	r1, r0
 8005258:	4604      	mov	r4, r0
 800525a:	4648      	mov	r0, r9
 800525c:	f000 fcaa 	bl	8005bb4 <__mcmp>
 8005260:	2800      	cmp	r0, #0
 8005262:	f77f aeaf 	ble.w	8004fc4 <_dtoa_r+0x68c>
 8005266:	2331      	movs	r3, #49	@ 0x31
 8005268:	4656      	mov	r6, sl
 800526a:	f806 3b01 	strb.w	r3, [r6], #1
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	3301      	adds	r3, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	e6aa      	b.n	8004fcc <_dtoa_r+0x694>
 8005276:	9c07      	ldr	r4, [sp, #28]
 8005278:	9704      	str	r7, [sp, #16]
 800527a:	4625      	mov	r5, r4
 800527c:	e7f3      	b.n	8005266 <_dtoa_r+0x92e>
 800527e:	9b07      	ldr	r3, [sp, #28]
 8005280:	9308      	str	r3, [sp, #32]
 8005282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8104 	beq.w	8005492 <_dtoa_r+0xb5a>
 800528a:	2e00      	cmp	r6, #0
 800528c:	dd05      	ble.n	800529a <_dtoa_r+0x962>
 800528e:	4629      	mov	r1, r5
 8005290:	4632      	mov	r2, r6
 8005292:	4658      	mov	r0, fp
 8005294:	f000 fc22 	bl	8005adc <__lshift>
 8005298:	4605      	mov	r5, r0
 800529a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05a      	beq.n	8005356 <_dtoa_r+0xa1e>
 80052a0:	4658      	mov	r0, fp
 80052a2:	6869      	ldr	r1, [r5, #4]
 80052a4:	f000 fa0e 	bl	80056c4 <_Balloc>
 80052a8:	4606      	mov	r6, r0
 80052aa:	b928      	cbnz	r0, 80052b8 <_dtoa_r+0x980>
 80052ac:	4602      	mov	r2, r0
 80052ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052b2:	4b83      	ldr	r3, [pc, #524]	@ (80054c0 <_dtoa_r+0xb88>)
 80052b4:	f7ff bb54 	b.w	8004960 <_dtoa_r+0x28>
 80052b8:	692a      	ldr	r2, [r5, #16]
 80052ba:	f105 010c 	add.w	r1, r5, #12
 80052be:	3202      	adds	r2, #2
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	300c      	adds	r0, #12
 80052c4:	f7ff faa1 	bl	800480a <memcpy>
 80052c8:	2201      	movs	r2, #1
 80052ca:	4631      	mov	r1, r6
 80052cc:	4658      	mov	r0, fp
 80052ce:	f000 fc05 	bl	8005adc <__lshift>
 80052d2:	462f      	mov	r7, r5
 80052d4:	4605      	mov	r5, r0
 80052d6:	f10a 0301 	add.w	r3, sl, #1
 80052da:	9307      	str	r3, [sp, #28]
 80052dc:	9b08      	ldr	r3, [sp, #32]
 80052de:	4453      	add	r3, sl
 80052e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ea:	9b07      	ldr	r3, [sp, #28]
 80052ec:	4621      	mov	r1, r4
 80052ee:	3b01      	subs	r3, #1
 80052f0:	4648      	mov	r0, r9
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	f7ff fa97 	bl	8004826 <quorem>
 80052f8:	4639      	mov	r1, r7
 80052fa:	9008      	str	r0, [sp, #32]
 80052fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005300:	4648      	mov	r0, r9
 8005302:	f000 fc57 	bl	8005bb4 <__mcmp>
 8005306:	462a      	mov	r2, r5
 8005308:	9009      	str	r0, [sp, #36]	@ 0x24
 800530a:	4621      	mov	r1, r4
 800530c:	4658      	mov	r0, fp
 800530e:	f000 fc6d 	bl	8005bec <__mdiff>
 8005312:	68c2      	ldr	r2, [r0, #12]
 8005314:	4606      	mov	r6, r0
 8005316:	bb02      	cbnz	r2, 800535a <_dtoa_r+0xa22>
 8005318:	4601      	mov	r1, r0
 800531a:	4648      	mov	r0, r9
 800531c:	f000 fc4a 	bl	8005bb4 <__mcmp>
 8005320:	4602      	mov	r2, r0
 8005322:	4631      	mov	r1, r6
 8005324:	4658      	mov	r0, fp
 8005326:	920c      	str	r2, [sp, #48]	@ 0x30
 8005328:	f000 fa0c 	bl	8005744 <_Bfree>
 800532c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800532e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005330:	9e07      	ldr	r6, [sp, #28]
 8005332:	ea43 0102 	orr.w	r1, r3, r2
 8005336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005338:	4319      	orrs	r1, r3
 800533a:	d110      	bne.n	800535e <_dtoa_r+0xa26>
 800533c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005340:	d029      	beq.n	8005396 <_dtoa_r+0xa5e>
 8005342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	dd02      	ble.n	800534e <_dtoa_r+0xa16>
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	f883 8000 	strb.w	r8, [r3]
 8005354:	e63b      	b.n	8004fce <_dtoa_r+0x696>
 8005356:	4628      	mov	r0, r5
 8005358:	e7bb      	b.n	80052d2 <_dtoa_r+0x99a>
 800535a:	2201      	movs	r2, #1
 800535c:	e7e1      	b.n	8005322 <_dtoa_r+0x9ea>
 800535e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	db04      	blt.n	800536e <_dtoa_r+0xa36>
 8005364:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005366:	430b      	orrs	r3, r1
 8005368:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800536a:	430b      	orrs	r3, r1
 800536c:	d120      	bne.n	80053b0 <_dtoa_r+0xa78>
 800536e:	2a00      	cmp	r2, #0
 8005370:	dded      	ble.n	800534e <_dtoa_r+0xa16>
 8005372:	4649      	mov	r1, r9
 8005374:	2201      	movs	r2, #1
 8005376:	4658      	mov	r0, fp
 8005378:	f000 fbb0 	bl	8005adc <__lshift>
 800537c:	4621      	mov	r1, r4
 800537e:	4681      	mov	r9, r0
 8005380:	f000 fc18 	bl	8005bb4 <__mcmp>
 8005384:	2800      	cmp	r0, #0
 8005386:	dc03      	bgt.n	8005390 <_dtoa_r+0xa58>
 8005388:	d1e1      	bne.n	800534e <_dtoa_r+0xa16>
 800538a:	f018 0f01 	tst.w	r8, #1
 800538e:	d0de      	beq.n	800534e <_dtoa_r+0xa16>
 8005390:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005394:	d1d8      	bne.n	8005348 <_dtoa_r+0xa10>
 8005396:	2339      	movs	r3, #57	@ 0x39
 8005398:	9a02      	ldr	r2, [sp, #8]
 800539a:	7013      	strb	r3, [r2, #0]
 800539c:	4633      	mov	r3, r6
 800539e:	461e      	mov	r6, r3
 80053a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	2a39      	cmp	r2, #57	@ 0x39
 80053a8:	d052      	beq.n	8005450 <_dtoa_r+0xb18>
 80053aa:	3201      	adds	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e60e      	b.n	8004fce <_dtoa_r+0x696>
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	dd07      	ble.n	80053c4 <_dtoa_r+0xa8c>
 80053b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053b8:	d0ed      	beq.n	8005396 <_dtoa_r+0xa5e>
 80053ba:	9a02      	ldr	r2, [sp, #8]
 80053bc:	f108 0301 	add.w	r3, r8, #1
 80053c0:	7013      	strb	r3, [r2, #0]
 80053c2:	e604      	b.n	8004fce <_dtoa_r+0x696>
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80053cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d028      	beq.n	8005424 <_dtoa_r+0xaec>
 80053d2:	4649      	mov	r1, r9
 80053d4:	2300      	movs	r3, #0
 80053d6:	220a      	movs	r2, #10
 80053d8:	4658      	mov	r0, fp
 80053da:	f000 f9d5 	bl	8005788 <__multadd>
 80053de:	42af      	cmp	r7, r5
 80053e0:	4681      	mov	r9, r0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	f04f 020a 	mov.w	r2, #10
 80053ea:	4639      	mov	r1, r7
 80053ec:	4658      	mov	r0, fp
 80053ee:	d107      	bne.n	8005400 <_dtoa_r+0xac8>
 80053f0:	f000 f9ca 	bl	8005788 <__multadd>
 80053f4:	4607      	mov	r7, r0
 80053f6:	4605      	mov	r5, r0
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	3301      	adds	r3, #1
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	e774      	b.n	80052ea <_dtoa_r+0x9b2>
 8005400:	f000 f9c2 	bl	8005788 <__multadd>
 8005404:	4629      	mov	r1, r5
 8005406:	4607      	mov	r7, r0
 8005408:	2300      	movs	r3, #0
 800540a:	220a      	movs	r2, #10
 800540c:	4658      	mov	r0, fp
 800540e:	f000 f9bb 	bl	8005788 <__multadd>
 8005412:	4605      	mov	r5, r0
 8005414:	e7f0      	b.n	80053f8 <_dtoa_r+0xac0>
 8005416:	9b08      	ldr	r3, [sp, #32]
 8005418:	2700      	movs	r7, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	bfcc      	ite	gt
 800541e:	461e      	movgt	r6, r3
 8005420:	2601      	movle	r6, #1
 8005422:	4456      	add	r6, sl
 8005424:	4649      	mov	r1, r9
 8005426:	2201      	movs	r2, #1
 8005428:	4658      	mov	r0, fp
 800542a:	f000 fb57 	bl	8005adc <__lshift>
 800542e:	4621      	mov	r1, r4
 8005430:	4681      	mov	r9, r0
 8005432:	f000 fbbf 	bl	8005bb4 <__mcmp>
 8005436:	2800      	cmp	r0, #0
 8005438:	dcb0      	bgt.n	800539c <_dtoa_r+0xa64>
 800543a:	d102      	bne.n	8005442 <_dtoa_r+0xb0a>
 800543c:	f018 0f01 	tst.w	r8, #1
 8005440:	d1ac      	bne.n	800539c <_dtoa_r+0xa64>
 8005442:	4633      	mov	r3, r6
 8005444:	461e      	mov	r6, r3
 8005446:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800544a:	2a30      	cmp	r2, #48	@ 0x30
 800544c:	d0fa      	beq.n	8005444 <_dtoa_r+0xb0c>
 800544e:	e5be      	b.n	8004fce <_dtoa_r+0x696>
 8005450:	459a      	cmp	sl, r3
 8005452:	d1a4      	bne.n	800539e <_dtoa_r+0xa66>
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	3301      	adds	r3, #1
 8005458:	9304      	str	r3, [sp, #16]
 800545a:	2331      	movs	r3, #49	@ 0x31
 800545c:	f88a 3000 	strb.w	r3, [sl]
 8005460:	e5b5      	b.n	8004fce <_dtoa_r+0x696>
 8005462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005464:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80054c4 <_dtoa_r+0xb8c>
 8005468:	b11b      	cbz	r3, 8005472 <_dtoa_r+0xb3a>
 800546a:	f10a 0308 	add.w	r3, sl, #8
 800546e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4650      	mov	r0, sl
 8005474:	b017      	add	sp, #92	@ 0x5c
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800547c:	2b01      	cmp	r3, #1
 800547e:	f77f ae3d 	ble.w	80050fc <_dtoa_r+0x7c4>
 8005482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005484:	930a      	str	r3, [sp, #40]	@ 0x28
 8005486:	2001      	movs	r0, #1
 8005488:	e65b      	b.n	8005142 <_dtoa_r+0x80a>
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f77f aed6 	ble.w	800523e <_dtoa_r+0x906>
 8005492:	4656      	mov	r6, sl
 8005494:	4621      	mov	r1, r4
 8005496:	4648      	mov	r0, r9
 8005498:	f7ff f9c5 	bl	8004826 <quorem>
 800549c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	f806 8b01 	strb.w	r8, [r6], #1
 80054a6:	eba6 020a 	sub.w	r2, r6, sl
 80054aa:	4293      	cmp	r3, r2
 80054ac:	ddb3      	ble.n	8005416 <_dtoa_r+0xade>
 80054ae:	4649      	mov	r1, r9
 80054b0:	2300      	movs	r3, #0
 80054b2:	220a      	movs	r2, #10
 80054b4:	4658      	mov	r0, fp
 80054b6:	f000 f967 	bl	8005788 <__multadd>
 80054ba:	4681      	mov	r9, r0
 80054bc:	e7ea      	b.n	8005494 <_dtoa_r+0xb5c>
 80054be:	bf00      	nop
 80054c0:	08006af3 	.word	0x08006af3
 80054c4:	08006a77 	.word	0x08006a77

080054c8 <_free_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4605      	mov	r5, r0
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d040      	beq.n	8005552 <_free_r+0x8a>
 80054d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d4:	1f0c      	subs	r4, r1, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bfb8      	it	lt
 80054da:	18e4      	addlt	r4, r4, r3
 80054dc:	f000 f8e6 	bl	80056ac <__malloc_lock>
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <_free_r+0x8c>)
 80054e2:	6813      	ldr	r3, [r2, #0]
 80054e4:	b933      	cbnz	r3, 80054f4 <_free_r+0x2c>
 80054e6:	6063      	str	r3, [r4, #4]
 80054e8:	6014      	str	r4, [r2, #0]
 80054ea:	4628      	mov	r0, r5
 80054ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f0:	f000 b8e2 	b.w	80056b8 <__malloc_unlock>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d908      	bls.n	800550a <_free_r+0x42>
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	1821      	adds	r1, r4, r0
 80054fc:	428b      	cmp	r3, r1
 80054fe:	bf01      	itttt	eq
 8005500:	6819      	ldreq	r1, [r3, #0]
 8005502:	685b      	ldreq	r3, [r3, #4]
 8005504:	1809      	addeq	r1, r1, r0
 8005506:	6021      	streq	r1, [r4, #0]
 8005508:	e7ed      	b.n	80054e6 <_free_r+0x1e>
 800550a:	461a      	mov	r2, r3
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b10b      	cbz	r3, 8005514 <_free_r+0x4c>
 8005510:	42a3      	cmp	r3, r4
 8005512:	d9fa      	bls.n	800550a <_free_r+0x42>
 8005514:	6811      	ldr	r1, [r2, #0]
 8005516:	1850      	adds	r0, r2, r1
 8005518:	42a0      	cmp	r0, r4
 800551a:	d10b      	bne.n	8005534 <_free_r+0x6c>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	4401      	add	r1, r0
 8005520:	1850      	adds	r0, r2, r1
 8005522:	4283      	cmp	r3, r0
 8005524:	6011      	str	r1, [r2, #0]
 8005526:	d1e0      	bne.n	80054ea <_free_r+0x22>
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4408      	add	r0, r1
 800552e:	6010      	str	r0, [r2, #0]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	e7da      	b.n	80054ea <_free_r+0x22>
 8005534:	d902      	bls.n	800553c <_free_r+0x74>
 8005536:	230c      	movs	r3, #12
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	e7d6      	b.n	80054ea <_free_r+0x22>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	1821      	adds	r1, r4, r0
 8005540:	428b      	cmp	r3, r1
 8005542:	bf01      	itttt	eq
 8005544:	6819      	ldreq	r1, [r3, #0]
 8005546:	685b      	ldreq	r3, [r3, #4]
 8005548:	1809      	addeq	r1, r1, r0
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6054      	str	r4, [r2, #4]
 8005550:	e7cb      	b.n	80054ea <_free_r+0x22>
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200003e0 	.word	0x200003e0

08005558 <malloc>:
 8005558:	4b02      	ldr	r3, [pc, #8]	@ (8005564 <malloc+0xc>)
 800555a:	4601      	mov	r1, r0
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f000 b825 	b.w	80055ac <_malloc_r>
 8005562:	bf00      	nop
 8005564:	20000018 	.word	0x20000018

08005568 <sbrk_aligned>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0f      	ldr	r6, [pc, #60]	@ (80055a8 <sbrk_aligned+0x40>)
 800556c:	460c      	mov	r4, r1
 800556e:	6831      	ldr	r1, [r6, #0]
 8005570:	4605      	mov	r5, r0
 8005572:	b911      	cbnz	r1, 800557a <sbrk_aligned+0x12>
 8005574:	f000 fe40 	bl	80061f8 <_sbrk_r>
 8005578:	6030      	str	r0, [r6, #0]
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fe3b 	bl	80061f8 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d103      	bne.n	800558e <sbrk_aligned+0x26>
 8005586:	f04f 34ff 	mov.w	r4, #4294967295
 800558a:	4620      	mov	r0, r4
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	1cc4      	adds	r4, r0, #3
 8005590:	f024 0403 	bic.w	r4, r4, #3
 8005594:	42a0      	cmp	r0, r4
 8005596:	d0f8      	beq.n	800558a <sbrk_aligned+0x22>
 8005598:	1a21      	subs	r1, r4, r0
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fe2c 	bl	80061f8 <_sbrk_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d1f2      	bne.n	800558a <sbrk_aligned+0x22>
 80055a4:	e7ef      	b.n	8005586 <sbrk_aligned+0x1e>
 80055a6:	bf00      	nop
 80055a8:	200003dc 	.word	0x200003dc

080055ac <_malloc_r>:
 80055ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b0:	1ccd      	adds	r5, r1, #3
 80055b2:	f025 0503 	bic.w	r5, r5, #3
 80055b6:	3508      	adds	r5, #8
 80055b8:	2d0c      	cmp	r5, #12
 80055ba:	bf38      	it	cc
 80055bc:	250c      	movcc	r5, #12
 80055be:	2d00      	cmp	r5, #0
 80055c0:	4606      	mov	r6, r0
 80055c2:	db01      	blt.n	80055c8 <_malloc_r+0x1c>
 80055c4:	42a9      	cmp	r1, r5
 80055c6:	d904      	bls.n	80055d2 <_malloc_r+0x26>
 80055c8:	230c      	movs	r3, #12
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	2000      	movs	r0, #0
 80055ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056a8 <_malloc_r+0xfc>
 80055d6:	f000 f869 	bl	80056ac <__malloc_lock>
 80055da:	f8d8 3000 	ldr.w	r3, [r8]
 80055de:	461c      	mov	r4, r3
 80055e0:	bb44      	cbnz	r4, 8005634 <_malloc_r+0x88>
 80055e2:	4629      	mov	r1, r5
 80055e4:	4630      	mov	r0, r6
 80055e6:	f7ff ffbf 	bl	8005568 <sbrk_aligned>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	4604      	mov	r4, r0
 80055ee:	d158      	bne.n	80056a2 <_malloc_r+0xf6>
 80055f0:	f8d8 4000 	ldr.w	r4, [r8]
 80055f4:	4627      	mov	r7, r4
 80055f6:	2f00      	cmp	r7, #0
 80055f8:	d143      	bne.n	8005682 <_malloc_r+0xd6>
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	d04b      	beq.n	8005696 <_malloc_r+0xea>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	4639      	mov	r1, r7
 8005602:	4630      	mov	r0, r6
 8005604:	eb04 0903 	add.w	r9, r4, r3
 8005608:	f000 fdf6 	bl	80061f8 <_sbrk_r>
 800560c:	4581      	cmp	r9, r0
 800560e:	d142      	bne.n	8005696 <_malloc_r+0xea>
 8005610:	6821      	ldr	r1, [r4, #0]
 8005612:	4630      	mov	r0, r6
 8005614:	1a6d      	subs	r5, r5, r1
 8005616:	4629      	mov	r1, r5
 8005618:	f7ff ffa6 	bl	8005568 <sbrk_aligned>
 800561c:	3001      	adds	r0, #1
 800561e:	d03a      	beq.n	8005696 <_malloc_r+0xea>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	442b      	add	r3, r5
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	f8d8 3000 	ldr.w	r3, [r8]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	bb62      	cbnz	r2, 8005688 <_malloc_r+0xdc>
 800562e:	f8c8 7000 	str.w	r7, [r8]
 8005632:	e00f      	b.n	8005654 <_malloc_r+0xa8>
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	1b52      	subs	r2, r2, r5
 8005638:	d420      	bmi.n	800567c <_malloc_r+0xd0>
 800563a:	2a0b      	cmp	r2, #11
 800563c:	d917      	bls.n	800566e <_malloc_r+0xc2>
 800563e:	1961      	adds	r1, r4, r5
 8005640:	42a3      	cmp	r3, r4
 8005642:	6025      	str	r5, [r4, #0]
 8005644:	bf18      	it	ne
 8005646:	6059      	strne	r1, [r3, #4]
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	bf08      	it	eq
 800564c:	f8c8 1000 	streq.w	r1, [r8]
 8005650:	5162      	str	r2, [r4, r5]
 8005652:	604b      	str	r3, [r1, #4]
 8005654:	4630      	mov	r0, r6
 8005656:	f000 f82f 	bl	80056b8 <__malloc_unlock>
 800565a:	f104 000b 	add.w	r0, r4, #11
 800565e:	1d23      	adds	r3, r4, #4
 8005660:	f020 0007 	bic.w	r0, r0, #7
 8005664:	1ac2      	subs	r2, r0, r3
 8005666:	bf1c      	itt	ne
 8005668:	1a1b      	subne	r3, r3, r0
 800566a:	50a3      	strne	r3, [r4, r2]
 800566c:	e7af      	b.n	80055ce <_malloc_r+0x22>
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	42a3      	cmp	r3, r4
 8005672:	bf0c      	ite	eq
 8005674:	f8c8 2000 	streq.w	r2, [r8]
 8005678:	605a      	strne	r2, [r3, #4]
 800567a:	e7eb      	b.n	8005654 <_malloc_r+0xa8>
 800567c:	4623      	mov	r3, r4
 800567e:	6864      	ldr	r4, [r4, #4]
 8005680:	e7ae      	b.n	80055e0 <_malloc_r+0x34>
 8005682:	463c      	mov	r4, r7
 8005684:	687f      	ldr	r7, [r7, #4]
 8005686:	e7b6      	b.n	80055f6 <_malloc_r+0x4a>
 8005688:	461a      	mov	r2, r3
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	42a3      	cmp	r3, r4
 800568e:	d1fb      	bne.n	8005688 <_malloc_r+0xdc>
 8005690:	2300      	movs	r3, #0
 8005692:	6053      	str	r3, [r2, #4]
 8005694:	e7de      	b.n	8005654 <_malloc_r+0xa8>
 8005696:	230c      	movs	r3, #12
 8005698:	4630      	mov	r0, r6
 800569a:	6033      	str	r3, [r6, #0]
 800569c:	f000 f80c 	bl	80056b8 <__malloc_unlock>
 80056a0:	e794      	b.n	80055cc <_malloc_r+0x20>
 80056a2:	6005      	str	r5, [r0, #0]
 80056a4:	e7d6      	b.n	8005654 <_malloc_r+0xa8>
 80056a6:	bf00      	nop
 80056a8:	200003e0 	.word	0x200003e0

080056ac <__malloc_lock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <__malloc_lock+0x8>)
 80056ae:	f7ff b89c 	b.w	80047ea <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	200003d8 	.word	0x200003d8

080056b8 <__malloc_unlock>:
 80056b8:	4801      	ldr	r0, [pc, #4]	@ (80056c0 <__malloc_unlock+0x8>)
 80056ba:	f7ff b897 	b.w	80047ec <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	200003d8 	.word	0x200003d8

080056c4 <_Balloc>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	69c6      	ldr	r6, [r0, #28]
 80056c8:	4604      	mov	r4, r0
 80056ca:	460d      	mov	r5, r1
 80056cc:	b976      	cbnz	r6, 80056ec <_Balloc+0x28>
 80056ce:	2010      	movs	r0, #16
 80056d0:	f7ff ff42 	bl	8005558 <malloc>
 80056d4:	4602      	mov	r2, r0
 80056d6:	61e0      	str	r0, [r4, #28]
 80056d8:	b920      	cbnz	r0, 80056e4 <_Balloc+0x20>
 80056da:	216b      	movs	r1, #107	@ 0x6b
 80056dc:	4b17      	ldr	r3, [pc, #92]	@ (800573c <_Balloc+0x78>)
 80056de:	4818      	ldr	r0, [pc, #96]	@ (8005740 <_Balloc+0x7c>)
 80056e0:	f000 fd9a 	bl	8006218 <__assert_func>
 80056e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056e8:	6006      	str	r6, [r0, #0]
 80056ea:	60c6      	str	r6, [r0, #12]
 80056ec:	69e6      	ldr	r6, [r4, #28]
 80056ee:	68f3      	ldr	r3, [r6, #12]
 80056f0:	b183      	cbz	r3, 8005714 <_Balloc+0x50>
 80056f2:	69e3      	ldr	r3, [r4, #28]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056fa:	b9b8      	cbnz	r0, 800572c <_Balloc+0x68>
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005702:	1d72      	adds	r2, r6, #5
 8005704:	4620      	mov	r0, r4
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	f000 fda4 	bl	8006254 <_calloc_r>
 800570c:	b160      	cbz	r0, 8005728 <_Balloc+0x64>
 800570e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005712:	e00e      	b.n	8005732 <_Balloc+0x6e>
 8005714:	2221      	movs	r2, #33	@ 0x21
 8005716:	2104      	movs	r1, #4
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fd9b 	bl	8006254 <_calloc_r>
 800571e:	69e3      	ldr	r3, [r4, #28]
 8005720:	60f0      	str	r0, [r6, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e4      	bne.n	80056f2 <_Balloc+0x2e>
 8005728:	2000      	movs	r0, #0
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	6802      	ldr	r2, [r0, #0]
 800572e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005732:	2300      	movs	r3, #0
 8005734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005738:	e7f7      	b.n	800572a <_Balloc+0x66>
 800573a:	bf00      	nop
 800573c:	08006a84 	.word	0x08006a84
 8005740:	08006b04 	.word	0x08006b04

08005744 <_Bfree>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	69c6      	ldr	r6, [r0, #28]
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b976      	cbnz	r6, 800576c <_Bfree+0x28>
 800574e:	2010      	movs	r0, #16
 8005750:	f7ff ff02 	bl	8005558 <malloc>
 8005754:	4602      	mov	r2, r0
 8005756:	61e8      	str	r0, [r5, #28]
 8005758:	b920      	cbnz	r0, 8005764 <_Bfree+0x20>
 800575a:	218f      	movs	r1, #143	@ 0x8f
 800575c:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <_Bfree+0x3c>)
 800575e:	4809      	ldr	r0, [pc, #36]	@ (8005784 <_Bfree+0x40>)
 8005760:	f000 fd5a 	bl	8006218 <__assert_func>
 8005764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005768:	6006      	str	r6, [r0, #0]
 800576a:	60c6      	str	r6, [r0, #12]
 800576c:	b13c      	cbz	r4, 800577e <_Bfree+0x3a>
 800576e:	69eb      	ldr	r3, [r5, #28]
 8005770:	6862      	ldr	r2, [r4, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005778:	6021      	str	r1, [r4, #0]
 800577a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	08006a84 	.word	0x08006a84
 8005784:	08006b04 	.word	0x08006b04

08005788 <__multadd>:
 8005788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578c:	4607      	mov	r7, r0
 800578e:	460c      	mov	r4, r1
 8005790:	461e      	mov	r6, r3
 8005792:	2000      	movs	r0, #0
 8005794:	690d      	ldr	r5, [r1, #16]
 8005796:	f101 0c14 	add.w	ip, r1, #20
 800579a:	f8dc 3000 	ldr.w	r3, [ip]
 800579e:	3001      	adds	r0, #1
 80057a0:	b299      	uxth	r1, r3
 80057a2:	fb02 6101 	mla	r1, r2, r1, r6
 80057a6:	0c1e      	lsrs	r6, r3, #16
 80057a8:	0c0b      	lsrs	r3, r1, #16
 80057aa:	fb02 3306 	mla	r3, r2, r6, r3
 80057ae:	b289      	uxth	r1, r1
 80057b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057b4:	4285      	cmp	r5, r0
 80057b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057ba:	f84c 1b04 	str.w	r1, [ip], #4
 80057be:	dcec      	bgt.n	800579a <__multadd+0x12>
 80057c0:	b30e      	cbz	r6, 8005806 <__multadd+0x7e>
 80057c2:	68a3      	ldr	r3, [r4, #8]
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	dc19      	bgt.n	80057fc <__multadd+0x74>
 80057c8:	6861      	ldr	r1, [r4, #4]
 80057ca:	4638      	mov	r0, r7
 80057cc:	3101      	adds	r1, #1
 80057ce:	f7ff ff79 	bl	80056c4 <_Balloc>
 80057d2:	4680      	mov	r8, r0
 80057d4:	b928      	cbnz	r0, 80057e2 <__multadd+0x5a>
 80057d6:	4602      	mov	r2, r0
 80057d8:	21ba      	movs	r1, #186	@ 0xba
 80057da:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <__multadd+0x84>)
 80057dc:	480c      	ldr	r0, [pc, #48]	@ (8005810 <__multadd+0x88>)
 80057de:	f000 fd1b 	bl	8006218 <__assert_func>
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	f104 010c 	add.w	r1, r4, #12
 80057e8:	3202      	adds	r2, #2
 80057ea:	0092      	lsls	r2, r2, #2
 80057ec:	300c      	adds	r0, #12
 80057ee:	f7ff f80c 	bl	800480a <memcpy>
 80057f2:	4621      	mov	r1, r4
 80057f4:	4638      	mov	r0, r7
 80057f6:	f7ff ffa5 	bl	8005744 <_Bfree>
 80057fa:	4644      	mov	r4, r8
 80057fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005800:	3501      	adds	r5, #1
 8005802:	615e      	str	r6, [r3, #20]
 8005804:	6125      	str	r5, [r4, #16]
 8005806:	4620      	mov	r0, r4
 8005808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580c:	08006af3 	.word	0x08006af3
 8005810:	08006b04 	.word	0x08006b04

08005814 <__hi0bits>:
 8005814:	4603      	mov	r3, r0
 8005816:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800581a:	bf3a      	itte	cc
 800581c:	0403      	lslcc	r3, r0, #16
 800581e:	2010      	movcc	r0, #16
 8005820:	2000      	movcs	r0, #0
 8005822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005826:	bf3c      	itt	cc
 8005828:	021b      	lslcc	r3, r3, #8
 800582a:	3008      	addcc	r0, #8
 800582c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005830:	bf3c      	itt	cc
 8005832:	011b      	lslcc	r3, r3, #4
 8005834:	3004      	addcc	r0, #4
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583a:	bf3c      	itt	cc
 800583c:	009b      	lslcc	r3, r3, #2
 800583e:	3002      	addcc	r0, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	db05      	blt.n	8005850 <__hi0bits+0x3c>
 8005844:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005848:	f100 0001 	add.w	r0, r0, #1
 800584c:	bf08      	it	eq
 800584e:	2020      	moveq	r0, #32
 8005850:	4770      	bx	lr

08005852 <__lo0bits>:
 8005852:	6803      	ldr	r3, [r0, #0]
 8005854:	4602      	mov	r2, r0
 8005856:	f013 0007 	ands.w	r0, r3, #7
 800585a:	d00b      	beq.n	8005874 <__lo0bits+0x22>
 800585c:	07d9      	lsls	r1, r3, #31
 800585e:	d421      	bmi.n	80058a4 <__lo0bits+0x52>
 8005860:	0798      	lsls	r0, r3, #30
 8005862:	bf49      	itett	mi
 8005864:	085b      	lsrmi	r3, r3, #1
 8005866:	089b      	lsrpl	r3, r3, #2
 8005868:	2001      	movmi	r0, #1
 800586a:	6013      	strmi	r3, [r2, #0]
 800586c:	bf5c      	itt	pl
 800586e:	2002      	movpl	r0, #2
 8005870:	6013      	strpl	r3, [r2, #0]
 8005872:	4770      	bx	lr
 8005874:	b299      	uxth	r1, r3
 8005876:	b909      	cbnz	r1, 800587c <__lo0bits+0x2a>
 8005878:	2010      	movs	r0, #16
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	b909      	cbnz	r1, 8005884 <__lo0bits+0x32>
 8005880:	3008      	adds	r0, #8
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	0719      	lsls	r1, r3, #28
 8005886:	bf04      	itt	eq
 8005888:	091b      	lsreq	r3, r3, #4
 800588a:	3004      	addeq	r0, #4
 800588c:	0799      	lsls	r1, r3, #30
 800588e:	bf04      	itt	eq
 8005890:	089b      	lsreq	r3, r3, #2
 8005892:	3002      	addeq	r0, #2
 8005894:	07d9      	lsls	r1, r3, #31
 8005896:	d403      	bmi.n	80058a0 <__lo0bits+0x4e>
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	f100 0001 	add.w	r0, r0, #1
 800589e:	d003      	beq.n	80058a8 <__lo0bits+0x56>
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	4770      	bx	lr
 80058a4:	2000      	movs	r0, #0
 80058a6:	4770      	bx	lr
 80058a8:	2020      	movs	r0, #32
 80058aa:	4770      	bx	lr

080058ac <__i2b>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	2101      	movs	r1, #1
 80058b2:	f7ff ff07 	bl	80056c4 <_Balloc>
 80058b6:	4602      	mov	r2, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <__i2b+0x1a>
 80058ba:	f240 1145 	movw	r1, #325	@ 0x145
 80058be:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <__i2b+0x24>)
 80058c0:	4804      	ldr	r0, [pc, #16]	@ (80058d4 <__i2b+0x28>)
 80058c2:	f000 fca9 	bl	8006218 <__assert_func>
 80058c6:	2301      	movs	r3, #1
 80058c8:	6144      	str	r4, [r0, #20]
 80058ca:	6103      	str	r3, [r0, #16]
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	bf00      	nop
 80058d0:	08006af3 	.word	0x08006af3
 80058d4:	08006b04 	.word	0x08006b04

080058d8 <__multiply>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4614      	mov	r4, r2
 80058de:	690a      	ldr	r2, [r1, #16]
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	460f      	mov	r7, r1
 80058e4:	429a      	cmp	r2, r3
 80058e6:	bfa2      	ittt	ge
 80058e8:	4623      	movge	r3, r4
 80058ea:	460c      	movge	r4, r1
 80058ec:	461f      	movge	r7, r3
 80058ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058f6:	68a3      	ldr	r3, [r4, #8]
 80058f8:	6861      	ldr	r1, [r4, #4]
 80058fa:	eb0a 0609 	add.w	r6, sl, r9
 80058fe:	42b3      	cmp	r3, r6
 8005900:	b085      	sub	sp, #20
 8005902:	bfb8      	it	lt
 8005904:	3101      	addlt	r1, #1
 8005906:	f7ff fedd 	bl	80056c4 <_Balloc>
 800590a:	b930      	cbnz	r0, 800591a <__multiply+0x42>
 800590c:	4602      	mov	r2, r0
 800590e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005912:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <__multiply+0x148>)
 8005914:	4843      	ldr	r0, [pc, #268]	@ (8005a24 <__multiply+0x14c>)
 8005916:	f000 fc7f 	bl	8006218 <__assert_func>
 800591a:	f100 0514 	add.w	r5, r0, #20
 800591e:	462b      	mov	r3, r5
 8005920:	2200      	movs	r2, #0
 8005922:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005926:	4543      	cmp	r3, r8
 8005928:	d321      	bcc.n	800596e <__multiply+0x96>
 800592a:	f107 0114 	add.w	r1, r7, #20
 800592e:	f104 0214 	add.w	r2, r4, #20
 8005932:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005936:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	1b13      	subs	r3, r2, r4
 800593e:	3b15      	subs	r3, #21
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	3304      	adds	r3, #4
 8005946:	f104 0715 	add.w	r7, r4, #21
 800594a:	42ba      	cmp	r2, r7
 800594c:	bf38      	it	cc
 800594e:	2304      	movcc	r3, #4
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	9b02      	ldr	r3, [sp, #8]
 8005954:	9103      	str	r1, [sp, #12]
 8005956:	428b      	cmp	r3, r1
 8005958:	d80c      	bhi.n	8005974 <__multiply+0x9c>
 800595a:	2e00      	cmp	r6, #0
 800595c:	dd03      	ble.n	8005966 <__multiply+0x8e>
 800595e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05a      	beq.n	8005a1c <__multiply+0x144>
 8005966:	6106      	str	r6, [r0, #16]
 8005968:	b005      	add	sp, #20
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	f843 2b04 	str.w	r2, [r3], #4
 8005972:	e7d8      	b.n	8005926 <__multiply+0x4e>
 8005974:	f8b1 a000 	ldrh.w	sl, [r1]
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	d023      	beq.n	80059c6 <__multiply+0xee>
 800597e:	46a9      	mov	r9, r5
 8005980:	f04f 0c00 	mov.w	ip, #0
 8005984:	f104 0e14 	add.w	lr, r4, #20
 8005988:	f85e 7b04 	ldr.w	r7, [lr], #4
 800598c:	f8d9 3000 	ldr.w	r3, [r9]
 8005990:	fa1f fb87 	uxth.w	fp, r7
 8005994:	b29b      	uxth	r3, r3
 8005996:	fb0a 330b 	mla	r3, sl, fp, r3
 800599a:	4463      	add	r3, ip
 800599c:	f8d9 c000 	ldr.w	ip, [r9]
 80059a0:	0c3f      	lsrs	r7, r7, #16
 80059a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059a6:	fb0a c707 	mla	r7, sl, r7, ip
 80059aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059b4:	4572      	cmp	r2, lr
 80059b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80059ba:	f849 3b04 	str.w	r3, [r9], #4
 80059be:	d8e3      	bhi.n	8005988 <__multiply+0xb0>
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	f845 c003 	str.w	ip, [r5, r3]
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	3104      	adds	r1, #4
 80059ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80059ce:	f1b9 0f00 	cmp.w	r9, #0
 80059d2:	d021      	beq.n	8005a18 <__multiply+0x140>
 80059d4:	46ae      	mov	lr, r5
 80059d6:	f04f 0a00 	mov.w	sl, #0
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	f104 0c14 	add.w	ip, r4, #20
 80059e0:	f8bc b000 	ldrh.w	fp, [ip]
 80059e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	fb09 770b 	mla	r7, r9, fp, r7
 80059ee:	4457      	add	r7, sl
 80059f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059f4:	f84e 3b04 	str.w	r3, [lr], #4
 80059f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a00:	f8be 3000 	ldrh.w	r3, [lr]
 8005a04:	4562      	cmp	r2, ip
 8005a06:	fb09 330a 	mla	r3, r9, sl, r3
 8005a0a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a12:	d8e5      	bhi.n	80059e0 <__multiply+0x108>
 8005a14:	9f01      	ldr	r7, [sp, #4]
 8005a16:	51eb      	str	r3, [r5, r7]
 8005a18:	3504      	adds	r5, #4
 8005a1a:	e79a      	b.n	8005952 <__multiply+0x7a>
 8005a1c:	3e01      	subs	r6, #1
 8005a1e:	e79c      	b.n	800595a <__multiply+0x82>
 8005a20:	08006af3 	.word	0x08006af3
 8005a24:	08006b04 	.word	0x08006b04

08005a28 <__pow5mult>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	4615      	mov	r5, r2
 8005a2e:	f012 0203 	ands.w	r2, r2, #3
 8005a32:	4607      	mov	r7, r0
 8005a34:	460e      	mov	r6, r1
 8005a36:	d007      	beq.n	8005a48 <__pow5mult+0x20>
 8005a38:	4c25      	ldr	r4, [pc, #148]	@ (8005ad0 <__pow5mult+0xa8>)
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a42:	f7ff fea1 	bl	8005788 <__multadd>
 8005a46:	4606      	mov	r6, r0
 8005a48:	10ad      	asrs	r5, r5, #2
 8005a4a:	d03d      	beq.n	8005ac8 <__pow5mult+0xa0>
 8005a4c:	69fc      	ldr	r4, [r7, #28]
 8005a4e:	b97c      	cbnz	r4, 8005a70 <__pow5mult+0x48>
 8005a50:	2010      	movs	r0, #16
 8005a52:	f7ff fd81 	bl	8005558 <malloc>
 8005a56:	4602      	mov	r2, r0
 8005a58:	61f8      	str	r0, [r7, #28]
 8005a5a:	b928      	cbnz	r0, 8005a68 <__pow5mult+0x40>
 8005a5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <__pow5mult+0xac>)
 8005a62:	481d      	ldr	r0, [pc, #116]	@ (8005ad8 <__pow5mult+0xb0>)
 8005a64:	f000 fbd8 	bl	8006218 <__assert_func>
 8005a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a6c:	6004      	str	r4, [r0, #0]
 8005a6e:	60c4      	str	r4, [r0, #12]
 8005a70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a78:	b94c      	cbnz	r4, 8005a8e <__pow5mult+0x66>
 8005a7a:	f240 2171 	movw	r1, #625	@ 0x271
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f7ff ff14 	bl	80058ac <__i2b>
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	07eb      	lsls	r3, r5, #31
 8005a94:	d50a      	bpl.n	8005aac <__pow5mult+0x84>
 8005a96:	4631      	mov	r1, r6
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f7ff ff1c 	bl	80058d8 <__multiply>
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff fe4d 	bl	8005744 <_Bfree>
 8005aaa:	4646      	mov	r6, r8
 8005aac:	106d      	asrs	r5, r5, #1
 8005aae:	d00b      	beq.n	8005ac8 <__pow5mult+0xa0>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	b938      	cbnz	r0, 8005ac4 <__pow5mult+0x9c>
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff ff0d 	bl	80058d8 <__multiply>
 8005abe:	6020      	str	r0, [r4, #0]
 8005ac0:	f8c0 9000 	str.w	r9, [r0]
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	e7e4      	b.n	8005a92 <__pow5mult+0x6a>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	bf00      	nop
 8005ad0:	08006b60 	.word	0x08006b60
 8005ad4:	08006a84 	.word	0x08006a84
 8005ad8:	08006b04 	.word	0x08006b04

08005adc <__lshift>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	4691      	mov	r9, r2
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	6849      	ldr	r1, [r1, #4]
 8005aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aee:	68a3      	ldr	r3, [r4, #8]
 8005af0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af4:	f108 0601 	add.w	r6, r8, #1
 8005af8:	42b3      	cmp	r3, r6
 8005afa:	db0b      	blt.n	8005b14 <__lshift+0x38>
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff fde1 	bl	80056c4 <_Balloc>
 8005b02:	4605      	mov	r5, r0
 8005b04:	b948      	cbnz	r0, 8005b1a <__lshift+0x3e>
 8005b06:	4602      	mov	r2, r0
 8005b08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b0c:	4b27      	ldr	r3, [pc, #156]	@ (8005bac <__lshift+0xd0>)
 8005b0e:	4828      	ldr	r0, [pc, #160]	@ (8005bb0 <__lshift+0xd4>)
 8005b10:	f000 fb82 	bl	8006218 <__assert_func>
 8005b14:	3101      	adds	r1, #1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	e7ee      	b.n	8005af8 <__lshift+0x1c>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f100 0114 	add.w	r1, r0, #20
 8005b20:	f100 0210 	add.w	r2, r0, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	4553      	cmp	r3, sl
 8005b28:	db33      	blt.n	8005b92 <__lshift+0xb6>
 8005b2a:	6920      	ldr	r0, [r4, #16]
 8005b2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b30:	f104 0314 	add.w	r3, r4, #20
 8005b34:	f019 091f 	ands.w	r9, r9, #31
 8005b38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b40:	d02b      	beq.n	8005b9a <__lshift+0xbe>
 8005b42:	468a      	mov	sl, r1
 8005b44:	2200      	movs	r2, #0
 8005b46:	f1c9 0e20 	rsb	lr, r9, #32
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b50:	4310      	orrs	r0, r2
 8005b52:	f84a 0b04 	str.w	r0, [sl], #4
 8005b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5a:	459c      	cmp	ip, r3
 8005b5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b60:	d8f3      	bhi.n	8005b4a <__lshift+0x6e>
 8005b62:	ebac 0304 	sub.w	r3, ip, r4
 8005b66:	3b15      	subs	r3, #21
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	f104 0015 	add.w	r0, r4, #21
 8005b72:	4584      	cmp	ip, r0
 8005b74:	bf38      	it	cc
 8005b76:	2304      	movcc	r3, #4
 8005b78:	50ca      	str	r2, [r1, r3]
 8005b7a:	b10a      	cbz	r2, 8005b80 <__lshift+0xa4>
 8005b7c:	f108 0602 	add.w	r6, r8, #2
 8005b80:	3e01      	subs	r6, #1
 8005b82:	4638      	mov	r0, r7
 8005b84:	4621      	mov	r1, r4
 8005b86:	612e      	str	r6, [r5, #16]
 8005b88:	f7ff fddc 	bl	8005744 <_Bfree>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b96:	3301      	adds	r3, #1
 8005b98:	e7c5      	b.n	8005b26 <__lshift+0x4a>
 8005b9a:	3904      	subs	r1, #4
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	459c      	cmp	ip, r3
 8005ba2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba6:	d8f9      	bhi.n	8005b9c <__lshift+0xc0>
 8005ba8:	e7ea      	b.n	8005b80 <__lshift+0xa4>
 8005baa:	bf00      	nop
 8005bac:	08006af3 	.word	0x08006af3
 8005bb0:	08006b04 	.word	0x08006b04

08005bb4 <__mcmp>:
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	690a      	ldr	r2, [r1, #16]
 8005bb8:	6900      	ldr	r0, [r0, #16]
 8005bba:	b530      	push	{r4, r5, lr}
 8005bbc:	1a80      	subs	r0, r0, r2
 8005bbe:	d10e      	bne.n	8005bde <__mcmp+0x2a>
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	3114      	adds	r1, #20
 8005bc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bd4:	4295      	cmp	r5, r2
 8005bd6:	d003      	beq.n	8005be0 <__mcmp+0x2c>
 8005bd8:	d205      	bcs.n	8005be6 <__mcmp+0x32>
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	bd30      	pop	{r4, r5, pc}
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d3f3      	bcc.n	8005bcc <__mcmp+0x18>
 8005be4:	e7fb      	b.n	8005bde <__mcmp+0x2a>
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7f9      	b.n	8005bde <__mcmp+0x2a>
	...

08005bec <__mdiff>:
 8005bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	4689      	mov	r9, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	f7ff ffdb 	bl	8005bb4 <__mcmp>
 8005bfe:	1e05      	subs	r5, r0, #0
 8005c00:	d112      	bne.n	8005c28 <__mdiff+0x3c>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff fd5d 	bl	80056c4 <_Balloc>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	b928      	cbnz	r0, 8005c1a <__mdiff+0x2e>
 8005c0e:	f240 2137 	movw	r1, #567	@ 0x237
 8005c12:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <__mdiff+0x120>)
 8005c14:	483e      	ldr	r0, [pc, #248]	@ (8005d10 <__mdiff+0x124>)
 8005c16:	f000 faff 	bl	8006218 <__assert_func>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c20:	4610      	mov	r0, r2
 8005c22:	b003      	add	sp, #12
 8005c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c28:	bfbc      	itt	lt
 8005c2a:	464b      	movlt	r3, r9
 8005c2c:	46a1      	movlt	r9, r4
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c34:	bfba      	itte	lt
 8005c36:	461c      	movlt	r4, r3
 8005c38:	2501      	movlt	r5, #1
 8005c3a:	2500      	movge	r5, #0
 8005c3c:	f7ff fd42 	bl	80056c4 <_Balloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	b918      	cbnz	r0, 8005c4c <__mdiff+0x60>
 8005c44:	f240 2145 	movw	r1, #581	@ 0x245
 8005c48:	4b30      	ldr	r3, [pc, #192]	@ (8005d0c <__mdiff+0x120>)
 8005c4a:	e7e3      	b.n	8005c14 <__mdiff+0x28>
 8005c4c:	f100 0b14 	add.w	fp, r0, #20
 8005c50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c54:	f109 0310 	add.w	r3, r9, #16
 8005c58:	60c5      	str	r5, [r0, #12]
 8005c5a:	f04f 0c00 	mov.w	ip, #0
 8005c5e:	f109 0514 	add.w	r5, r9, #20
 8005c62:	46d9      	mov	r9, fp
 8005c64:	6926      	ldr	r6, [r4, #16]
 8005c66:	f104 0e14 	add.w	lr, r4, #20
 8005c6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c7e:	b281      	uxth	r1, r0
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	fa1f f38a 	uxth.w	r3, sl
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	0c00      	lsrs	r0, r0, #16
 8005c8a:	4463      	add	r3, ip
 8005c8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c9a:	4576      	cmp	r6, lr
 8005c9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ca0:	f849 3b04 	str.w	r3, [r9], #4
 8005ca4:	d8e6      	bhi.n	8005c74 <__mdiff+0x88>
 8005ca6:	1b33      	subs	r3, r6, r4
 8005ca8:	3b15      	subs	r3, #21
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	3415      	adds	r4, #21
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	bf38      	it	cc
 8005cb6:	2304      	movcc	r3, #4
 8005cb8:	441d      	add	r5, r3
 8005cba:	445b      	add	r3, fp
 8005cbc:	461e      	mov	r6, r3
 8005cbe:	462c      	mov	r4, r5
 8005cc0:	4544      	cmp	r4, r8
 8005cc2:	d30e      	bcc.n	8005ce2 <__mdiff+0xf6>
 8005cc4:	f108 0103 	add.w	r1, r8, #3
 8005cc8:	1b49      	subs	r1, r1, r5
 8005cca:	f021 0103 	bic.w	r1, r1, #3
 8005cce:	3d03      	subs	r5, #3
 8005cd0:	45a8      	cmp	r8, r5
 8005cd2:	bf38      	it	cc
 8005cd4:	2100      	movcc	r1, #0
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cdc:	b199      	cbz	r1, 8005d06 <__mdiff+0x11a>
 8005cde:	6117      	str	r7, [r2, #16]
 8005ce0:	e79e      	b.n	8005c20 <__mdiff+0x34>
 8005ce2:	46e6      	mov	lr, ip
 8005ce4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ce8:	fa1f fc81 	uxth.w	ip, r1
 8005cec:	44f4      	add	ip, lr
 8005cee:	0c08      	lsrs	r0, r1, #16
 8005cf0:	4471      	add	r1, lr
 8005cf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cf6:	b289      	uxth	r1, r1
 8005cf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d00:	f846 1b04 	str.w	r1, [r6], #4
 8005d04:	e7dc      	b.n	8005cc0 <__mdiff+0xd4>
 8005d06:	3f01      	subs	r7, #1
 8005d08:	e7e6      	b.n	8005cd8 <__mdiff+0xec>
 8005d0a:	bf00      	nop
 8005d0c:	08006af3 	.word	0x08006af3
 8005d10:	08006b04 	.word	0x08006b04

08005d14 <__d2b>:
 8005d14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	9e08      	ldr	r6, [sp, #32]
 8005d20:	f7ff fcd0 	bl	80056c4 <_Balloc>
 8005d24:	4604      	mov	r4, r0
 8005d26:	b930      	cbnz	r0, 8005d36 <__d2b+0x22>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d2e:	4b23      	ldr	r3, [pc, #140]	@ (8005dbc <__d2b+0xa8>)
 8005d30:	4823      	ldr	r0, [pc, #140]	@ (8005dc0 <__d2b+0xac>)
 8005d32:	f000 fa71 	bl	8006218 <__assert_func>
 8005d36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d3e:	b10d      	cbz	r5, 8005d44 <__d2b+0x30>
 8005d40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	f1b8 0300 	subs.w	r3, r8, #0
 8005d4a:	d024      	beq.n	8005d96 <__d2b+0x82>
 8005d4c:	4668      	mov	r0, sp
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	f7ff fd7f 	bl	8005852 <__lo0bits>
 8005d54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d58:	b1d8      	cbz	r0, 8005d92 <__d2b+0x7e>
 8005d5a:	f1c0 0320 	rsb	r3, r0, #32
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	430b      	orrs	r3, r1
 8005d64:	40c2      	lsrs	r2, r0
 8005d66:	6163      	str	r3, [r4, #20]
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9b01      	ldr	r3, [sp, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2201      	moveq	r2, #1
 8005d72:	2202      	movne	r2, #2
 8005d74:	61a3      	str	r3, [r4, #24]
 8005d76:	6122      	str	r2, [r4, #16]
 8005d78:	b1ad      	cbz	r5, 8005da6 <__d2b+0x92>
 8005d7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d7e:	4405      	add	r5, r0
 8005d80:	6035      	str	r5, [r6, #0]
 8005d82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d88:	6018      	str	r0, [r3, #0]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	b002      	add	sp, #8
 8005d8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005d92:	6161      	str	r1, [r4, #20]
 8005d94:	e7e9      	b.n	8005d6a <__d2b+0x56>
 8005d96:	a801      	add	r0, sp, #4
 8005d98:	f7ff fd5b 	bl	8005852 <__lo0bits>
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	6163      	str	r3, [r4, #20]
 8005da2:	3020      	adds	r0, #32
 8005da4:	e7e7      	b.n	8005d76 <__d2b+0x62>
 8005da6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005daa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005dae:	6030      	str	r0, [r6, #0]
 8005db0:	6918      	ldr	r0, [r3, #16]
 8005db2:	f7ff fd2f 	bl	8005814 <__hi0bits>
 8005db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dba:	e7e4      	b.n	8005d86 <__d2b+0x72>
 8005dbc:	08006af3 	.word	0x08006af3
 8005dc0:	08006b04 	.word	0x08006b04

08005dc4 <__ssputs_r>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	461f      	mov	r7, r3
 8005dca:	688e      	ldr	r6, [r1, #8]
 8005dcc:	4682      	mov	sl, r0
 8005dce:	42be      	cmp	r6, r7
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	4690      	mov	r8, r2
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	d82d      	bhi.n	8005e34 <__ssputs_r+0x70>
 8005dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005de0:	d026      	beq.n	8005e30 <__ssputs_r+0x6c>
 8005de2:	6965      	ldr	r5, [r4, #20]
 8005de4:	6909      	ldr	r1, [r1, #16]
 8005de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dea:	eba3 0901 	sub.w	r9, r3, r1
 8005dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df2:	1c7b      	adds	r3, r7, #1
 8005df4:	444b      	add	r3, r9
 8005df6:	106d      	asrs	r5, r5, #1
 8005df8:	429d      	cmp	r5, r3
 8005dfa:	bf38      	it	cc
 8005dfc:	461d      	movcc	r5, r3
 8005dfe:	0553      	lsls	r3, r2, #21
 8005e00:	d527      	bpl.n	8005e52 <__ssputs_r+0x8e>
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7ff fbd2 	bl	80055ac <_malloc_r>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	b360      	cbz	r0, 8005e66 <__ssputs_r+0xa2>
 8005e0c:	464a      	mov	r2, r9
 8005e0e:	6921      	ldr	r1, [r4, #16]
 8005e10:	f7fe fcfb 	bl	800480a <memcpy>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	6126      	str	r6, [r4, #16]
 8005e22:	444e      	add	r6, r9
 8005e24:	6026      	str	r6, [r4, #0]
 8005e26:	463e      	mov	r6, r7
 8005e28:	6165      	str	r5, [r4, #20]
 8005e2a:	eba5 0509 	sub.w	r5, r5, r9
 8005e2e:	60a5      	str	r5, [r4, #8]
 8005e30:	42be      	cmp	r6, r7
 8005e32:	d900      	bls.n	8005e36 <__ssputs_r+0x72>
 8005e34:	463e      	mov	r6, r7
 8005e36:	4632      	mov	r2, r6
 8005e38:	4641      	mov	r1, r8
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	f000 f9c2 	bl	80061c4 <memmove>
 8005e40:	2000      	movs	r0, #0
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	1b9b      	subs	r3, r3, r6
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	4433      	add	r3, r6
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	462a      	mov	r2, r5
 8005e54:	f000 fa24 	bl	80062a0 <_realloc_r>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1e0      	bne.n	8005e20 <__ssputs_r+0x5c>
 8005e5e:	4650      	mov	r0, sl
 8005e60:	6921      	ldr	r1, [r4, #16]
 8005e62:	f7ff fb31 	bl	80054c8 <_free_r>
 8005e66:	230c      	movs	r3, #12
 8005e68:	f8ca 3000 	str.w	r3, [sl]
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	e7e9      	b.n	8005e4e <__ssputs_r+0x8a>
	...

08005e7c <_svfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	4698      	mov	r8, r3
 8005e82:	898b      	ldrh	r3, [r1, #12]
 8005e84:	4607      	mov	r7, r0
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	460d      	mov	r5, r1
 8005e8a:	4614      	mov	r4, r2
 8005e8c:	b09d      	sub	sp, #116	@ 0x74
 8005e8e:	d510      	bpl.n	8005eb2 <_svfiprintf_r+0x36>
 8005e90:	690b      	ldr	r3, [r1, #16]
 8005e92:	b973      	cbnz	r3, 8005eb2 <_svfiprintf_r+0x36>
 8005e94:	2140      	movs	r1, #64	@ 0x40
 8005e96:	f7ff fb89 	bl	80055ac <_malloc_r>
 8005e9a:	6028      	str	r0, [r5, #0]
 8005e9c:	6128      	str	r0, [r5, #16]
 8005e9e:	b930      	cbnz	r0, 8005eae <_svfiprintf_r+0x32>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b01d      	add	sp, #116	@ 0x74
 8005eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	2340      	movs	r3, #64	@ 0x40
 8005eb0:	616b      	str	r3, [r5, #20]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ebc:	2330      	movs	r3, #48	@ 0x30
 8005ebe:	f04f 0901 	mov.w	r9, #1
 8005ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006060 <_svfiprintf_r+0x1e4>
 8005eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ece:	4623      	mov	r3, r4
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed6:	b10a      	cbz	r2, 8005edc <_svfiprintf_r+0x60>
 8005ed8:	2a25      	cmp	r2, #37	@ 0x25
 8005eda:	d1f9      	bne.n	8005ed0 <_svfiprintf_r+0x54>
 8005edc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ee0:	d00b      	beq.n	8005efa <_svfiprintf_r+0x7e>
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff ff6b 	bl	8005dc4 <__ssputs_r>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f000 80a7 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef6:	445a      	add	r2, fp
 8005ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 809f 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0e:	f10a 0a01 	add.w	sl, sl, #1
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f1c:	4654      	mov	r4, sl
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f24:	484e      	ldr	r0, [pc, #312]	@ (8006060 <_svfiprintf_r+0x1e4>)
 8005f26:	f7fe fc62 	bl	80047ee <memchr>
 8005f2a:	9a04      	ldr	r2, [sp, #16]
 8005f2c:	b9d8      	cbnz	r0, 8005f66 <_svfiprintf_r+0xea>
 8005f2e:	06d0      	lsls	r0, r2, #27
 8005f30:	bf44      	itt	mi
 8005f32:	2320      	movmi	r3, #32
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f38:	0711      	lsls	r1, r2, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	232b      	movmi	r3, #43	@ 0x2b
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f42:	f89a 3000 	ldrb.w	r3, [sl]
 8005f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f48:	d015      	beq.n	8005f76 <_svfiprintf_r+0xfa>
 8005f4a:	4654      	mov	r4, sl
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f04f 0c0a 	mov.w	ip, #10
 8005f52:	9a07      	ldr	r2, [sp, #28]
 8005f54:	4621      	mov	r1, r4
 8005f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f5a:	3b30      	subs	r3, #48	@ 0x30
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d94b      	bls.n	8005ff8 <_svfiprintf_r+0x17c>
 8005f60:	b1b0      	cbz	r0, 8005f90 <_svfiprintf_r+0x114>
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	e014      	b.n	8005f90 <_svfiprintf_r+0x114>
 8005f66:	eba0 0308 	sub.w	r3, r0, r8
 8005f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	46a2      	mov	sl, r4
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	e7d2      	b.n	8005f1c <_svfiprintf_r+0xa0>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	9103      	str	r1, [sp, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbb      	ittet	lt
 8005f82:	425b      	neglt	r3, r3
 8005f84:	f042 0202 	orrlt.w	r2, r2, #2
 8005f88:	9307      	strge	r3, [sp, #28]
 8005f8a:	9307      	strlt	r3, [sp, #28]
 8005f8c:	bfb8      	it	lt
 8005f8e:	9204      	strlt	r2, [sp, #16]
 8005f90:	7823      	ldrb	r3, [r4, #0]
 8005f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f94:	d10a      	bne.n	8005fac <_svfiprintf_r+0x130>
 8005f96:	7863      	ldrb	r3, [r4, #1]
 8005f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9a:	d132      	bne.n	8006002 <_svfiprintf_r+0x186>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	3402      	adds	r4, #2
 8005fa0:	1d1a      	adds	r2, r3, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	9203      	str	r2, [sp, #12]
 8005fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006064 <_svfiprintf_r+0x1e8>
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4650      	mov	r0, sl
 8005fb4:	7821      	ldrb	r1, [r4, #0]
 8005fb6:	f7fe fc1a 	bl	80047ee <memchr>
 8005fba:	b138      	cbz	r0, 8005fcc <_svfiprintf_r+0x150>
 8005fbc:	2240      	movs	r2, #64	@ 0x40
 8005fbe:	9b04      	ldr	r3, [sp, #16]
 8005fc0:	eba0 000a 	sub.w	r0, r0, sl
 8005fc4:	4082      	lsls	r2, r0
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	2206      	movs	r2, #6
 8005fd2:	4825      	ldr	r0, [pc, #148]	@ (8006068 <_svfiprintf_r+0x1ec>)
 8005fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fd8:	f7fe fc09 	bl	80047ee <memchr>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d036      	beq.n	800604e <_svfiprintf_r+0x1d2>
 8005fe0:	4b22      	ldr	r3, [pc, #136]	@ (800606c <_svfiprintf_r+0x1f0>)
 8005fe2:	bb1b      	cbnz	r3, 800602c <_svfiprintf_r+0x1b0>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	9303      	str	r3, [sp, #12]
 8005ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff2:	4433      	add	r3, r6
 8005ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff6:	e76a      	b.n	8005ece <_svfiprintf_r+0x52>
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006000:	e7a8      	b.n	8005f54 <_svfiprintf_r+0xd8>
 8006002:	2300      	movs	r3, #0
 8006004:	f04f 0c0a 	mov.w	ip, #10
 8006008:	4619      	mov	r1, r3
 800600a:	3401      	adds	r4, #1
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	4620      	mov	r0, r4
 8006010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006014:	3a30      	subs	r2, #48	@ 0x30
 8006016:	2a09      	cmp	r2, #9
 8006018:	d903      	bls.n	8006022 <_svfiprintf_r+0x1a6>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0c6      	beq.n	8005fac <_svfiprintf_r+0x130>
 800601e:	9105      	str	r1, [sp, #20]
 8006020:	e7c4      	b.n	8005fac <_svfiprintf_r+0x130>
 8006022:	4604      	mov	r4, r0
 8006024:	2301      	movs	r3, #1
 8006026:	fb0c 2101 	mla	r1, ip, r1, r2
 800602a:	e7f0      	b.n	800600e <_svfiprintf_r+0x192>
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	462a      	mov	r2, r5
 8006032:	4638      	mov	r0, r7
 8006034:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <_svfiprintf_r+0x1f4>)
 8006036:	a904      	add	r1, sp, #16
 8006038:	f7fd fe76 	bl	8003d28 <_printf_float>
 800603c:	1c42      	adds	r2, r0, #1
 800603e:	4606      	mov	r6, r0
 8006040:	d1d6      	bne.n	8005ff0 <_svfiprintf_r+0x174>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	065b      	lsls	r3, r3, #25
 8006046:	f53f af2d 	bmi.w	8005ea4 <_svfiprintf_r+0x28>
 800604a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800604c:	e72c      	b.n	8005ea8 <_svfiprintf_r+0x2c>
 800604e:	ab03      	add	r3, sp, #12
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	462a      	mov	r2, r5
 8006054:	4638      	mov	r0, r7
 8006056:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <_svfiprintf_r+0x1f4>)
 8006058:	a904      	add	r1, sp, #16
 800605a:	f7fe f903 	bl	8004264 <_printf_i>
 800605e:	e7ed      	b.n	800603c <_svfiprintf_r+0x1c0>
 8006060:	08006c60 	.word	0x08006c60
 8006064:	08006c66 	.word	0x08006c66
 8006068:	08006c6a 	.word	0x08006c6a
 800606c:	08003d29 	.word	0x08003d29
 8006070:	08005dc5 	.word	0x08005dc5

08006074 <__sflush_r>:
 8006074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	0716      	lsls	r6, r2, #28
 800607c:	4605      	mov	r5, r0
 800607e:	460c      	mov	r4, r1
 8006080:	d454      	bmi.n	800612c <__sflush_r+0xb8>
 8006082:	684b      	ldr	r3, [r1, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	dc02      	bgt.n	800608e <__sflush_r+0x1a>
 8006088:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd48      	ble.n	8006120 <__sflush_r+0xac>
 800608e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006090:	2e00      	cmp	r6, #0
 8006092:	d045      	beq.n	8006120 <__sflush_r+0xac>
 8006094:	2300      	movs	r3, #0
 8006096:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800609a:	682f      	ldr	r7, [r5, #0]
 800609c:	6a21      	ldr	r1, [r4, #32]
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	d030      	beq.n	8006104 <__sflush_r+0x90>
 80060a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	0759      	lsls	r1, r3, #29
 80060a8:	d505      	bpl.n	80060b6 <__sflush_r+0x42>
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	1ad2      	subs	r2, r2, r3
 80060ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b0:	b10b      	cbz	r3, 80060b6 <__sflush_r+0x42>
 80060b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	4628      	mov	r0, r5
 80060ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060bc:	6a21      	ldr	r1, [r4, #32]
 80060be:	47b0      	blx	r6
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	d106      	bne.n	80060d4 <__sflush_r+0x60>
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	291d      	cmp	r1, #29
 80060ca:	d82b      	bhi.n	8006124 <__sflush_r+0xb0>
 80060cc:	4a28      	ldr	r2, [pc, #160]	@ (8006170 <__sflush_r+0xfc>)
 80060ce:	410a      	asrs	r2, r1
 80060d0:	07d6      	lsls	r6, r2, #31
 80060d2:	d427      	bmi.n	8006124 <__sflush_r+0xb0>
 80060d4:	2200      	movs	r2, #0
 80060d6:	6062      	str	r2, [r4, #4]
 80060d8:	6922      	ldr	r2, [r4, #16]
 80060da:	04d9      	lsls	r1, r3, #19
 80060dc:	6022      	str	r2, [r4, #0]
 80060de:	d504      	bpl.n	80060ea <__sflush_r+0x76>
 80060e0:	1c42      	adds	r2, r0, #1
 80060e2:	d101      	bne.n	80060e8 <__sflush_r+0x74>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b903      	cbnz	r3, 80060ea <__sflush_r+0x76>
 80060e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80060ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ec:	602f      	str	r7, [r5, #0]
 80060ee:	b1b9      	cbz	r1, 8006120 <__sflush_r+0xac>
 80060f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d002      	beq.n	80060fe <__sflush_r+0x8a>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff f9e5 	bl	80054c8 <_free_r>
 80060fe:	2300      	movs	r3, #0
 8006100:	6363      	str	r3, [r4, #52]	@ 0x34
 8006102:	e00d      	b.n	8006120 <__sflush_r+0xac>
 8006104:	2301      	movs	r3, #1
 8006106:	4628      	mov	r0, r5
 8006108:	47b0      	blx	r6
 800610a:	4602      	mov	r2, r0
 800610c:	1c50      	adds	r0, r2, #1
 800610e:	d1c9      	bne.n	80060a4 <__sflush_r+0x30>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c6      	beq.n	80060a4 <__sflush_r+0x30>
 8006116:	2b1d      	cmp	r3, #29
 8006118:	d001      	beq.n	800611e <__sflush_r+0xaa>
 800611a:	2b16      	cmp	r3, #22
 800611c:	d11d      	bne.n	800615a <__sflush_r+0xe6>
 800611e:	602f      	str	r7, [r5, #0]
 8006120:	2000      	movs	r0, #0
 8006122:	e021      	b.n	8006168 <__sflush_r+0xf4>
 8006124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006128:	b21b      	sxth	r3, r3
 800612a:	e01a      	b.n	8006162 <__sflush_r+0xee>
 800612c:	690f      	ldr	r7, [r1, #16]
 800612e:	2f00      	cmp	r7, #0
 8006130:	d0f6      	beq.n	8006120 <__sflush_r+0xac>
 8006132:	0793      	lsls	r3, r2, #30
 8006134:	bf18      	it	ne
 8006136:	2300      	movne	r3, #0
 8006138:	680e      	ldr	r6, [r1, #0]
 800613a:	bf08      	it	eq
 800613c:	694b      	ldreq	r3, [r1, #20]
 800613e:	1bf6      	subs	r6, r6, r7
 8006140:	600f      	str	r7, [r1, #0]
 8006142:	608b      	str	r3, [r1, #8]
 8006144:	2e00      	cmp	r6, #0
 8006146:	ddeb      	ble.n	8006120 <__sflush_r+0xac>
 8006148:	4633      	mov	r3, r6
 800614a:	463a      	mov	r2, r7
 800614c:	4628      	mov	r0, r5
 800614e:	6a21      	ldr	r1, [r4, #32]
 8006150:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006154:	47e0      	blx	ip
 8006156:	2800      	cmp	r0, #0
 8006158:	dc07      	bgt.n	800616a <__sflush_r+0xf6>
 800615a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616a:	4407      	add	r7, r0
 800616c:	1a36      	subs	r6, r6, r0
 800616e:	e7e9      	b.n	8006144 <__sflush_r+0xd0>
 8006170:	dfbffffe 	.word	0xdfbffffe

08006174 <_fflush_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b913      	cbnz	r3, 8006184 <_fflush_r+0x10>
 800617e:	2500      	movs	r5, #0
 8006180:	4628      	mov	r0, r5
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	b118      	cbz	r0, 800618e <_fflush_r+0x1a>
 8006186:	6a03      	ldr	r3, [r0, #32]
 8006188:	b90b      	cbnz	r3, 800618e <_fflush_r+0x1a>
 800618a:	f7fe fa17 	bl	80045bc <__sinit>
 800618e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f3      	beq.n	800617e <_fflush_r+0xa>
 8006196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006198:	07d0      	lsls	r0, r2, #31
 800619a:	d404      	bmi.n	80061a6 <_fflush_r+0x32>
 800619c:	0599      	lsls	r1, r3, #22
 800619e:	d402      	bmi.n	80061a6 <_fflush_r+0x32>
 80061a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061a2:	f7fe fb22 	bl	80047ea <__retarget_lock_acquire_recursive>
 80061a6:	4628      	mov	r0, r5
 80061a8:	4621      	mov	r1, r4
 80061aa:	f7ff ff63 	bl	8006074 <__sflush_r>
 80061ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061b0:	4605      	mov	r5, r0
 80061b2:	07da      	lsls	r2, r3, #31
 80061b4:	d4e4      	bmi.n	8006180 <_fflush_r+0xc>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	059b      	lsls	r3, r3, #22
 80061ba:	d4e1      	bmi.n	8006180 <_fflush_r+0xc>
 80061bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061be:	f7fe fb15 	bl	80047ec <__retarget_lock_release_recursive>
 80061c2:	e7dd      	b.n	8006180 <_fflush_r+0xc>

080061c4 <memmove>:
 80061c4:	4288      	cmp	r0, r1
 80061c6:	b510      	push	{r4, lr}
 80061c8:	eb01 0402 	add.w	r4, r1, r2
 80061cc:	d902      	bls.n	80061d4 <memmove+0x10>
 80061ce:	4284      	cmp	r4, r0
 80061d0:	4623      	mov	r3, r4
 80061d2:	d807      	bhi.n	80061e4 <memmove+0x20>
 80061d4:	1e43      	subs	r3, r0, #1
 80061d6:	42a1      	cmp	r1, r4
 80061d8:	d008      	beq.n	80061ec <memmove+0x28>
 80061da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061e2:	e7f8      	b.n	80061d6 <memmove+0x12>
 80061e4:	4601      	mov	r1, r0
 80061e6:	4402      	add	r2, r0
 80061e8:	428a      	cmp	r2, r1
 80061ea:	d100      	bne.n	80061ee <memmove+0x2a>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061f6:	e7f7      	b.n	80061e8 <memmove+0x24>

080061f8 <_sbrk_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	2300      	movs	r3, #0
 80061fc:	4d05      	ldr	r5, [pc, #20]	@ (8006214 <_sbrk_r+0x1c>)
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fb f804 	bl	8001210 <_sbrk>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_sbrk_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_sbrk_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	200003d4 	.word	0x200003d4

08006218 <__assert_func>:
 8006218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800621a:	4614      	mov	r4, r2
 800621c:	461a      	mov	r2, r3
 800621e:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <__assert_func+0x2c>)
 8006220:	4605      	mov	r5, r0
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68d8      	ldr	r0, [r3, #12]
 8006226:	b954      	cbnz	r4, 800623e <__assert_func+0x26>
 8006228:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <__assert_func+0x30>)
 800622a:	461c      	mov	r4, r3
 800622c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006230:	9100      	str	r1, [sp, #0]
 8006232:	462b      	mov	r3, r5
 8006234:	4905      	ldr	r1, [pc, #20]	@ (800624c <__assert_func+0x34>)
 8006236:	f000 f86f 	bl	8006318 <fiprintf>
 800623a:	f000 f87f 	bl	800633c <abort>
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <__assert_func+0x38>)
 8006240:	e7f4      	b.n	800622c <__assert_func+0x14>
 8006242:	bf00      	nop
 8006244:	20000018 	.word	0x20000018
 8006248:	08006cb6 	.word	0x08006cb6
 800624c:	08006c88 	.word	0x08006c88
 8006250:	08006c7b 	.word	0x08006c7b

08006254 <_calloc_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	fba1 5402 	umull	r5, r4, r1, r2
 800625a:	b93c      	cbnz	r4, 800626c <_calloc_r+0x18>
 800625c:	4629      	mov	r1, r5
 800625e:	f7ff f9a5 	bl	80055ac <_malloc_r>
 8006262:	4606      	mov	r6, r0
 8006264:	b928      	cbnz	r0, 8006272 <_calloc_r+0x1e>
 8006266:	2600      	movs	r6, #0
 8006268:	4630      	mov	r0, r6
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	220c      	movs	r2, #12
 800626e:	6002      	str	r2, [r0, #0]
 8006270:	e7f9      	b.n	8006266 <_calloc_r+0x12>
 8006272:	462a      	mov	r2, r5
 8006274:	4621      	mov	r1, r4
 8006276:	f7fe fa3a 	bl	80046ee <memset>
 800627a:	e7f5      	b.n	8006268 <_calloc_r+0x14>

0800627c <__ascii_mbtowc>:
 800627c:	b082      	sub	sp, #8
 800627e:	b901      	cbnz	r1, 8006282 <__ascii_mbtowc+0x6>
 8006280:	a901      	add	r1, sp, #4
 8006282:	b142      	cbz	r2, 8006296 <__ascii_mbtowc+0x1a>
 8006284:	b14b      	cbz	r3, 800629a <__ascii_mbtowc+0x1e>
 8006286:	7813      	ldrb	r3, [r2, #0]
 8006288:	600b      	str	r3, [r1, #0]
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	1e10      	subs	r0, r2, #0
 800628e:	bf18      	it	ne
 8006290:	2001      	movne	r0, #1
 8006292:	b002      	add	sp, #8
 8006294:	4770      	bx	lr
 8006296:	4610      	mov	r0, r2
 8006298:	e7fb      	b.n	8006292 <__ascii_mbtowc+0x16>
 800629a:	f06f 0001 	mvn.w	r0, #1
 800629e:	e7f8      	b.n	8006292 <__ascii_mbtowc+0x16>

080062a0 <_realloc_r>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	4680      	mov	r8, r0
 80062a6:	4615      	mov	r5, r2
 80062a8:	460c      	mov	r4, r1
 80062aa:	b921      	cbnz	r1, 80062b6 <_realloc_r+0x16>
 80062ac:	4611      	mov	r1, r2
 80062ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	f7ff b97b 	b.w	80055ac <_malloc_r>
 80062b6:	b92a      	cbnz	r2, 80062c4 <_realloc_r+0x24>
 80062b8:	f7ff f906 	bl	80054c8 <_free_r>
 80062bc:	2400      	movs	r4, #0
 80062be:	4620      	mov	r0, r4
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	f000 f841 	bl	800634a <_malloc_usable_size_r>
 80062c8:	4285      	cmp	r5, r0
 80062ca:	4606      	mov	r6, r0
 80062cc:	d802      	bhi.n	80062d4 <_realloc_r+0x34>
 80062ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062d2:	d8f4      	bhi.n	80062be <_realloc_r+0x1e>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4640      	mov	r0, r8
 80062d8:	f7ff f968 	bl	80055ac <_malloc_r>
 80062dc:	4607      	mov	r7, r0
 80062de:	2800      	cmp	r0, #0
 80062e0:	d0ec      	beq.n	80062bc <_realloc_r+0x1c>
 80062e2:	42b5      	cmp	r5, r6
 80062e4:	462a      	mov	r2, r5
 80062e6:	4621      	mov	r1, r4
 80062e8:	bf28      	it	cs
 80062ea:	4632      	movcs	r2, r6
 80062ec:	f7fe fa8d 	bl	800480a <memcpy>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7ff f8e8 	bl	80054c8 <_free_r>
 80062f8:	463c      	mov	r4, r7
 80062fa:	e7e0      	b.n	80062be <_realloc_r+0x1e>

080062fc <__ascii_wctomb>:
 80062fc:	4603      	mov	r3, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	b141      	cbz	r1, 8006314 <__ascii_wctomb+0x18>
 8006302:	2aff      	cmp	r2, #255	@ 0xff
 8006304:	d904      	bls.n	8006310 <__ascii_wctomb+0x14>
 8006306:	228a      	movs	r2, #138	@ 0x8a
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	4770      	bx	lr
 8006310:	2001      	movs	r0, #1
 8006312:	700a      	strb	r2, [r1, #0]
 8006314:	4770      	bx	lr
	...

08006318 <fiprintf>:
 8006318:	b40e      	push	{r1, r2, r3}
 800631a:	b503      	push	{r0, r1, lr}
 800631c:	4601      	mov	r1, r0
 800631e:	ab03      	add	r3, sp, #12
 8006320:	4805      	ldr	r0, [pc, #20]	@ (8006338 <fiprintf+0x20>)
 8006322:	f853 2b04 	ldr.w	r2, [r3], #4
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	f000 f83d 	bl	80063a8 <_vfiprintf_r>
 800632e:	b002      	add	sp, #8
 8006330:	f85d eb04 	ldr.w	lr, [sp], #4
 8006334:	b003      	add	sp, #12
 8006336:	4770      	bx	lr
 8006338:	20000018 	.word	0x20000018

0800633c <abort>:
 800633c:	2006      	movs	r0, #6
 800633e:	b508      	push	{r3, lr}
 8006340:	f000 fa06 	bl	8006750 <raise>
 8006344:	2001      	movs	r0, #1
 8006346:	f7fa feee 	bl	8001126 <_exit>

0800634a <_malloc_usable_size_r>:
 800634a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634e:	1f18      	subs	r0, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	bfbc      	itt	lt
 8006354:	580b      	ldrlt	r3, [r1, r0]
 8006356:	18c0      	addlt	r0, r0, r3
 8006358:	4770      	bx	lr

0800635a <__sfputc_r>:
 800635a:	6893      	ldr	r3, [r2, #8]
 800635c:	b410      	push	{r4}
 800635e:	3b01      	subs	r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	6093      	str	r3, [r2, #8]
 8006364:	da07      	bge.n	8006376 <__sfputc_r+0x1c>
 8006366:	6994      	ldr	r4, [r2, #24]
 8006368:	42a3      	cmp	r3, r4
 800636a:	db01      	blt.n	8006370 <__sfputc_r+0x16>
 800636c:	290a      	cmp	r1, #10
 800636e:	d102      	bne.n	8006376 <__sfputc_r+0x1c>
 8006370:	bc10      	pop	{r4}
 8006372:	f000 b931 	b.w	80065d8 <__swbuf_r>
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	1c58      	adds	r0, r3, #1
 800637a:	6010      	str	r0, [r2, #0]
 800637c:	7019      	strb	r1, [r3, #0]
 800637e:	4608      	mov	r0, r1
 8006380:	bc10      	pop	{r4}
 8006382:	4770      	bx	lr

08006384 <__sfputs_r>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	4606      	mov	r6, r0
 8006388:	460f      	mov	r7, r1
 800638a:	4614      	mov	r4, r2
 800638c:	18d5      	adds	r5, r2, r3
 800638e:	42ac      	cmp	r4, r5
 8006390:	d101      	bne.n	8006396 <__sfputs_r+0x12>
 8006392:	2000      	movs	r0, #0
 8006394:	e007      	b.n	80063a6 <__sfputs_r+0x22>
 8006396:	463a      	mov	r2, r7
 8006398:	4630      	mov	r0, r6
 800639a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639e:	f7ff ffdc 	bl	800635a <__sfputc_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d1f3      	bne.n	800638e <__sfputs_r+0xa>
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063a8 <_vfiprintf_r>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	460d      	mov	r5, r1
 80063ae:	4614      	mov	r4, r2
 80063b0:	4698      	mov	r8, r3
 80063b2:	4606      	mov	r6, r0
 80063b4:	b09d      	sub	sp, #116	@ 0x74
 80063b6:	b118      	cbz	r0, 80063c0 <_vfiprintf_r+0x18>
 80063b8:	6a03      	ldr	r3, [r0, #32]
 80063ba:	b90b      	cbnz	r3, 80063c0 <_vfiprintf_r+0x18>
 80063bc:	f7fe f8fe 	bl	80045bc <__sinit>
 80063c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063c2:	07d9      	lsls	r1, r3, #31
 80063c4:	d405      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	059a      	lsls	r2, r3, #22
 80063ca:	d402      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ce:	f7fe fa0c 	bl	80047ea <__retarget_lock_acquire_recursive>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	071b      	lsls	r3, r3, #28
 80063d6:	d501      	bpl.n	80063dc <_vfiprintf_r+0x34>
 80063d8:	692b      	ldr	r3, [r5, #16]
 80063da:	b99b      	cbnz	r3, 8006404 <_vfiprintf_r+0x5c>
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f938 	bl	8006654 <__swsetup_r>
 80063e4:	b170      	cbz	r0, 8006404 <_vfiprintf_r+0x5c>
 80063e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e8:	07dc      	lsls	r4, r3, #31
 80063ea:	d504      	bpl.n	80063f6 <_vfiprintf_r+0x4e>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	b01d      	add	sp, #116	@ 0x74
 80063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	0598      	lsls	r0, r3, #22
 80063fa:	d4f7      	bmi.n	80063ec <_vfiprintf_r+0x44>
 80063fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fe:	f7fe f9f5 	bl	80047ec <__retarget_lock_release_recursive>
 8006402:	e7f3      	b.n	80063ec <_vfiprintf_r+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	9309      	str	r3, [sp, #36]	@ 0x24
 8006408:	2320      	movs	r3, #32
 800640a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800640e:	2330      	movs	r3, #48	@ 0x30
 8006410:	f04f 0901 	mov.w	r9, #1
 8006414:	f8cd 800c 	str.w	r8, [sp, #12]
 8006418:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80065c4 <_vfiprintf_r+0x21c>
 800641c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006420:	4623      	mov	r3, r4
 8006422:	469a      	mov	sl, r3
 8006424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006428:	b10a      	cbz	r2, 800642e <_vfiprintf_r+0x86>
 800642a:	2a25      	cmp	r2, #37	@ 0x25
 800642c:	d1f9      	bne.n	8006422 <_vfiprintf_r+0x7a>
 800642e:	ebba 0b04 	subs.w	fp, sl, r4
 8006432:	d00b      	beq.n	800644c <_vfiprintf_r+0xa4>
 8006434:	465b      	mov	r3, fp
 8006436:	4622      	mov	r2, r4
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ffa2 	bl	8006384 <__sfputs_r>
 8006440:	3001      	adds	r0, #1
 8006442:	f000 80a7 	beq.w	8006594 <_vfiprintf_r+0x1ec>
 8006446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006448:	445a      	add	r2, fp
 800644a:	9209      	str	r2, [sp, #36]	@ 0x24
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 809f 	beq.w	8006594 <_vfiprintf_r+0x1ec>
 8006456:	2300      	movs	r3, #0
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006460:	f10a 0a01 	add.w	sl, sl, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	9307      	str	r3, [sp, #28]
 8006468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800646c:	931a      	str	r3, [sp, #104]	@ 0x68
 800646e:	4654      	mov	r4, sl
 8006470:	2205      	movs	r2, #5
 8006472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006476:	4853      	ldr	r0, [pc, #332]	@ (80065c4 <_vfiprintf_r+0x21c>)
 8006478:	f7fe f9b9 	bl	80047ee <memchr>
 800647c:	9a04      	ldr	r2, [sp, #16]
 800647e:	b9d8      	cbnz	r0, 80064b8 <_vfiprintf_r+0x110>
 8006480:	06d1      	lsls	r1, r2, #27
 8006482:	bf44      	itt	mi
 8006484:	2320      	movmi	r3, #32
 8006486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800648a:	0713      	lsls	r3, r2, #28
 800648c:	bf44      	itt	mi
 800648e:	232b      	movmi	r3, #43	@ 0x2b
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006494:	f89a 3000 	ldrb.w	r3, [sl]
 8006498:	2b2a      	cmp	r3, #42	@ 0x2a
 800649a:	d015      	beq.n	80064c8 <_vfiprintf_r+0x120>
 800649c:	4654      	mov	r4, sl
 800649e:	2000      	movs	r0, #0
 80064a0:	f04f 0c0a 	mov.w	ip, #10
 80064a4:	9a07      	ldr	r2, [sp, #28]
 80064a6:	4621      	mov	r1, r4
 80064a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ac:	3b30      	subs	r3, #48	@ 0x30
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d94b      	bls.n	800654a <_vfiprintf_r+0x1a2>
 80064b2:	b1b0      	cbz	r0, 80064e2 <_vfiprintf_r+0x13a>
 80064b4:	9207      	str	r2, [sp, #28]
 80064b6:	e014      	b.n	80064e2 <_vfiprintf_r+0x13a>
 80064b8:	eba0 0308 	sub.w	r3, r0, r8
 80064bc:	fa09 f303 	lsl.w	r3, r9, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	46a2      	mov	sl, r4
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	e7d2      	b.n	800646e <_vfiprintf_r+0xc6>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	1d19      	adds	r1, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	9103      	str	r1, [sp, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbb      	ittet	lt
 80064d4:	425b      	neglt	r3, r3
 80064d6:	f042 0202 	orrlt.w	r2, r2, #2
 80064da:	9307      	strge	r3, [sp, #28]
 80064dc:	9307      	strlt	r3, [sp, #28]
 80064de:	bfb8      	it	lt
 80064e0:	9204      	strlt	r2, [sp, #16]
 80064e2:	7823      	ldrb	r3, [r4, #0]
 80064e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e6:	d10a      	bne.n	80064fe <_vfiprintf_r+0x156>
 80064e8:	7863      	ldrb	r3, [r4, #1]
 80064ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ec:	d132      	bne.n	8006554 <_vfiprintf_r+0x1ac>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	3402      	adds	r4, #2
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80065c8 <_vfiprintf_r+0x220>
 8006502:	2203      	movs	r2, #3
 8006504:	4650      	mov	r0, sl
 8006506:	7821      	ldrb	r1, [r4, #0]
 8006508:	f7fe f971 	bl	80047ee <memchr>
 800650c:	b138      	cbz	r0, 800651e <_vfiprintf_r+0x176>
 800650e:	2240      	movs	r2, #64	@ 0x40
 8006510:	9b04      	ldr	r3, [sp, #16]
 8006512:	eba0 000a 	sub.w	r0, r0, sl
 8006516:	4082      	lsls	r2, r0
 8006518:	4313      	orrs	r3, r2
 800651a:	3401      	adds	r4, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006522:	2206      	movs	r2, #6
 8006524:	4829      	ldr	r0, [pc, #164]	@ (80065cc <_vfiprintf_r+0x224>)
 8006526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800652a:	f7fe f960 	bl	80047ee <memchr>
 800652e:	2800      	cmp	r0, #0
 8006530:	d03f      	beq.n	80065b2 <_vfiprintf_r+0x20a>
 8006532:	4b27      	ldr	r3, [pc, #156]	@ (80065d0 <_vfiprintf_r+0x228>)
 8006534:	bb1b      	cbnz	r3, 800657e <_vfiprintf_r+0x1d6>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	3307      	adds	r3, #7
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	3308      	adds	r3, #8
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006544:	443b      	add	r3, r7
 8006546:	9309      	str	r3, [sp, #36]	@ 0x24
 8006548:	e76a      	b.n	8006420 <_vfiprintf_r+0x78>
 800654a:	460c      	mov	r4, r1
 800654c:	2001      	movs	r0, #1
 800654e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006552:	e7a8      	b.n	80064a6 <_vfiprintf_r+0xfe>
 8006554:	2300      	movs	r3, #0
 8006556:	f04f 0c0a 	mov.w	ip, #10
 800655a:	4619      	mov	r1, r3
 800655c:	3401      	adds	r4, #1
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	4620      	mov	r0, r4
 8006562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006566:	3a30      	subs	r2, #48	@ 0x30
 8006568:	2a09      	cmp	r2, #9
 800656a:	d903      	bls.n	8006574 <_vfiprintf_r+0x1cc>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0c6      	beq.n	80064fe <_vfiprintf_r+0x156>
 8006570:	9105      	str	r1, [sp, #20]
 8006572:	e7c4      	b.n	80064fe <_vfiprintf_r+0x156>
 8006574:	4604      	mov	r4, r0
 8006576:	2301      	movs	r3, #1
 8006578:	fb0c 2101 	mla	r1, ip, r1, r2
 800657c:	e7f0      	b.n	8006560 <_vfiprintf_r+0x1b8>
 800657e:	ab03      	add	r3, sp, #12
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	462a      	mov	r2, r5
 8006584:	4630      	mov	r0, r6
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <_vfiprintf_r+0x22c>)
 8006588:	a904      	add	r1, sp, #16
 800658a:	f7fd fbcd 	bl	8003d28 <_printf_float>
 800658e:	4607      	mov	r7, r0
 8006590:	1c78      	adds	r0, r7, #1
 8006592:	d1d6      	bne.n	8006542 <_vfiprintf_r+0x19a>
 8006594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006596:	07d9      	lsls	r1, r3, #31
 8006598:	d405      	bmi.n	80065a6 <_vfiprintf_r+0x1fe>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	059a      	lsls	r2, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_vfiprintf_r+0x1fe>
 80065a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065a2:	f7fe f923 	bl	80047ec <__retarget_lock_release_recursive>
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	065b      	lsls	r3, r3, #25
 80065aa:	f53f af1f 	bmi.w	80063ec <_vfiprintf_r+0x44>
 80065ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065b0:	e71e      	b.n	80063f0 <_vfiprintf_r+0x48>
 80065b2:	ab03      	add	r3, sp, #12
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	462a      	mov	r2, r5
 80065b8:	4630      	mov	r0, r6
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <_vfiprintf_r+0x22c>)
 80065bc:	a904      	add	r1, sp, #16
 80065be:	f7fd fe51 	bl	8004264 <_printf_i>
 80065c2:	e7e4      	b.n	800658e <_vfiprintf_r+0x1e6>
 80065c4:	08006c60 	.word	0x08006c60
 80065c8:	08006c66 	.word	0x08006c66
 80065cc:	08006c6a 	.word	0x08006c6a
 80065d0:	08003d29 	.word	0x08003d29
 80065d4:	08006385 	.word	0x08006385

080065d8 <__swbuf_r>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	460e      	mov	r6, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	4605      	mov	r5, r0
 80065e0:	b118      	cbz	r0, 80065ea <__swbuf_r+0x12>
 80065e2:	6a03      	ldr	r3, [r0, #32]
 80065e4:	b90b      	cbnz	r3, 80065ea <__swbuf_r+0x12>
 80065e6:	f7fd ffe9 	bl	80045bc <__sinit>
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	071a      	lsls	r2, r3, #28
 80065f2:	d501      	bpl.n	80065f8 <__swbuf_r+0x20>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	b943      	cbnz	r3, 800660a <__swbuf_r+0x32>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f82a 	bl	8006654 <__swsetup_r>
 8006600:	b118      	cbz	r0, 800660a <__swbuf_r+0x32>
 8006602:	f04f 37ff 	mov.w	r7, #4294967295
 8006606:	4638      	mov	r0, r7
 8006608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	6922      	ldr	r2, [r4, #16]
 800660e:	b2f6      	uxtb	r6, r6
 8006610:	1a98      	subs	r0, r3, r2
 8006612:	6963      	ldr	r3, [r4, #20]
 8006614:	4637      	mov	r7, r6
 8006616:	4283      	cmp	r3, r0
 8006618:	dc05      	bgt.n	8006626 <__swbuf_r+0x4e>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f7ff fda9 	bl	8006174 <_fflush_r>
 8006622:	2800      	cmp	r0, #0
 8006624:	d1ed      	bne.n	8006602 <__swbuf_r+0x2a>
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	3b01      	subs	r3, #1
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	701e      	strb	r6, [r3, #0]
 8006634:	6962      	ldr	r2, [r4, #20]
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	429a      	cmp	r2, r3
 800663a:	d004      	beq.n	8006646 <__swbuf_r+0x6e>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	07db      	lsls	r3, r3, #31
 8006640:	d5e1      	bpl.n	8006606 <__swbuf_r+0x2e>
 8006642:	2e0a      	cmp	r6, #10
 8006644:	d1df      	bne.n	8006606 <__swbuf_r+0x2e>
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fd93 	bl	8006174 <_fflush_r>
 800664e:	2800      	cmp	r0, #0
 8006650:	d0d9      	beq.n	8006606 <__swbuf_r+0x2e>
 8006652:	e7d6      	b.n	8006602 <__swbuf_r+0x2a>

08006654 <__swsetup_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4b29      	ldr	r3, [pc, #164]	@ (80066fc <__swsetup_r+0xa8>)
 8006658:	4605      	mov	r5, r0
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	460c      	mov	r4, r1
 800665e:	b118      	cbz	r0, 8006668 <__swsetup_r+0x14>
 8006660:	6a03      	ldr	r3, [r0, #32]
 8006662:	b90b      	cbnz	r3, 8006668 <__swsetup_r+0x14>
 8006664:	f7fd ffaa 	bl	80045bc <__sinit>
 8006668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666c:	0719      	lsls	r1, r3, #28
 800666e:	d422      	bmi.n	80066b6 <__swsetup_r+0x62>
 8006670:	06da      	lsls	r2, r3, #27
 8006672:	d407      	bmi.n	8006684 <__swsetup_r+0x30>
 8006674:	2209      	movs	r2, #9
 8006676:	602a      	str	r2, [r5, #0]
 8006678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e033      	b.n	80066ec <__swsetup_r+0x98>
 8006684:	0758      	lsls	r0, r3, #29
 8006686:	d512      	bpl.n	80066ae <__swsetup_r+0x5a>
 8006688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800668a:	b141      	cbz	r1, 800669e <__swsetup_r+0x4a>
 800668c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006690:	4299      	cmp	r1, r3
 8006692:	d002      	beq.n	800669a <__swsetup_r+0x46>
 8006694:	4628      	mov	r0, r5
 8006696:	f7fe ff17 	bl	80054c8 <_free_r>
 800669a:	2300      	movs	r3, #0
 800669c:	6363      	str	r3, [r4, #52]	@ 0x34
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6063      	str	r3, [r4, #4]
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	b94b      	cbnz	r3, 80066ce <__swsetup_r+0x7a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c4:	d003      	beq.n	80066ce <__swsetup_r+0x7a>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f882 	bl	80067d2 <__smakebuf_r>
 80066ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d2:	f013 0201 	ands.w	r2, r3, #1
 80066d6:	d00a      	beq.n	80066ee <__swsetup_r+0x9a>
 80066d8:	2200      	movs	r2, #0
 80066da:	60a2      	str	r2, [r4, #8]
 80066dc:	6962      	ldr	r2, [r4, #20]
 80066de:	4252      	negs	r2, r2
 80066e0:	61a2      	str	r2, [r4, #24]
 80066e2:	6922      	ldr	r2, [r4, #16]
 80066e4:	b942      	cbnz	r2, 80066f8 <__swsetup_r+0xa4>
 80066e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066ea:	d1c5      	bne.n	8006678 <__swsetup_r+0x24>
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	0799      	lsls	r1, r3, #30
 80066f0:	bf58      	it	pl
 80066f2:	6962      	ldrpl	r2, [r4, #20]
 80066f4:	60a2      	str	r2, [r4, #8]
 80066f6:	e7f4      	b.n	80066e2 <__swsetup_r+0x8e>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e7f7      	b.n	80066ec <__swsetup_r+0x98>
 80066fc:	20000018 	.word	0x20000018

08006700 <_raise_r>:
 8006700:	291f      	cmp	r1, #31
 8006702:	b538      	push	{r3, r4, r5, lr}
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	d904      	bls.n	8006714 <_raise_r+0x14>
 800670a:	2316      	movs	r3, #22
 800670c:	6003      	str	r3, [r0, #0]
 800670e:	f04f 30ff 	mov.w	r0, #4294967295
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006716:	b112      	cbz	r2, 800671e <_raise_r+0x1e>
 8006718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800671c:	b94b      	cbnz	r3, 8006732 <_raise_r+0x32>
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f830 	bl	8006784 <_getpid_r>
 8006724:	4622      	mov	r2, r4
 8006726:	4601      	mov	r1, r0
 8006728:	4628      	mov	r0, r5
 800672a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800672e:	f000 b817 	b.w	8006760 <_kill_r>
 8006732:	2b01      	cmp	r3, #1
 8006734:	d00a      	beq.n	800674c <_raise_r+0x4c>
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	d103      	bne.n	8006742 <_raise_r+0x42>
 800673a:	2316      	movs	r3, #22
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	2001      	movs	r0, #1
 8006740:	e7e7      	b.n	8006712 <_raise_r+0x12>
 8006742:	2100      	movs	r1, #0
 8006744:	4620      	mov	r0, r4
 8006746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800674a:	4798      	blx	r3
 800674c:	2000      	movs	r0, #0
 800674e:	e7e0      	b.n	8006712 <_raise_r+0x12>

08006750 <raise>:
 8006750:	4b02      	ldr	r3, [pc, #8]	@ (800675c <raise+0xc>)
 8006752:	4601      	mov	r1, r0
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f7ff bfd3 	b.w	8006700 <_raise_r>
 800675a:	bf00      	nop
 800675c:	20000018 	.word	0x20000018

08006760 <_kill_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	2300      	movs	r3, #0
 8006764:	4d06      	ldr	r5, [pc, #24]	@ (8006780 <_kill_r+0x20>)
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	f7fa fcca 	bl	8001106 <_kill>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d102      	bne.n	800677c <_kill_r+0x1c>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	b103      	cbz	r3, 800677c <_kill_r+0x1c>
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	200003d4 	.word	0x200003d4

08006784 <_getpid_r>:
 8006784:	f7fa bcb8 	b.w	80010f8 <_getpid>

08006788 <__swhatbuf_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	4615      	mov	r5, r2
 8006792:	2900      	cmp	r1, #0
 8006794:	461e      	mov	r6, r3
 8006796:	b096      	sub	sp, #88	@ 0x58
 8006798:	da0c      	bge.n	80067b4 <__swhatbuf_r+0x2c>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	2100      	movs	r1, #0
 800679e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067a2:	bf14      	ite	ne
 80067a4:	2340      	movne	r3, #64	@ 0x40
 80067a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067aa:	2000      	movs	r0, #0
 80067ac:	6031      	str	r1, [r6, #0]
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	b016      	add	sp, #88	@ 0x58
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	466a      	mov	r2, sp
 80067b6:	f000 f849 	bl	800684c <_fstat_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	dbed      	blt.n	800679a <__swhatbuf_r+0x12>
 80067be:	9901      	ldr	r1, [sp, #4]
 80067c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067c8:	4259      	negs	r1, r3
 80067ca:	4159      	adcs	r1, r3
 80067cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067d0:	e7eb      	b.n	80067aa <__swhatbuf_r+0x22>

080067d2 <__smakebuf_r>:
 80067d2:	898b      	ldrh	r3, [r1, #12]
 80067d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d6:	079d      	lsls	r5, r3, #30
 80067d8:	4606      	mov	r6, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	d507      	bpl.n	80067ee <__smakebuf_r+0x1c>
 80067de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2301      	movs	r3, #1
 80067e8:	6163      	str	r3, [r4, #20]
 80067ea:	b003      	add	sp, #12
 80067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ee:	466a      	mov	r2, sp
 80067f0:	ab01      	add	r3, sp, #4
 80067f2:	f7ff ffc9 	bl	8006788 <__swhatbuf_r>
 80067f6:	9f00      	ldr	r7, [sp, #0]
 80067f8:	4605      	mov	r5, r0
 80067fa:	4639      	mov	r1, r7
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7fe fed5 	bl	80055ac <_malloc_r>
 8006802:	b948      	cbnz	r0, 8006818 <__smakebuf_r+0x46>
 8006804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d4ee      	bmi.n	80067ea <__smakebuf_r+0x18>
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	f043 0302 	orr.w	r3, r3, #2
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	e7e2      	b.n	80067de <__smakebuf_r+0xc>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	b15b      	cbz	r3, 8006842 <__smakebuf_r+0x70>
 800682a:	4630      	mov	r0, r6
 800682c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006830:	f000 f81e 	bl	8006870 <_isatty_r>
 8006834:	b128      	cbz	r0, 8006842 <__smakebuf_r+0x70>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	431d      	orrs	r5, r3
 8006846:	81a5      	strh	r5, [r4, #12]
 8006848:	e7cf      	b.n	80067ea <__smakebuf_r+0x18>
	...

0800684c <_fstat_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	2300      	movs	r3, #0
 8006850:	4d06      	ldr	r5, [pc, #24]	@ (800686c <_fstat_r+0x20>)
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f7fa fcb3 	bl	80011c4 <_fstat>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d102      	bne.n	8006868 <_fstat_r+0x1c>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	b103      	cbz	r3, 8006868 <_fstat_r+0x1c>
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	bd38      	pop	{r3, r4, r5, pc}
 800686a:	bf00      	nop
 800686c:	200003d4 	.word	0x200003d4

08006870 <_isatty_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d05      	ldr	r5, [pc, #20]	@ (800688c <_isatty_r+0x1c>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fa fcb1 	bl	80011e2 <_isatty>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_isatty_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_isatty_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	200003d4 	.word	0x200003d4

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
